%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%10GbE interface						%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Document revision: DRAFT, 2007-06-24
%% By Jason Manley
%% UNTESTED and UNCHECKED!

\Block{10GbE Transceiver}{ten\_GbE}{tenGbE}{Pierre Yves Droz}{Jason Manley}{This block sends and receives UDP frames (packets). It accepts a 64 bit wide data stream with user-determined frame breaks. The data stream is wrapped in a UDP frame for transmission. Incoming UDP packets are unwrapped and the data presented as a 64 bit wide stream. Only tested for the BEE2 platform.}

\begin{ParameterTable}

\Parameter{Port}{port}{Selects the physical CX4 port on the iBOB or BEE2. The iBOB has two ports; the BEE2 has two for the control FPGA and four for each of the user FPGAs. CORR is not used by CASPER.}
\Parameter{Use lightweight MAC}{mac\_lite}{Toggles the use of a lightweight MAC implementation, which does not perform checksum validation.}
\Parameter{Pre-emphasis}{pre\_emph}{Selects the pre-emaphasis to use over the physical link. Default: 3 (see Xilinx documentation)}
\Parameter{Differential Swing}{swing}{Selects the size of the differential swing to use in mV. Default: 800 (see Xilinx documentation)}


\end{ParameterTable}

\begin{PortTable}
\Port{rst}{in}{boolean}{Resets the transceiver when pulsed high}
\Port{tx\_data}{in}{UFix\_64\_0}{Accepts the data stream to be transmitted}
\Port{tx\_valid}{in}{boolean}{The core accept the data on \textit{tx\_data} into the buffer while this line is high}
\Port{tx\_dest\_ip}{in}{UFix\_32\_0}{Selects the IP address of the receiving device}
\Port{tx\_dest\_port}{in}{UFix\_16\_0}{Selects the listening port of the receiving device (UDP port)}
\Port{tx\_end\_of\_frame}{in}{boolean}{Signals the transceiver to begin transmitting the buffered frame (ie signals end of the frame)}
\Port{tx\_discard}{in}{boolean}{Dumps the buffered packet and empties the FIFO buffer}
\Port{rx\_ack}{in}{boolean}{Used to acknowledge reception of the data currently on rx\_data and signals the transceiver to produce the next 64 bits from the receiver FIFO.}
\Port{led\_up}{out}{boolean}{Indicates a link on the port}
\Port{led\_rx}{out}{boolean}{Represents received traffic on the port}
\Port{led\_tx}{out}{boolean}{Represents transmitted traffic on the port}
\Port{tx\_ack}{out}{boolean}{Indicates that the data just clocked-in was accepted (will not acknowledge when buffer is full).}
\Port{rx\_data}{out}{UFix\_64\_0}{Outputs the received data stream.}
\Port{rx\_valid}{out}{boolean}{Indicates that the data on rx\_data is valid (indicates a packet, or partial packet is in the RX buffer).}
\Port{rx\_source\_ip}{out}{UFix\_32\_0}{Represents the IP address of the sender of the current packet.}
\Port{rx\_source\_port}{out}{UFix\_16\_0}{Represents the sender's UDP port of the current packet.}
\Port{rx\_end\_of\_frame}{out}{boolean}{Goes high to indicate the end of the received frame.}
\Port{rx\_size}{out}{UFix\_16\_0}{Represents the total size of the packet currently in the RX buffer}

\end{PortTable}


\BlockDesc{

This document is a draft and requires verification.

\paragraph{Configuration}
The transceiver is configured through BORPH. Each transceiver instance has an entry in BORPH's \textit{/proc} filesystem. A simple way to modify configuration is to generate a text file and copy the contents into the \textit{/proc} entry. The text file's contents should be as follows: \\
\begin{tabbing}

begin \=	\\
\>	mac = 10:10:10:10:10:10	\\
\>	ip = 10.0.0.220	\\
\>	gateway = 10.0.0.1	\\
\>	port = 50000	\\
end \\
\end{tabbing}


Then use \textit{cp /home/user/setup\_GbE.txt /proc/PID/hw/ioreg/ten\_GbE} to copy the file over the previous configuration. Please note that \textit{ioreg\_mode} must be in mode \textit{1} for this to work.

	
\paragraph{Transmitting}
To transmit, data is clocked into a TX buffer through \textit{tx\_data} in 64 bit wide words using \textit{tx\_valid}. When ready to transmit, pulse the \textit{tx\_end\_of\_frame} line; the transceiver will add a UDP wrapper addressed to \textit{tx\_dest\_ip:tx\_dest\_port} and begin transmission immediately. The \textit{tx\_end\_of\_frame} line must be brought high simultaneously with the last valid data word to be transmitted. Ie the \textit{tx\_valid} and \textit{tx\_end\_of\_frame} lines must be pulsed together to effect an end-of-frame.

If you do not wish to send the packet (and discard the data already clocked in), pulse \textit{tx\_discard} instead of \textit{tx\_end\_of\_frame}. The \textit{tx\_dest\_ip} and \textit{tx\_dest\_port} lines are ignored until a valid \textit{tx\_end\_of\_frame} is received.  The sending port field in the UDP packet contains the listen port address (see below for configuration). Bear in mind that if the board is running at much over 120MHz, you cannot clock data into the core on every clock cycle (maximum transmission rate is 10Gbps and there is additional UDP packetization and ARP overhead). Maximum packet size appears to be in the order of 1100 words (of 64 bits each).

\paragraph{Receiving}
Upon receipt of a packet, \textit{rx\_valid} will go high and \textit{rx\_size} will indicate the length of the packet in 64 bit words. The received data is presented on \textit{rx\_data} in 64 bit wide words. You acknowledge receipt of this data using \textit{rx\_ack}, at which point the next data word will be presented. When the end of the packet is reached, \textit{rx\_end\_of\_frame} will go high.

\paragraph{Addressing}
To transmit, the IPv4 address is represented as a 32 bit binary number (whereas it's usually represented as four 8 bit decimal numbers). For example, if you wanted to send all packets to 192.168.1.1, a constant of 3 232 235 777 could be entered ($192\times2^{24} + 168\times2^{16} + 1\times2^8 + 1$) as the IP address. The port is represented by a 16 bit number, allowing full addressing of the UDP port range. Ports below 1024 are generally reserved for Linux kernel and Internet functions. Ports 1024 - 49151 are registered for specific applications and may not be used without IANA registration. To ensure inter-operability and compatibility, we recommend using dynamic (private) ports 49152 through 65535.

To receive, the MAC address, IP address and listen port of each transceiver can be configured through BORPH or TinySH. Transceivers may have different IP addresses and listen ports, however, it is only possible for any given transceiver to listen on one port at a time. This can be reconfigured while running.

\paragraph{LED Outputs}
The LED lines indicate port activity and can be connected to external GPIO LED interfaces. Bear in mind that even if no packets are being transmitted or received through the Simulink interface block, miscellaneous configuration packets are still sent and may be received by the microprocessor core. This activity will also be reflected on the activity LEDs.

\paragraph{Operation}
Apart from configuring the block, the processor is also used to map the routing tables. ARP requests and responses are handled by the microprocessor. All packets to the block's IP address that are not on the configured port are redirected to the processor running TinySH for management. 

}