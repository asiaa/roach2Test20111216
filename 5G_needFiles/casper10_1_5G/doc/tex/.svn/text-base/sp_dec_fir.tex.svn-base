
\Block{Decimating FIR Filter}{dec\_fir}{decfir}{Aaron Parsons}{Aaron Parsons, Ben Blackman}{FIR filter which can handle multiple time samples in parallel and decimates down to 1 time sample. If coefficiencts are symmetric, it will automatically fold before multiplying.}

\begin{ParameterTable}
\Parameter{Number of Parallel Streams}{n\_inputs}{The number of time samples which arrive in parallel.}
\Parameter{Coefficients}{coeff}{The FIR coefficients. If this vector is symmetric, the FIR will automatically fold before multiplying.}
\Parameter{Bit Width Out}{n\_bits}{The number of bits in each real/imag sample of the complex number that is output.}
\Parameter{Quantization Behavior}{quantization}{The quantization behavior used in converting to the output bit width.}
\Parameter{Add Latency}{add\_latency}{The latency of adders/converters.}
\Parameter{Mult Latency}{mult\_latency}{The latency of multipliers.}
\end{ParameterTable}

\begin{PortTable}
\Port{sync\_in}{IN}{boolean}{Takes an impulse 1 cycle before input is valid.}
\Port{realX}{IN}{Fix\_(n\_bits)\_(n\_bits-1)}{Real input X}
\Port{inagX}{IN}{Fix\_(n\_bits)\_(n\_bits-1)}{Imaginary input X}
\Port{sync\_out}{OUT}{boolean}{Will be high the clock cycle before \textit{dout} is valid.}
\end{PortTable}

\BlockDesc{
\paragraph{Usage}
User specifies the number of parallel streams to be decimated to one complex number. Inputs are multiplied by the coefficients and added together to form \textit{dout}. Bit Width Out specifies the widths of the real and imaginary components of the complex number to be output (Ex. if Bit Width Out = 8, then dout will be 16 bits, 8 for the real and imaginary components).
 }
