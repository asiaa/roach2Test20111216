\Block{FFT}
{fft}
{fft}
{Aaron Parsons}
{Aaron Parsons}
{Computes the Fast Fourier Transform with $2^N$ channels for time samples presented $2^P$ at a time in parallel.  Uses a biplex FFT architecture under the hood which has been extended to handled time samples in parallel.  For $P=0$, this block accepts two independent, parallel streams (labelled as pols) and computes the FFT of each independently (the biplex architecture provides this for free).  Data is output in normal frequency order, meaning that channel 0 (corresponding to DC) is output first, followed by channel 1, on up to channel $2^N-1$ (which can be interpreted as channel -1).  When multiple time samples are presented in parallel on the input, multiple frequency samples are output in parallel.}

\begin{ParameterTable}
\Parameter{Size of FFT: ($2^?$)}{FFTSize}{The number of channels in the FFT.}
\Parameter{Bit Width}{BitWidth}{The number of bits in each real and imaginary sample as they are carried through the FFT.  Each FFT stage will round numbers back down to this number of bits after performing a butterfly computation.}
\Parameter{Number of Simultaneous Inputs: ($2^?$)}{n\_inputs}{The number of parallel time samples which are presented to the FFT core each clock.  The number of output ports are set to this same value.}
\Parameter{Quantization Behavior}{quantization}{Specifies the rounding behavior used at the end of each butterfly computation to return to the number of bits specified above.}
\Parameter{Overflow Behavior}{overflow}{Indicates the behavior of the FFT core when the value of a sample exceeds what can be expressed in the specified bit width.}
\Parameter{Add Latency}{add\_latency}{Latency through adders in the FFT.}
\Parameter{Mult Latency}{mult\_latency}{Latency through multipliers in the FFT.}
\Parameter{BRAM Latency}{bram\_latency}{Latency through BRAM in the FFT.}

\end{ParameterTable}

\begin{PortTable}
\Port{sync}{in}{Boolean}{Indicates the next clock cycle contains valid data}
\Port{shift}{in}{Unsigned}{Sets the shifting schedule through the FFT.  Bit 0 specifies the behavior of stage 0, bit 1 of stage 1, and so on.  If a stage is set to shift (with bit = 1), that every sample is divided by 2 at the output of that stage.}
\Port{In}{in}{Inherited}{The time-domain stream(s) to channelized.}
\Port{sync\_out}{out}{Boolean}{Indicates that data out will be valid next clock cycle.}
\Port{of}{out}{Boolean}{Indicates an overflow occurred at some stage in the FFT.}
\Port{Out}{out}{Inherited}{The frequency channels.}
\end{PortTable}

\BlockDesc{Computes the Fast Fourier Transform with $2^N$ channels for time samples presented $2^P$ at a time in parallel.  Uses a biplex FFT architecture under the hood which has been extended to handled time samples in parallel.  For $P=0$, this block accepts two independent, parallel streams (labelled as pols) and computes the FFT of each independently (the biplex architecture provides this for free).  Data is output in normal frequency order, meaning that channel 0 (corresponding to DC) is output first, followed by channel 1, on up to channel $2^N-1$ (which can be interpreted as channel -1).  When multiple time samples are presented in parallel on the input, multiple frequency samples are output in parallel.}

