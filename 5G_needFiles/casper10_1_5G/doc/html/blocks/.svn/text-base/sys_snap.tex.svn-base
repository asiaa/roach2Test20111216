\documentclass{article}
\oddsidemargin  0.0in
\evensidemargin 0.0in
\textwidth      6.5in
\usepackage{tabularx}
\usepackage{html}
\title{\textbf{CASPER Library} \\Reference Manual}
\newcommand{\Block}[6]{\section {#1 \emph{(#2)}} \label{#3} \textbf{Block Author}: #4 \\ \textbf{Document Author}: #5 \subsection*{Summary}#6}

\newenvironment{PortTable}{\subsection*{Ports}
\tabularx{6.5in}{|l|l|l|X|} \hline  \textbf{Port} & \textbf{Dir.} & \textbf{Data Type} & \textbf{Description} \\ \hline}{\endtabularx}

\newcommand{\Port}[4]{\emph{#1} & \lowercase{#2} & #3 & #4\\  \hline}

\newcommand{\BlockDesc}[1]{\subsection*{Description}#1}

\newenvironment{ParameterTable}{\subsection*{Mask Parameters}
\tabularx{6.5in}{|l|l|X|} \hline  \textbf{Parameter} & \textbf{Variable} & \textbf{Description} \\ \hline}{\endtabularx}

\newcommand{\Parameter}[3]{#1 & \emph{#2} & #3 \\ \hline}

\begin{htmlonly}
\newcommand{\tabularx}[3]{\begin{tabularx}{#1}{#2}{#3}}
\newcommand{\endtabularx}{\end{tabularx}}
\end{htmlonly}

\date{Last Updated \today}
\begin{document}
\maketitle

%\chapter{System Blocks}
%%%%Change Chapter%%%%%%%%
%\chapter{Signal Processing Blocks}

%\input{test.tex}
%\chapter{Communication Blocks}
%\end{document} 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%Template for documenting CASPER Library Blocks%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%\Block describes a Block. The simulink name should be exactly as it appears in 
%%%Simulink, note that \_ must be used for underscores.
%%%The block label is the same as the simulink name but without the underscores.
%%%This label is defined as a latex reference and is
%%%usefull for cross-referencing other blocks. You can include in your
%%%Block Descriptions commands like refer to the adder tree block \ref{addertree}.
%%%The Block description can include arbitrary Latex, but do not use the Latex Math 
%%%%environment, it causes the conversion to HTML complicated. 
%%%Use \emph{} to write math and try to use MATLAB commands for math expressions
%%%All Parameters for the \Block \Port and \Parameter commands must be present.

\Block{Snapshot Capture}{snap}{snap}{Aaron Parsons}{Aaron Parsons, Ben Blackman}{The snap block provides a packaged solution to capturing data from the FPGA fabric and making it accessible from the CPU. snap captures to a 32 bit wide shared BRAM.}

\begin{ParameterTable}
\Parameter{No. of Samples ($2^?$)}{nsamples}{Specifies the depth of the Shared BRAM(s); i.e. the number of 32bit samples which are stored per capture.}
\end{ParameterTable}

\begin{PortTable}
\Port{din}{IN}{unsigned\_32\_0}{The data to be captured. Regardless of type, the bit-level representation of these numbers are written as 32bit values to the Shared BRAM.}
\Port{trig}{IN}{boolean}{When high, triggers the beginning of a data capture. Thereafter, every enabled data is written to the shared BRAM until it is full.}
\Port{we}{IN}{boolean}{After a trigger is begun, enables a write to Shared BRAM.}
\end{PortTable}

\BlockDesc{
\paragraph{Usage}
Under TinySH/BORPH, this device will have 3 sub-devices: \textit{ctrl}, \textit{bram}, and \textit{addr}. \textit{ctrl} is an input register. Bit 0, when driven from low to high, enables a trigger/data capture to occur. Bit 1, when high, overrides \textit{trig} to trigger instantly. Bit 2, when high, overrides \textit{we} to always write data to bram. \textit{addr} is an output register and records the last address of \textit{bram} to which data was written. \textit{bram} is a 32 bit wide Shared BRAM of the depth specified in \textit{Parameters}.
}
 
\end{document}
