/* Linker Script automatically rev'ed up using XPS 8.2 */
/* Linker Script automatically rev'ed up using XPS 8.1 */

_STACK_SIZE = DEFINED(_STACK_SIZE) ? _STACK_SIZE : 0x400;
_HEAP_SIZE = DEFINED(_HEAP_SIZE) ? _HEAP_SIZE : 0x100;

/* Define all the memory regions in the system */
MEMORY
{
plb_bram_if_cntlr_1 : ORIGIN = 0xffffc000, LENGTH = 0x3fff - 4
boot : ORIGIN = 0xfffffffc, LENGTH = 4
}


/*
* Specify the default entry point to the program
*/
ENTRY(_boot)
STARTUP(boot.o)
/* GROUP(libxil.a libc.a) */

/*
* Define the sections, and where they are mapped in memory
*/
SECTIONS
{

  /* 
   * This section is only needed if you have 
   * interrupts or exceptions
   * Ensure that this is on a 64K boundary 
   */
/*
  .vectors :
  {
    *(.vectors)
   }  >  
*/

  .text      :
  {
    *(.text)
    *(.text.*)
    *(.gnu.linkonce.t.*)
  } > plb_bram_if_cntlr_1 

.init : { KEEP(*(.init)) } > plb_bram_if_cntlr_1 

.fini : { KEEP(*(.fini)) } > plb_bram_if_cntlr_1 
  _etext = .;
  PROVIDE (etext = .);
  PROVIDE (__etext = .);

  .rodata    :
  {
    *(.rodata)
    *(.rodata.*)
    *(.gnu.linkonce.r.*)
  } > plb_bram_if_cntlr_1 

  .sdata2   : { *(.sdata2) 
   *(.gnu.linkonce.s2.*)  }  > plb_bram_if_cntlr_1 

  __SDATA2_START__ = ADDR(.sdata2);
  __SDATA2_END__ = ADDR(.sdata2) + SIZEOF(.sdata2);

  .sbss2   : { *(.sbss2) 
   *(.gnu.linkonce.sb2.*)
  }  > plb_bram_if_cntlr_1 

  __SBSS2_START__ = ADDR(.sbss2);
  __SBSS2_END__ = ADDR(.sbss2) + SIZEOF(.sbss2);

  .data    :
  {
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d.*)
    *(.eh_frame)
  } > plb_bram_if_cntlr_1 

.ctors : { 
   __CTOR_LIST__ = .;
   ___CTORS_LIST___ = .;
   KEEP (*crtbegin.o(.ctors))
   KEEP (*(EXCLUDE_FILE(*crtend.o) .ctors))
   KEEP (*(SORT(.ctors.*)))
   KEEP (*(.ctors))
   __CTOR_END__ = .;
   ___CTORS_END___ = .;
} > plb_bram_if_cntlr_1 

.dtors : {
   __DTOR_LIST__ = .;
   ___DTORS_LIST___ = .;
   KEEP (*crtbegin.o(.dtors))
   KEEP (*(EXCLUDE_FILE(*crtend.o) .dtors))
   KEEP (*(SORT(.dtors.*)))
   KEEP (*(.dtors))
   __DTOR_END__ = .;
   ___DTORS_END___ = .;
} > plb_bram_if_cntlr_1 

.eh_frame : { *(.eh_frame) } > plb_bram_if_cntlr_1 

.jcr : { *(.jcr) } > plb_bram_if_cntlr_1 

.gcc_except_table : { *(.gcc_except_table) } > plb_bram_if_cntlr_1 

.got : { *(.got) } > plb_bram_if_cntlr_1 

.tdata : { 
   *(.tdata) 
   *(.gnu.linkonce.td.*)
} > plb_bram_if_cntlr_1 

.tbss : { 
   *(.tbss) 
   *(.gnu.linkonce.tb.*)
} > plb_bram_if_cntlr_1 

  .fixup	: { *(.fixup) } > plb_bram_if_cntlr_1 
  .got1		: { *(.got1)   }  > plb_bram_if_cntlr_1 

  .got2		: { *(.got2)   }  > plb_bram_if_cntlr_1 


 
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata	  : { *(.sdata) 
   *(.gnu.linkonce.s.*)  }  > plb_bram_if_cntlr_1

  __SDATA_START__ = ADDR(.sdata);
  __SDATA_END__ = ADDR(.sdata) + SIZEOF(.sdata);
  _edata  =  .;
  PROVIDE (edata = .);
  PROVIDE (__edata = .);

  .sbss      :
  {
    __sbss_start = .;
    ___sbss_start = .;
    *(.sbss)
   *(.gnu.linkonce.sb.*)
    *(.scommon)
    __sbss_end = .;
    ___sbss_end = .;
  } > plb_bram_if_cntlr_1


  .bss       :
  {
   __bss_start = .;
   ___bss_start = .;
   *(.bss)
   *(.gnu.linkonce.b.*)
   *(COMMON)
   . = ALIGN(4);
   __bss_end = .;
  } > plb_bram_if_cntlr_1


  .bss_stack    :
  {
    /* add stack and align to 16 byte boundary */
  _stack_end = .; 
    . = . + _STACK_SIZE;
    . = ALIGN(16);
    __stack = .;
   }  > plb_bram_if_cntlr_1 

  .bss_heap    :
  {
    /* add heap and align to 16 byte boundary */
     . = ALIGN(16);
    _heap_start = .;
    . = . + _HEAP_SIZE;
    . = ALIGN(16);
    _heap_end = .;
   }  > plb_bram_if_cntlr_1 

  /* BOOT0 must be a memory whose address is within 24 bits of .boot */
  /* Normally it is the same physical memory as .boot */
  .boot0  : { *(.boot0) }  > plb_bram_if_cntlr_1 
  _end = . ;
  end = .;
  __end = .;

  /* There needs to be some memory defined at this address */
  .boot  0xFFFFFFFC  : { *(.boot)  }  

}

