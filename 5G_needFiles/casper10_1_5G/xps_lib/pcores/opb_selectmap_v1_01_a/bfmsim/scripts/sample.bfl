------------------------------------------------------------------------------
--
-- ***************************************************************************
-- **                                                                       **
-- ** Copyright (c) 1995-2005 Xilinx, Inc.  All rights reserved.            **
-- **                                                                       **
-- ** You may copy and modify these files for your own internal use solely  **
-- ** with Xilinx programmable logic devices and Xilinx EDK system or       **
-- ** create IP modules solely for Xilinx programmable logic devices and    **
-- ** Xilinx EDK system. No rights are granted to distribute any files      **
-- ** unless they are distributed in Xilinx programmable logic devices.     **
-- **                                                                       **
-- ***************************************************************************
--


--
-- Define Alias
--

-- Byte Enable Alias
set_alias(IGNOR = 00000000)
set_alias(BYTE0 = 10000000)
set_alias(BYTE1 = 01000000)
set_alias(BYTE2 = 00100000)
set_alias(BYTE3 = 00010000)
set_alias(BYTE4 = 00001000)
set_alias(BYTE5 = 00000100)
set_alias(BYTE6 = 00000010)
set_alias(BYTE7 = 00000001)
set_alias(BYTE8 = 10000000)
set_alias(BYTE9 = 01000000)
set_alias(BYTEA = 00100000)
set_alias(BYTEB = 00010000)
set_alias(BYTEC = 00001000)
set_alias(BYTED = 00000100)
set_alias(BYTEE = 00000010)
set_alias(BYTEF = 00000001)
set_alias(HWRD0 = 11000000)
set_alias(HWRD2 = 00110000)
set_alias(HWRD4 = 00001100)
set_alias(HWRD6 = 00000011)
set_alias(HWRD8 = 11000000)
set_alias(HWRDA = 00110000)
set_alias(HWRDC = 00001100)
set_alias(HWRDE = 00000011)
set_alias(WORD0 = 11110000)
set_alias(WORD4 = 00001111)
set_alias(WORD8 = 11110000)
set_alias(WORDC = 00001111)
set_alias(DWORD = 11111111)

-- UUT Address Space Alias
set_alias(USER_SLAVE_BASEADDR       = 30000000)
set_alias(IPIF_INTR_BASEADDR        = 30000100)

-- Memory Address Space Alias
set_alias(MEM0_BASEADDR = 10000000)
set_alias(MEM1_BASEADDR = 20000000)

-- UUT User Slave Register(s)
set_alias(SLAVE_REG0 = 30000000)
set_alias(SLAVE_REG0_BE = WORD0)
set_alias(SLAVE_REG1 = 30000004)
set_alias(SLAVE_REG1_BE = WORD4)
set_alias(SLAVE_REG2 = 30000008)
set_alias(SLAVE_REG2_BE = WORD8)
set_alias(SLAVE_REG3 = 3000000C)
set_alias(SLAVE_REG3_BE = WORDC)
set_alias(SLAVE_REG4 = 30000010)
set_alias(SLAVE_REG4_BE = WORD0)
set_alias(SLAVE_REG5 = 30000014)
set_alias(SLAVE_REG5_BE = WORD4)
set_alias(SLAVE_REG6 = 30000018)
set_alias(SLAVE_REG6_BE = WORD8)
set_alias(SLAVE_REG7 = 3000001C)
set_alias(SLAVE_REG7_BE = WORDC)

-- UUT IPIF Interrupt Register(s)
set_alias(INTR_DISR = 30000100)
set_alias(INTR_DISR_BE = WORD0)
set_alias(INTR_DIPR = 30000104)
set_alias(INTR_DIPR_BE = WORD4)
set_alias(INTR_DIER = 30000108)
set_alias(INTR_DIER_BE = WORD8)
set_alias(INTR_DIIR = 30000118)
set_alias(INTR_DIIR_BE = WORD8)
set_alias(INTR_DGIER = 3000011C)
set_alias(INTR_DGIER_BE = WORDC)
set_alias(INTR_IPISR = 30000120)
set_alias(INTR_IPISR_BE = WORD0)
set_alias(INTR_IPIER = 30000128)
set_alias(INTR_IPIER_BE = WORD8)

--
-- Data Alias
--

-- Common Data
set_alias(ALL_CLEARED         = 00000000)

-- Data for Interrupt Controller
set_alias(INTR_GLOBAL_ENABLE  = 80000000)

--
-- BFL/VHDL communication alias
--

set_alias(NOP        = 0)
set_alias(START      = 1)
set_alias(STOP       = 2)
set_alias(WAIT_IN    = 3)
set_alias(WAIT_OUT   = 4)
set_alias(ASSERT_IN  = 5)
set_alias(ASSERT_OUT = 6)
set_alias(ASSIGN_IN  = 7)
set_alias(ASSIGN_OUT = 8)
set_alias(RESET_WDT  = 9)
set_alias(INTERRUPT  = 31)

--
-- Initialize one of the OPB Devices as slave memory ...
--
-- Note:
--
-- 	The instance name for bfm_memory is duplicated in the path due to the
-- 	wrapper level inserted by SimGen to support mixed language simulation.
--

set_device(path = /bfm_system/bfm_memory/bfm_memory/device, device_type = opb_device)
configure(ack_size=4, s_byte_enable=true, ack_type=normal)

-- initialize the source data memory (first 16 locations) ...
mem_init(addr = 10000000, data = 00010203)
mem_init(addr = 10000004, data = 04050607)
mem_init(addr = 10000008, data = 08090A0B)
mem_init(addr = 1000000C, data = 0C0D0E0F)
mem_init(addr = 10000010, data = 10111213)
mem_init(addr = 10000014, data = 14151617)
mem_init(addr = 10000018, data = 18191A1B)
mem_init(addr = 1000001C, data = 1C1D1E1F)
mem_init(addr = 10000020, data = 20212223)
mem_init(addr = 10000024, data = 24252627)
mem_init(addr = 10000028, data = 28292A2B)
mem_init(addr = 1000002C, data = 2C2D2E2F)
mem_init(addr = 10000030, data = 30313233)
mem_init(addr = 10000034, data = 34353637)
mem_init(addr = 10000038, data = 38393A3B)
mem_init(addr = 1000003C, data = 3C3D3E3F)

-- initialize the destination data memory (first 16 locations) ...
mem_init(addr = 20000000, data = DEADBEEF)
mem_init(addr = 20000004, data = DEADBEEF)
mem_init(addr = 20000008, data = DEADBEEF)
mem_init(addr = 2000000C, data = DEADBEEF)
mem_init(addr = 20000010, data = DEADBEEF)
mem_init(addr = 20000014, data = DEADBEEF)
mem_init(addr = 20000018, data = DEADBEEF)
mem_init(addr = 2000001C, data = DEADBEEF)
mem_init(addr = 20000020, data = DEADBEEF)
mem_init(addr = 20000024, data = DEADBEEF)
mem_init(addr = 20000028, data = DEADBEEF)
mem_init(addr = 2000002C, data = DEADBEEF)
mem_init(addr = 20000030, data = DEADBEEF)
mem_init(addr = 20000034, data = DEADBEEF)
mem_init(addr = 20000038, data = DEADBEEF)
mem_init(addr = 2000003C, data = DEADBEEF)

--
-- Initialize one of the OPB Devices as master processor ...
--
-- Note:
--
-- 	The instance name for bfm_processor is duplicated in the path due to the
-- 	wrapper level inserted by SimGen to support mixed language simulation.
--

set_device(path = /bfm_system/bfm_processor/bfm_processor/device, device_type = opb_device)

--
-- Start Testing ...
--

------------------------------------------------------------
-- Test User Logic S/W Register(s)
--
-- In the following section, we will test the software
-- accessible slave register(s) in User Logic through single
-- beat write and read.
------------------------------------------------------------

wait(level = START)

-- set the mode
write(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 08000000)

-- synchronize by doing a read
read(addr = SLAVE_REG1, be = BYTE4, data = 00)

-- single beat write to slave register(s) ...
write(addr = SLAVE_REG1, be = BYTE4, data = 00)
write(addr = SLAVE_REG1, be = BYTE4, data = 01)
write(addr = SLAVE_REG1, be = BYTE4, data = 02)
write(addr = SLAVE_REG1, be = BYTE4, data = 03)

-- single beat read from slave register(s) ...
read(addr = SLAVE_REG1, be = BYTE4, data = 00)
read(addr = SLAVE_REG1, be = BYTE4, data = 01)
read(addr = SLAVE_REG1, be = BYTE4, data = 02)
read(addr = SLAVE_REG1, be = BYTE4, data = 03)

-- mixed single beat read/write from/to slave register(s) ...
write(addr = SLAVE_REG1, be = BYTE4, data = 00)
write(addr = SLAVE_REG1, be = BYTE4, data = 01)
write(addr = SLAVE_REG1, be = BYTE4, data = 02)
read(addr = SLAVE_REG1, be = BYTE4, data = 00)
write(addr = SLAVE_REG1, be = BYTE4, data = 03)
read(addr = SLAVE_REG1, be = BYTE4, data = 01)
write(addr = SLAVE_REG1, be = BYTE4, data = 04)
read(addr = SLAVE_REG1, be = BYTE4, data = 02)
write(addr = SLAVE_REG1, be = BYTE4, data = 05)
read(addr = SLAVE_REG1, be = BYTE4, data = 03)
write(addr = SLAVE_REG1, be = BYTE4, data = 06)
read(addr = SLAVE_REG1, be = BYTE4, data = 04)
write(addr = SLAVE_REG1, be = BYTE4, data = 07)
read(addr = SLAVE_REG1, be = BYTE4, data = 05)
read(addr = SLAVE_REG1, be = BYTE4, data = 06)
read(addr = SLAVE_REG1, be = BYTE4, data = 07)

-- mixed single beat read/write from/to slave register(s) ...
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b007f01)

write(addr = SLAVE_REG1, be = BYTE4, data = 00)

read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b007f01)
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09017f01)

write(addr = SLAVE_REG1, be = BYTE4, data = 01)
write(addr = SLAVE_REG1, be = BYTE4, data = 02)

read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09037f01)
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09037f01)

read(addr = SLAVE_REG1, be = BYTE4, data = 00)
read(addr = SLAVE_REG1, be = BYTE4, data = 01)

read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09017f01)
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09017f01)

read(addr = SLAVE_REG1, be = BYTE4, data = 02)

read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b007f01)
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b007f01)

-- Fill FIFO
write(addr = SLAVE_REG1, be = BYTE4, data = 00)
write(addr = SLAVE_REG1, be = BYTE4, data = 01)
write(addr = SLAVE_REG1, be = BYTE4, data = 02)
write(addr = SLAVE_REG1, be = BYTE4, data = 03)
write(addr = SLAVE_REG1, be = BYTE4, data = 04)
write(addr = SLAVE_REG1, be = BYTE4, data = 05)
write(addr = SLAVE_REG1, be = BYTE4, data = 06)
write(addr = SLAVE_REG1, be = BYTE4, data = 07)
write(addr = SLAVE_REG1, be = BYTE4, data = 08)
write(addr = SLAVE_REG1, be = BYTE4, data = 09)
write(addr = SLAVE_REG1, be = BYTE4, data = 0A)
write(addr = SLAVE_REG1, be = BYTE4, data = 0B)
write(addr = SLAVE_REG1, be = BYTE4, data = 0C)
write(addr = SLAVE_REG1, be = BYTE4, data = 0D)
write(addr = SLAVE_REG1, be = BYTE4, data = 0E)
write(addr = SLAVE_REG1, be = BYTE4, data = 0F)
write(addr = SLAVE_REG1, be = BYTE4, data = 10)
write(addr = SLAVE_REG1, be = BYTE4, data = 11)
write(addr = SLAVE_REG1, be = BYTE4, data = 12)
write(addr = SLAVE_REG1, be = BYTE4, data = 13)
write(addr = SLAVE_REG1, be = BYTE4, data = 14)
write(addr = SLAVE_REG1, be = BYTE4, data = 15)
write(addr = SLAVE_REG1, be = BYTE4, data = 16)
write(addr = SLAVE_REG1, be = BYTE4, data = 17)
write(addr = SLAVE_REG1, be = BYTE4, data = 18)
write(addr = SLAVE_REG1, be = BYTE4, data = 19)
write(addr = SLAVE_REG1, be = BYTE4, data = 1A)
write(addr = SLAVE_REG1, be = BYTE4, data = 1B)
write(addr = SLAVE_REG1, be = BYTE4, data = 1C)
write(addr = SLAVE_REG1, be = BYTE4, data = 1D)
write(addr = SLAVE_REG1, be = BYTE4, data = 1E)
write(addr = SLAVE_REG1, be = BYTE4, data = 1F)
write(addr = SLAVE_REG1, be = BYTE4, data = 20)
write(addr = SLAVE_REG1, be = BYTE4, data = 21)
write(addr = SLAVE_REG1, be = BYTE4, data = 22)
write(addr = SLAVE_REG1, be = BYTE4, data = 23)
write(addr = SLAVE_REG1, be = BYTE4, data = 24)
write(addr = SLAVE_REG1, be = BYTE4, data = 25)
write(addr = SLAVE_REG1, be = BYTE4, data = 26)
write(addr = SLAVE_REG1, be = BYTE4, data = 27)
write(addr = SLAVE_REG1, be = BYTE4, data = 28)
write(addr = SLAVE_REG1, be = BYTE4, data = 29)
write(addr = SLAVE_REG1, be = BYTE4, data = 2A)
write(addr = SLAVE_REG1, be = BYTE4, data = 2B)
write(addr = SLAVE_REG1, be = BYTE4, data = 2C)
write(addr = SLAVE_REG1, be = BYTE4, data = 2D)
write(addr = SLAVE_REG1, be = BYTE4, data = 2E)
write(addr = SLAVE_REG1, be = BYTE4, data = 2F)
write(addr = SLAVE_REG1, be = BYTE4, data = 30)
write(addr = SLAVE_REG1, be = BYTE4, data = 31)
write(addr = SLAVE_REG1, be = BYTE4, data = 32)
write(addr = SLAVE_REG1, be = BYTE4, data = 33)
write(addr = SLAVE_REG1, be = BYTE4, data = 34)
write(addr = SLAVE_REG1, be = BYTE4, data = 35)
write(addr = SLAVE_REG1, be = BYTE4, data = 36)
write(addr = SLAVE_REG1, be = BYTE4, data = 37)
write(addr = SLAVE_REG1, be = BYTE4, data = 38)
write(addr = SLAVE_REG1, be = BYTE4, data = 39)
write(addr = SLAVE_REG1, be = BYTE4, data = 3A)
write(addr = SLAVE_REG1, be = BYTE4, data = 3B)
write(addr = SLAVE_REG1, be = BYTE4, data = 3C)
write(addr = SLAVE_REG1, be = BYTE4, data = 3D)
write(addr = SLAVE_REG1, be = BYTE4, data = 3E)
write(addr = SLAVE_REG1, be = BYTE4, data = 3F)
write(addr = SLAVE_REG1, be = BYTE4, data = 40)
write(addr = SLAVE_REG1, be = BYTE4, data = 41)
write(addr = SLAVE_REG1, be = BYTE4, data = 42)
write(addr = SLAVE_REG1, be = BYTE4, data = 43)
write(addr = SLAVE_REG1, be = BYTE4, data = 44)
write(addr = SLAVE_REG1, be = BYTE4, data = 45)
write(addr = SLAVE_REG1, be = BYTE4, data = 46)
write(addr = SLAVE_REG1, be = BYTE4, data = 47)
write(addr = SLAVE_REG1, be = BYTE4, data = 48)
write(addr = SLAVE_REG1, be = BYTE4, data = 49)
write(addr = SLAVE_REG1, be = BYTE4, data = 4A)
write(addr = SLAVE_REG1, be = BYTE4, data = 4B)
write(addr = SLAVE_REG1, be = BYTE4, data = 4C)
write(addr = SLAVE_REG1, be = BYTE4, data = 4D)
write(addr = SLAVE_REG1, be = BYTE4, data = 4E)
write(addr = SLAVE_REG1, be = BYTE4, data = 4F)
write(addr = SLAVE_REG1, be = BYTE4, data = 50)
write(addr = SLAVE_REG1, be = BYTE4, data = 51)
write(addr = SLAVE_REG1, be = BYTE4, data = 52)
write(addr = SLAVE_REG1, be = BYTE4, data = 53)
write(addr = SLAVE_REG1, be = BYTE4, data = 54)
write(addr = SLAVE_REG1, be = BYTE4, data = 55)
write(addr = SLAVE_REG1, be = BYTE4, data = 56)
write(addr = SLAVE_REG1, be = BYTE4, data = 57)
write(addr = SLAVE_REG1, be = BYTE4, data = 58)
write(addr = SLAVE_REG1, be = BYTE4, data = 59)
write(addr = SLAVE_REG1, be = BYTE4, data = 5A)
write(addr = SLAVE_REG1, be = BYTE4, data = 5B)
write(addr = SLAVE_REG1, be = BYTE4, data = 5C)
write(addr = SLAVE_REG1, be = BYTE4, data = 5D)
write(addr = SLAVE_REG1, be = BYTE4, data = 5E)
write(addr = SLAVE_REG1, be = BYTE4, data = 5F)
write(addr = SLAVE_REG1, be = BYTE4, data = 60)
write(addr = SLAVE_REG1, be = BYTE4, data = 61)
write(addr = SLAVE_REG1, be = BYTE4, data = 62)
write(addr = SLAVE_REG1, be = BYTE4, data = 63)
write(addr = SLAVE_REG1, be = BYTE4, data = 64)
write(addr = SLAVE_REG1, be = BYTE4, data = 65)
write(addr = SLAVE_REG1, be = BYTE4, data = 66)
write(addr = SLAVE_REG1, be = BYTE4, data = 67)
write(addr = SLAVE_REG1, be = BYTE4, data = 68)
write(addr = SLAVE_REG1, be = BYTE4, data = 69)
write(addr = SLAVE_REG1, be = BYTE4, data = 6A)
write(addr = SLAVE_REG1, be = BYTE4, data = 6B)
write(addr = SLAVE_REG1, be = BYTE4, data = 6C)
write(addr = SLAVE_REG1, be = BYTE4, data = 6D)
write(addr = SLAVE_REG1, be = BYTE4, data = 6E)
write(addr = SLAVE_REG1, be = BYTE4, data = 6F)
write(addr = SLAVE_REG1, be = BYTE4, data = 70)
write(addr = SLAVE_REG1, be = BYTE4, data = 71)
write(addr = SLAVE_REG1, be = BYTE4, data = 72)
write(addr = SLAVE_REG1, be = BYTE4, data = 73)
write(addr = SLAVE_REG1, be = BYTE4, data = 74)
write(addr = SLAVE_REG1, be = BYTE4, data = 75)
write(addr = SLAVE_REG1, be = BYTE4, data = 76)
write(addr = SLAVE_REG1, be = BYTE4, data = 77)
write(addr = SLAVE_REG1, be = BYTE4, data = 78)
write(addr = SLAVE_REG1, be = BYTE4, data = 79)
write(addr = SLAVE_REG1, be = BYTE4, data = 7A)
write(addr = SLAVE_REG1, be = BYTE4, data = 7B)
write(addr = SLAVE_REG1, be = BYTE4, data = 7C)
write(addr = SLAVE_REG1, be = BYTE4, data = 7D)
write(addr = SLAVE_REG1, be = BYTE4, data = 7E)
write(addr = SLAVE_REG1, be = BYTE4, data = 7F)
write(addr = SLAVE_REG1, be = BYTE4, data = 80)
write(addr = SLAVE_REG1, be = BYTE4, data = 81)
write(addr = SLAVE_REG1, be = BYTE4, data = 82)
write(addr = SLAVE_REG1, be = BYTE4, data = 83)
write(addr = SLAVE_REG1, be = BYTE4, data = 84)
write(addr = SLAVE_REG1, be = BYTE4, data = 85)
write(addr = SLAVE_REG1, be = BYTE4, data = 86)
write(addr = SLAVE_REG1, be = BYTE4, data = 87)
write(addr = SLAVE_REG1, be = BYTE4, data = 88)
write(addr = SLAVE_REG1, be = BYTE4, data = 89)
write(addr = SLAVE_REG1, be = BYTE4, data = 8A)
write(addr = SLAVE_REG1, be = BYTE4, data = 8B)
write(addr = SLAVE_REG1, be = BYTE4, data = 8C)
write(addr = SLAVE_REG1, be = BYTE4, data = 8D)
write(addr = SLAVE_REG1, be = BYTE4, data = 8E)
write(addr = SLAVE_REG1, be = BYTE4, data = 8F)
write(addr = SLAVE_REG1, be = BYTE4, data = 90)
write(addr = SLAVE_REG1, be = BYTE4, data = 91)
write(addr = SLAVE_REG1, be = BYTE4, data = 92)
write(addr = SLAVE_REG1, be = BYTE4, data = 93)
write(addr = SLAVE_REG1, be = BYTE4, data = 94)
write(addr = SLAVE_REG1, be = BYTE4, data = 95)
write(addr = SLAVE_REG1, be = BYTE4, data = 96)
write(addr = SLAVE_REG1, be = BYTE4, data = 97)
write(addr = SLAVE_REG1, be = BYTE4, data = 98)
write(addr = SLAVE_REG1, be = BYTE4, data = 99)
write(addr = SLAVE_REG1, be = BYTE4, data = 9A)
write(addr = SLAVE_REG1, be = BYTE4, data = 9B)
write(addr = SLAVE_REG1, be = BYTE4, data = 9C)
write(addr = SLAVE_REG1, be = BYTE4, data = 9D)
write(addr = SLAVE_REG1, be = BYTE4, data = 9E)
write(addr = SLAVE_REG1, be = BYTE4, data = 9F)
write(addr = SLAVE_REG1, be = BYTE4, data = A0)
write(addr = SLAVE_REG1, be = BYTE4, data = A1)
write(addr = SLAVE_REG1, be = BYTE4, data = A2)
write(addr = SLAVE_REG1, be = BYTE4, data = A3)
write(addr = SLAVE_REG1, be = BYTE4, data = A4)
write(addr = SLAVE_REG1, be = BYTE4, data = A5)
write(addr = SLAVE_REG1, be = BYTE4, data = A6)
write(addr = SLAVE_REG1, be = BYTE4, data = A7)
write(addr = SLAVE_REG1, be = BYTE4, data = A8)
write(addr = SLAVE_REG1, be = BYTE4, data = A9)
write(addr = SLAVE_REG1, be = BYTE4, data = AA)
write(addr = SLAVE_REG1, be = BYTE4, data = AB)
write(addr = SLAVE_REG1, be = BYTE4, data = AC)
write(addr = SLAVE_REG1, be = BYTE4, data = AD)
write(addr = SLAVE_REG1, be = BYTE4, data = AE)
write(addr = SLAVE_REG1, be = BYTE4, data = AF)
write(addr = SLAVE_REG1, be = BYTE4, data = B0)
write(addr = SLAVE_REG1, be = BYTE4, data = B1)
write(addr = SLAVE_REG1, be = BYTE4, data = B2)
write(addr = SLAVE_REG1, be = BYTE4, data = B3)
write(addr = SLAVE_REG1, be = BYTE4, data = B4)
write(addr = SLAVE_REG1, be = BYTE4, data = B5)
write(addr = SLAVE_REG1, be = BYTE4, data = B6)
write(addr = SLAVE_REG1, be = BYTE4, data = B7)
write(addr = SLAVE_REG1, be = BYTE4, data = B8)
write(addr = SLAVE_REG1, be = BYTE4, data = B9)
write(addr = SLAVE_REG1, be = BYTE4, data = BA)
write(addr = SLAVE_REG1, be = BYTE4, data = BB)
write(addr = SLAVE_REG1, be = BYTE4, data = BC)
write(addr = SLAVE_REG1, be = BYTE4, data = BD)
write(addr = SLAVE_REG1, be = BYTE4, data = BE)
write(addr = SLAVE_REG1, be = BYTE4, data = BF)
write(addr = SLAVE_REG1, be = BYTE4, data = C0)
write(addr = SLAVE_REG1, be = BYTE4, data = C1)
write(addr = SLAVE_REG1, be = BYTE4, data = C2)
write(addr = SLAVE_REG1, be = BYTE4, data = C3)
write(addr = SLAVE_REG1, be = BYTE4, data = C4)
write(addr = SLAVE_REG1, be = BYTE4, data = C5)
write(addr = SLAVE_REG1, be = BYTE4, data = C6)
write(addr = SLAVE_REG1, be = BYTE4, data = C7)
write(addr = SLAVE_REG1, be = BYTE4, data = C8)
write(addr = SLAVE_REG1, be = BYTE4, data = C9)
write(addr = SLAVE_REG1, be = BYTE4, data = CA)
write(addr = SLAVE_REG1, be = BYTE4, data = CB)
write(addr = SLAVE_REG1, be = BYTE4, data = CC)
write(addr = SLAVE_REG1, be = BYTE4, data = CD)
write(addr = SLAVE_REG1, be = BYTE4, data = CE)
write(addr = SLAVE_REG1, be = BYTE4, data = CF)
write(addr = SLAVE_REG1, be = BYTE4, data = D0)
write(addr = SLAVE_REG1, be = BYTE4, data = D1)
write(addr = SLAVE_REG1, be = BYTE4, data = D2)
write(addr = SLAVE_REG1, be = BYTE4, data = D3)
write(addr = SLAVE_REG1, be = BYTE4, data = D4)
write(addr = SLAVE_REG1, be = BYTE4, data = D5)
write(addr = SLAVE_REG1, be = BYTE4, data = D6)
write(addr = SLAVE_REG1, be = BYTE4, data = D7)
write(addr = SLAVE_REG1, be = BYTE4, data = D8)
write(addr = SLAVE_REG1, be = BYTE4, data = D9)
write(addr = SLAVE_REG1, be = BYTE4, data = DA)
write(addr = SLAVE_REG1, be = BYTE4, data = DB)
write(addr = SLAVE_REG1, be = BYTE4, data = DC)
write(addr = SLAVE_REG1, be = BYTE4, data = DD)
write(addr = SLAVE_REG1, be = BYTE4, data = DE)
write(addr = SLAVE_REG1, be = BYTE4, data = DF)
write(addr = SLAVE_REG1, be = BYTE4, data = E0)
write(addr = SLAVE_REG1, be = BYTE4, data = E1)
write(addr = SLAVE_REG1, be = BYTE4, data = E2)
write(addr = SLAVE_REG1, be = BYTE4, data = E3)
write(addr = SLAVE_REG1, be = BYTE4, data = E4)
write(addr = SLAVE_REG1, be = BYTE4, data = E5)
write(addr = SLAVE_REG1, be = BYTE4, data = E6)
write(addr = SLAVE_REG1, be = BYTE4, data = E7)
write(addr = SLAVE_REG1, be = BYTE4, data = E8)
write(addr = SLAVE_REG1, be = BYTE4, data = E9)
write(addr = SLAVE_REG1, be = BYTE4, data = EA)
write(addr = SLAVE_REG1, be = BYTE4, data = EB)
write(addr = SLAVE_REG1, be = BYTE4, data = EC)
write(addr = SLAVE_REG1, be = BYTE4, data = ED)
write(addr = SLAVE_REG1, be = BYTE4, data = EE)
write(addr = SLAVE_REG1, be = BYTE4, data = EF)
write(addr = SLAVE_REG1, be = BYTE4, data = F0)
write(addr = SLAVE_REG1, be = BYTE4, data = F1)
write(addr = SLAVE_REG1, be = BYTE4, data = F2)
write(addr = SLAVE_REG1, be = BYTE4, data = F3)
write(addr = SLAVE_REG1, be = BYTE4, data = F4)
write(addr = SLAVE_REG1, be = BYTE4, data = F5)
write(addr = SLAVE_REG1, be = BYTE4, data = F6)
write(addr = SLAVE_REG1, be = BYTE4, data = F7)
write(addr = SLAVE_REG1, be = BYTE4, data = F8)
write(addr = SLAVE_REG1, be = BYTE4, data = F9)
write(addr = SLAVE_REG1, be = BYTE4, data = FA)
write(addr = SLAVE_REG1, be = BYTE4, data = FB)
write(addr = SLAVE_REG1, be = BYTE4, data = FC)
write(addr = SLAVE_REG1, be = BYTE4, data = FD)
write(addr = SLAVE_REG1, be = BYTE4, data = FE)
write(addr = SLAVE_REG1, be = BYTE4, data = FF)
write(addr = SLAVE_REG1, be = BYTE4, data = 00)
write(addr = SLAVE_REG1, be = BYTE4, data = 01)

read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09810001)
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09810001)

read(addr = SLAVE_REG1, be = BYTE4, data = 00)

read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09810101)
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 09810101)

read(addr = SLAVE_REG1, be = BYTE4, data = 01)
read(addr = SLAVE_REG1, be = BYTE4, data = 02)
read(addr = SLAVE_REG1, be = BYTE4, data = 03)
read(addr = SLAVE_REG1, be = BYTE4, data = 04)
read(addr = SLAVE_REG1, be = BYTE4, data = 05)
read(addr = SLAVE_REG1, be = BYTE4, data = 06)
read(addr = SLAVE_REG1, be = BYTE4, data = 07)
read(addr = SLAVE_REG1, be = BYTE4, data = 08)
read(addr = SLAVE_REG1, be = BYTE4, data = 09)
read(addr = SLAVE_REG1, be = BYTE4, data = 0A)
read(addr = SLAVE_REG1, be = BYTE4, data = 0B)
read(addr = SLAVE_REG1, be = BYTE4, data = 0C)
read(addr = SLAVE_REG1, be = BYTE4, data = 0D)
read(addr = SLAVE_REG1, be = BYTE4, data = 0E)
read(addr = SLAVE_REG1, be = BYTE4, data = 0F)
read(addr = SLAVE_REG1, be = BYTE4, data = 10)
read(addr = SLAVE_REG1, be = BYTE4, data = 11)
read(addr = SLAVE_REG1, be = BYTE4, data = 12)
read(addr = SLAVE_REG1, be = BYTE4, data = 13)
read(addr = SLAVE_REG1, be = BYTE4, data = 14)
read(addr = SLAVE_REG1, be = BYTE4, data = 15)
read(addr = SLAVE_REG1, be = BYTE4, data = 16)
read(addr = SLAVE_REG1, be = BYTE4, data = 17)
read(addr = SLAVE_REG1, be = BYTE4, data = 18)
read(addr = SLAVE_REG1, be = BYTE4, data = 19)
read(addr = SLAVE_REG1, be = BYTE4, data = 1A)
read(addr = SLAVE_REG1, be = BYTE4, data = 1B)
read(addr = SLAVE_REG1, be = BYTE4, data = 1C)
read(addr = SLAVE_REG1, be = BYTE4, data = 1D)
read(addr = SLAVE_REG1, be = BYTE4, data = 1E)
read(addr = SLAVE_REG1, be = BYTE4, data = 1F)
read(addr = SLAVE_REG1, be = BYTE4, data = 20)
read(addr = SLAVE_REG1, be = BYTE4, data = 21)
read(addr = SLAVE_REG1, be = BYTE4, data = 22)
read(addr = SLAVE_REG1, be = BYTE4, data = 23)
read(addr = SLAVE_REG1, be = BYTE4, data = 24)
read(addr = SLAVE_REG1, be = BYTE4, data = 25)
read(addr = SLAVE_REG1, be = BYTE4, data = 26)
read(addr = SLAVE_REG1, be = BYTE4, data = 27)
read(addr = SLAVE_REG1, be = BYTE4, data = 28)
read(addr = SLAVE_REG1, be = BYTE4, data = 29)
read(addr = SLAVE_REG1, be = BYTE4, data = 2A)
read(addr = SLAVE_REG1, be = BYTE4, data = 2B)
read(addr = SLAVE_REG1, be = BYTE4, data = 2C)
read(addr = SLAVE_REG1, be = BYTE4, data = 2D)
read(addr = SLAVE_REG1, be = BYTE4, data = 2E)
read(addr = SLAVE_REG1, be = BYTE4, data = 2F)
read(addr = SLAVE_REG1, be = BYTE4, data = 30)
read(addr = SLAVE_REG1, be = BYTE4, data = 31)
read(addr = SLAVE_REG1, be = BYTE4, data = 32)
read(addr = SLAVE_REG1, be = BYTE4, data = 33)
read(addr = SLAVE_REG1, be = BYTE4, data = 34)
read(addr = SLAVE_REG1, be = BYTE4, data = 35)
read(addr = SLAVE_REG1, be = BYTE4, data = 36)
read(addr = SLAVE_REG1, be = BYTE4, data = 37)
read(addr = SLAVE_REG1, be = BYTE4, data = 38)
read(addr = SLAVE_REG1, be = BYTE4, data = 39)
read(addr = SLAVE_REG1, be = BYTE4, data = 3A)
read(addr = SLAVE_REG1, be = BYTE4, data = 3B)
read(addr = SLAVE_REG1, be = BYTE4, data = 3C)
read(addr = SLAVE_REG1, be = BYTE4, data = 3D)
read(addr = SLAVE_REG1, be = BYTE4, data = 3E)
read(addr = SLAVE_REG1, be = BYTE4, data = 3F)
read(addr = SLAVE_REG1, be = BYTE4, data = 40)
read(addr = SLAVE_REG1, be = BYTE4, data = 41)
read(addr = SLAVE_REG1, be = BYTE4, data = 42)
read(addr = SLAVE_REG1, be = BYTE4, data = 43)
read(addr = SLAVE_REG1, be = BYTE4, data = 44)
read(addr = SLAVE_REG1, be = BYTE4, data = 45)
read(addr = SLAVE_REG1, be = BYTE4, data = 46)
read(addr = SLAVE_REG1, be = BYTE4, data = 47)
read(addr = SLAVE_REG1, be = BYTE4, data = 48)
read(addr = SLAVE_REG1, be = BYTE4, data = 49)
read(addr = SLAVE_REG1, be = BYTE4, data = 4A)
read(addr = SLAVE_REG1, be = BYTE4, data = 4B)
read(addr = SLAVE_REG1, be = BYTE4, data = 4C)
read(addr = SLAVE_REG1, be = BYTE4, data = 4D)
read(addr = SLAVE_REG1, be = BYTE4, data = 4E)
read(addr = SLAVE_REG1, be = BYTE4, data = 4F)
read(addr = SLAVE_REG1, be = BYTE4, data = 50)
read(addr = SLAVE_REG1, be = BYTE4, data = 51)
read(addr = SLAVE_REG1, be = BYTE4, data = 52)
read(addr = SLAVE_REG1, be = BYTE4, data = 53)
read(addr = SLAVE_REG1, be = BYTE4, data = 54)
read(addr = SLAVE_REG1, be = BYTE4, data = 55)
read(addr = SLAVE_REG1, be = BYTE4, data = 56)
read(addr = SLAVE_REG1, be = BYTE4, data = 57)
read(addr = SLAVE_REG1, be = BYTE4, data = 58)
read(addr = SLAVE_REG1, be = BYTE4, data = 59)
read(addr = SLAVE_REG1, be = BYTE4, data = 5A)
read(addr = SLAVE_REG1, be = BYTE4, data = 5B)
read(addr = SLAVE_REG1, be = BYTE4, data = 5C)
read(addr = SLAVE_REG1, be = BYTE4, data = 5D)
read(addr = SLAVE_REG1, be = BYTE4, data = 5E)
read(addr = SLAVE_REG1, be = BYTE4, data = 5F)
read(addr = SLAVE_REG1, be = BYTE4, data = 60)
read(addr = SLAVE_REG1, be = BYTE4, data = 61)
read(addr = SLAVE_REG1, be = BYTE4, data = 62)
read(addr = SLAVE_REG1, be = BYTE4, data = 63)
read(addr = SLAVE_REG1, be = BYTE4, data = 64)
read(addr = SLAVE_REG1, be = BYTE4, data = 65)
read(addr = SLAVE_REG1, be = BYTE4, data = 66)
read(addr = SLAVE_REG1, be = BYTE4, data = 67)
read(addr = SLAVE_REG1, be = BYTE4, data = 68)
read(addr = SLAVE_REG1, be = BYTE4, data = 69)
read(addr = SLAVE_REG1, be = BYTE4, data = 6A)
read(addr = SLAVE_REG1, be = BYTE4, data = 6B)
read(addr = SLAVE_REG1, be = BYTE4, data = 6C)
read(addr = SLAVE_REG1, be = BYTE4, data = 6D)
read(addr = SLAVE_REG1, be = BYTE4, data = 6E)
read(addr = SLAVE_REG1, be = BYTE4, data = 6F)
read(addr = SLAVE_REG1, be = BYTE4, data = 70)
read(addr = SLAVE_REG1, be = BYTE4, data = 71)
read(addr = SLAVE_REG1, be = BYTE4, data = 72)
read(addr = SLAVE_REG1, be = BYTE4, data = 73)
read(addr = SLAVE_REG1, be = BYTE4, data = 74)
read(addr = SLAVE_REG1, be = BYTE4, data = 75)
read(addr = SLAVE_REG1, be = BYTE4, data = 76)
read(addr = SLAVE_REG1, be = BYTE4, data = 77)
read(addr = SLAVE_REG1, be = BYTE4, data = 78)
read(addr = SLAVE_REG1, be = BYTE4, data = 79)
read(addr = SLAVE_REG1, be = BYTE4, data = 7A)
read(addr = SLAVE_REG1, be = BYTE4, data = 7B)
read(addr = SLAVE_REG1, be = BYTE4, data = 7C)
read(addr = SLAVE_REG1, be = BYTE4, data = 7D)
read(addr = SLAVE_REG1, be = BYTE4, data = 7E)
read(addr = SLAVE_REG1, be = BYTE4, data = 7F)
read(addr = SLAVE_REG1, be = BYTE4, data = 80)
read(addr = SLAVE_REG1, be = BYTE4, data = 81)
read(addr = SLAVE_REG1, be = BYTE4, data = 82)
read(addr = SLAVE_REG1, be = BYTE4, data = 83)
read(addr = SLAVE_REG1, be = BYTE4, data = 84)
read(addr = SLAVE_REG1, be = BYTE4, data = 85)
read(addr = SLAVE_REG1, be = BYTE4, data = 86)
read(addr = SLAVE_REG1, be = BYTE4, data = 87)
read(addr = SLAVE_REG1, be = BYTE4, data = 88)
read(addr = SLAVE_REG1, be = BYTE4, data = 89)
read(addr = SLAVE_REG1, be = BYTE4, data = 8A)
read(addr = SLAVE_REG1, be = BYTE4, data = 8B)
read(addr = SLAVE_REG1, be = BYTE4, data = 8C)
read(addr = SLAVE_REG1, be = BYTE4, data = 8D)
read(addr = SLAVE_REG1, be = BYTE4, data = 8E)
read(addr = SLAVE_REG1, be = BYTE4, data = 8F)
read(addr = SLAVE_REG1, be = BYTE4, data = 90)
read(addr = SLAVE_REG1, be = BYTE4, data = 91)
read(addr = SLAVE_REG1, be = BYTE4, data = 92)
read(addr = SLAVE_REG1, be = BYTE4, data = 93)
read(addr = SLAVE_REG1, be = BYTE4, data = 94)
read(addr = SLAVE_REG1, be = BYTE4, data = 95)
read(addr = SLAVE_REG1, be = BYTE4, data = 96)
read(addr = SLAVE_REG1, be = BYTE4, data = 97)
read(addr = SLAVE_REG1, be = BYTE4, data = 98)
read(addr = SLAVE_REG1, be = BYTE4, data = 99)
read(addr = SLAVE_REG1, be = BYTE4, data = 9A)
read(addr = SLAVE_REG1, be = BYTE4, data = 9B)
read(addr = SLAVE_REG1, be = BYTE4, data = 9C)
read(addr = SLAVE_REG1, be = BYTE4, data = 9D)
read(addr = SLAVE_REG1, be = BYTE4, data = 9E)
read(addr = SLAVE_REG1, be = BYTE4, data = 9F)
read(addr = SLAVE_REG1, be = BYTE4, data = A0)
read(addr = SLAVE_REG1, be = BYTE4, data = A1)
read(addr = SLAVE_REG1, be = BYTE4, data = A2)
read(addr = SLAVE_REG1, be = BYTE4, data = A3)
read(addr = SLAVE_REG1, be = BYTE4, data = A4)
read(addr = SLAVE_REG1, be = BYTE4, data = A5)
read(addr = SLAVE_REG1, be = BYTE4, data = A6)
read(addr = SLAVE_REG1, be = BYTE4, data = A7)
read(addr = SLAVE_REG1, be = BYTE4, data = A8)
read(addr = SLAVE_REG1, be = BYTE4, data = A9)
read(addr = SLAVE_REG1, be = BYTE4, data = AA)
read(addr = SLAVE_REG1, be = BYTE4, data = AB)
read(addr = SLAVE_REG1, be = BYTE4, data = AC)
read(addr = SLAVE_REG1, be = BYTE4, data = AD)
read(addr = SLAVE_REG1, be = BYTE4, data = AE)
read(addr = SLAVE_REG1, be = BYTE4, data = AF)
read(addr = SLAVE_REG1, be = BYTE4, data = B0)
read(addr = SLAVE_REG1, be = BYTE4, data = B1)
read(addr = SLAVE_REG1, be = BYTE4, data = B2)
read(addr = SLAVE_REG1, be = BYTE4, data = B3)
read(addr = SLAVE_REG1, be = BYTE4, data = B4)
read(addr = SLAVE_REG1, be = BYTE4, data = B5)
read(addr = SLAVE_REG1, be = BYTE4, data = B6)
read(addr = SLAVE_REG1, be = BYTE4, data = B7)
read(addr = SLAVE_REG1, be = BYTE4, data = B8)
read(addr = SLAVE_REG1, be = BYTE4, data = B9)
read(addr = SLAVE_REG1, be = BYTE4, data = BA)
read(addr = SLAVE_REG1, be = BYTE4, data = BB)
read(addr = SLAVE_REG1, be = BYTE4, data = BC)
read(addr = SLAVE_REG1, be = BYTE4, data = BD)
read(addr = SLAVE_REG1, be = BYTE4, data = BE)
read(addr = SLAVE_REG1, be = BYTE4, data = BF)
read(addr = SLAVE_REG1, be = BYTE4, data = C0)
read(addr = SLAVE_REG1, be = BYTE4, data = C1)
read(addr = SLAVE_REG1, be = BYTE4, data = C2)
read(addr = SLAVE_REG1, be = BYTE4, data = C3)
read(addr = SLAVE_REG1, be = BYTE4, data = C4)
read(addr = SLAVE_REG1, be = BYTE4, data = C5)
read(addr = SLAVE_REG1, be = BYTE4, data = C6)
read(addr = SLAVE_REG1, be = BYTE4, data = C7)
read(addr = SLAVE_REG1, be = BYTE4, data = C8)
read(addr = SLAVE_REG1, be = BYTE4, data = C9)
read(addr = SLAVE_REG1, be = BYTE4, data = CA)
read(addr = SLAVE_REG1, be = BYTE4, data = CB)
read(addr = SLAVE_REG1, be = BYTE4, data = CC)
read(addr = SLAVE_REG1, be = BYTE4, data = CD)
read(addr = SLAVE_REG1, be = BYTE4, data = CE)
read(addr = SLAVE_REG1, be = BYTE4, data = CF)
read(addr = SLAVE_REG1, be = BYTE4, data = D0)
read(addr = SLAVE_REG1, be = BYTE4, data = D1)
read(addr = SLAVE_REG1, be = BYTE4, data = D2)
read(addr = SLAVE_REG1, be = BYTE4, data = D3)
read(addr = SLAVE_REG1, be = BYTE4, data = D4)
read(addr = SLAVE_REG1, be = BYTE4, data = D5)
read(addr = SLAVE_REG1, be = BYTE4, data = D6)
read(addr = SLAVE_REG1, be = BYTE4, data = D7)
read(addr = SLAVE_REG1, be = BYTE4, data = D8)
read(addr = SLAVE_REG1, be = BYTE4, data = D9)
read(addr = SLAVE_REG1, be = BYTE4, data = DA)
read(addr = SLAVE_REG1, be = BYTE4, data = DB)
read(addr = SLAVE_REG1, be = BYTE4, data = DC)
read(addr = SLAVE_REG1, be = BYTE4, data = DD)
read(addr = SLAVE_REG1, be = BYTE4, data = DE)
read(addr = SLAVE_REG1, be = BYTE4, data = DF)
read(addr = SLAVE_REG1, be = BYTE4, data = E0)
read(addr = SLAVE_REG1, be = BYTE4, data = E1)
read(addr = SLAVE_REG1, be = BYTE4, data = E2)
read(addr = SLAVE_REG1, be = BYTE4, data = E3)
read(addr = SLAVE_REG1, be = BYTE4, data = E4)
read(addr = SLAVE_REG1, be = BYTE4, data = E5)
read(addr = SLAVE_REG1, be = BYTE4, data = E6)
read(addr = SLAVE_REG1, be = BYTE4, data = E7)
read(addr = SLAVE_REG1, be = BYTE4, data = E8)
read(addr = SLAVE_REG1, be = BYTE4, data = E9)
read(addr = SLAVE_REG1, be = BYTE4, data = EA)
read(addr = SLAVE_REG1, be = BYTE4, data = EB)
read(addr = SLAVE_REG1, be = BYTE4, data = EC)
read(addr = SLAVE_REG1, be = BYTE4, data = ED)
read(addr = SLAVE_REG1, be = BYTE4, data = EE)
read(addr = SLAVE_REG1, be = BYTE4, data = EF)
read(addr = SLAVE_REG1, be = BYTE4, data = F0)
read(addr = SLAVE_REG1, be = BYTE4, data = F1)
read(addr = SLAVE_REG1, be = BYTE4, data = F2)
read(addr = SLAVE_REG1, be = BYTE4, data = F3)
read(addr = SLAVE_REG1, be = BYTE4, data = F4)
read(addr = SLAVE_REG1, be = BYTE4, data = F5)
read(addr = SLAVE_REG1, be = BYTE4, data = F6)
read(addr = SLAVE_REG1, be = BYTE4, data = F7)
read(addr = SLAVE_REG1, be = BYTE4, data = F8)
read(addr = SLAVE_REG1, be = BYTE4, data = F9)
read(addr = SLAVE_REG1, be = BYTE4, data = FA)
read(addr = SLAVE_REG1, be = BYTE4, data = FB)
read(addr = SLAVE_REG1, be = BYTE4, data = FC)
read(addr = SLAVE_REG1, be = BYTE4, data = FD)
read(addr = SLAVE_REG1, be = BYTE4, data = FE)
read(addr = SLAVE_REG1, be = BYTE4, data = FF)
read(addr = SLAVE_REG1, be = BYTE4, data = 00)
read(addr = SLAVE_REG1, be = BYTE4, data = 01)

send(level = STOP)

------------------------------------------------------------
-- Test User Logic Interrupt
--
-- In the following section, we will test interrupt(s)
-- generated by User Logic. It may take longer time than
-- your simulation run time before the interrupt(s) happen,
-- if that's the case, please increase your simulation run
-- time to observe the User Logic interrupt(s).
------------------------------------------------------------

wait(level = START)

-- clear prior interrupts
read (addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b007f01)
write(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b000000)
read (addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b007f00)

-- verify User Logic Interrupt(s) all cleared
read(addr = INTR_IPISR, be = INTR_IPISR_BE, data = ALL_CLEARED)

-- enable User Logic Interrupt(s) in the IP Interrupt Enable Register
write(addr = INTR_IPIER, be = INTR_IPIER_BE, data = 00000001)

-- enable IP interrupt in the IPIF Device Interrupt Enable Register
write(addr = INTR_DIER, be = INTR_DIER_BE, data = 00000004)

-- enable the IPIF Device Global Interrupt Enable Register
write(addr = INTR_DGIER, be = INTR_DGIER_BE, data = INTR_GLOBAL_ENABLE)

-- generate interrupt
write(addr = SLAVE_REG1, be = BYTE4, data = 00)

-- now wait for User Logic Interrupt(s) to happen
wait(level = INTERRUPT)

-- verify User Logic Interrupt(s) occur on IP Interrupt Status Register
read(addr = INTR_IPISR, be = INTR_IPISR_BE, data = 00000001)

-- clear interrupt
read(addr = SLAVE_REG1, be = BYTE4, data = 00)
write(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b000000)

-- read control to make sure it was really cleared
read(addr = SLAVE_REG0, be = SLAVE_REG0_BE, data = 0b007f00)

-- clear Interrupt(s) by toggle writing back to IP Interrupt Status Register
write(addr = INTR_IPISR, be = INTR_IPISR_BE, data = 00000001)

-- verify IP Interrupt Status Register is cleared
read(addr = INTR_IPISR, be = INTR_IPISR_BE, data = ALL_CLEARED)

send(level = STOP)

--
-- End of Testing.
--
