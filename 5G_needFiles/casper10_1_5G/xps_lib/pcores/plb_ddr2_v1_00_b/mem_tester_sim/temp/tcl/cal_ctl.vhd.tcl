set output_file [open "mem_tester_sim/ddr2_controller_v1_00_a/hdl/vhdl/cal_ctl.vhd" w ]
set line_num 1; puts $output_file "library ieee;"
set line_num 2; puts $output_file "use ieee.std_logic_1164.all;"
set line_num 3; puts $output_file "use ieee.std_logic_unsigned.all;"
set line_num 4; puts $output_file "--"
set line_num 5; puts $output_file "-- pragma translate_off"
set line_num 6; puts $output_file "library UNISIM;"
set line_num 7; puts $output_file "use UNISIM.VCOMPONENTS.ALL;"
set line_num 8; puts $output_file "-- pragma translate_on"
set line_num 9; puts $output_file ""
set line_num 10; puts $output_file "entity cal_ctl is"
set line_num 11; puts $output_file "port("
set line_num 12; puts $output_file "     clk            : in std_logic;"
set line_num 13; puts $output_file "     dcmlocked      : in std_logic;"
set line_num 14; puts $output_file "     psDone         : in std_logic;"
set line_num 15; puts $output_file "     reset          : in std_logic;"
set line_num 16; puts $output_file "     hxSamp1        : in std_logic;"
set line_num 17; puts $output_file "     phSamp1        : in std_logic;"
set line_num 18; puts $output_file "     okToSelTap     : in std_logic;"
set line_num 19; puts $output_file "     locReset       : out std_logic;"
set line_num 20; puts $output_file "     psEn           : out std_logic := '0';"
set line_num 21; puts $output_file "     psInc          : out std_logic;"
set line_num 22; puts $output_file "     selTap         : out std_logic_vector(4 downto 0);"
set line_num 23; puts $output_file "     tapForDqs      : out std_logic_vector(4 downto 0)"
set line_num 24; puts $output_file "     );"
set line_num 25; puts $output_file "end cal_ctl;"
set line_num 26; puts $output_file ""
set line_num 27; puts $output_file "architecture arc_cal_ctl of cal_ctl is"
set line_num 28; puts $output_file ""
set line_num 29; puts $output_file ""
set line_num 30; puts $output_file "---------"
set line_num 31; puts $output_file "attribute syn_keep : boolean;"
set line_num 32; puts $output_file "constant idleSetup : std_logic_vector(3 downto 0) := \"0000\";"
set line_num 33; puts $output_file "constant idleD0    : std_logic_vector(3 downto 0) := \"0001\";"
set line_num 34; puts $output_file "constant idleD1    : std_logic_vector(3 downto 0) := \"0010\";"
set line_num 35; puts $output_file "constant idleD2    : std_logic_vector(3 downto 0) := \"0011\";"
set line_num 36; puts $output_file "constant idleD3    : std_logic_vector(3 downto 0) := \"0100\";"
set line_num 37; puts $output_file "constant idleD4    : std_logic_vector(3 downto 0) := \"0101\";"
set line_num 38; puts $output_file "constant idleD5    : std_logic_vector(3 downto 0) := \"0110\";"
set line_num 39; puts $output_file ""
set line_num 40; puts $output_file "---------"
set line_num 41; puts $output_file ""
set line_num 42; puts $output_file "constant waitSetup : std_logic_vector(3 downto 0) := \"0111\";"
set line_num 43; puts $output_file "constant waitDcmD0 : std_logic_vector(3 downto 0) := \"1000\";"
set line_num 44; puts $output_file "constant waitDcmD1 : std_logic_vector(3 downto 0) := \"1001\";"
set line_num 45; puts $output_file "constant waitDcmD2 : std_logic_vector(3 downto 0) := \"1010\";"
set line_num 46; puts $output_file "constant waitDcmD3 : std_logic_vector(3 downto 0) := \"1011\";"
set line_num 47; puts $output_file "constant waitDcmD4 : std_logic_vector(3 downto 0) := \"1100\";"
set line_num 48; puts $output_file "constant waitDcmD5 : std_logic_vector(3 downto 0) := \"1101\";"
set line_num 49; puts $output_file ""
set line_num 50; puts $output_file "---------"
set line_num 51; puts $output_file ""
set line_num 52; puts $output_file "constant idleDone  : std_logic_vector(3 downto 0) := \"1110\";"
set line_num 53; puts $output_file ""
set line_num 54; puts $output_file "---------"
set line_num 55; puts $output_file ""
set line_num 56; puts $output_file "constant idleReset : std_logic := '1';"
set line_num 57; puts $output_file "constant waitReset : std_logic := '0';"
set line_num 58;  if $synthesize {
set line_num 59; puts $output_file "constant lBound    : std_logic_vector(7 downto 0) := \"00110010\";"
set line_num 60; puts $output_file "constant uBound    : std_logic_vector(7 downto 0) := \"01010000\";"
set line_num 61;  } else {
set line_num 62; puts $output_file "constant lBound    : std_logic_vector(7 downto 0) := \"00010100\";"
set line_num 63; puts $output_file "constant uBound    : std_logic_vector(7 downto 0) := \"00100000\";"
set line_num 64;  }
set line_num 65; puts $output_file "constant slipCnt   : std_logic_vector(3 downto 0) := \"1100\";"
set line_num 66; puts $output_file ""
set line_num 67; puts $output_file "----------"
set line_num 68; puts $output_file ""
set line_num 69; puts $output_file "constant tap1   : std_logic_vector(4 downto 0) := \"00000\";"
set line_num 70; puts $output_file "constant tap2   : std_logic_vector(4 downto 0) := \"10000\";"
set line_num 71; puts $output_file "constant tap3   : std_logic_vector(4 downto 0) := \"11000\";"
set line_num 72; puts $output_file "constant tap4   : std_logic_vector(4 downto 0) := \"11100\";"
set line_num 73; puts $output_file "constant tap5   : std_logic_vector(4 downto 0) := \"11110\";"
set line_num 74; puts $output_file "constant tap6   : std_logic_vector(4 downto 0) := \"11111\";"
set line_num 75; puts $output_file "---- constant defaultTap : tap3;"
set line_num 76; puts $output_file "constant defaultTap : std_logic_vector(4 downto 0) := \"11000\";"
set line_num 77; puts $output_file ""
set line_num 78; puts $output_file ""
set line_num 79; puts $output_file "signal  state  : std_logic_vector(3 downto 0) := \"0000\";"
set line_num 80; puts $output_file "signal  posPhShft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 81; puts $output_file "signal  negPhShft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 82; puts $output_file "signal 	prevSamp   : std_logic := '0';"
set line_num 83; puts $output_file ""
set line_num 84; puts $output_file "signal d0Shft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 85; puts $output_file "signal d1Shft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 86; puts $output_file "signal d2Shft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 87; puts $output_file "signal d3Shft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 88; puts $output_file "signal d4Shft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 89; puts $output_file "signal d5Shft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 90; puts $output_file "signal suShft  : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 91; puts $output_file "   "
set line_num 92; puts $output_file ""
set line_num 93; puts $output_file "signal waitOneCycle : std_logic := '1';"
set line_num 94; puts $output_file "signal waitTwoCycle  : std_logic := '0';"
set line_num 95; puts $output_file "signal wait3Cycle : std_logic := '0';"
set line_num 96; puts $output_file "signal wait4Cycle : std_logic := '0';"
set line_num 97; puts $output_file "signal psDoneReg  : std_logic := '0';"
set line_num 98; puts $output_file "signal wait5Cycle : std_logic := '0';"
set line_num 99; puts $output_file "signal decPosSh  : std_logic_vector( 7 downto 0) := \"00000000\";"
set line_num 100; puts $output_file "signal decNegSh  : std_logic_vector( 7 downto 0) := \"00000000\";"
set line_num 101; puts $output_file "signal rstate   : std_logic := '1';"
set line_num 102; puts $output_file "signal resetDcm : std_logic := '0';"
set line_num 103; puts $output_file "signal inTapForDqs : std_logic_vector(4 downto 0) := \"11000\";"
set line_num 104; puts $output_file "signal selCnt : std_logic_vector(3 downto 0) := \"0000\";"
set line_num 105; puts $output_file "signal newTap : std_logic_vector(4 downto 0) := \"11000\";"
set line_num 106; puts $output_file "signal okSelCnt : std_logic := '0';"
set line_num 107; puts $output_file "signal midPt  : std_logic_vector(3 downto 0) := \"0011\";"
set line_num 108; puts $output_file "signal uPtr   : std_logic_vector(3 downto 0) := \"0101\";"
set line_num 109; puts $output_file "signal lPtr   : std_logic_vector(3 downto 0) := \"0000\";"
set line_num 110; puts $output_file "signal ozShft : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 111; puts $output_file "signal zoShft : std_logic_vector(7 downto 0) := \"00000000\";"
set line_num 112; puts $output_file "signal psinc_val : std_logic := '0'; "
set line_num 113; puts $output_file ""
set line_num 114; puts $output_file "signal selTap_val    : std_logic_vector(4 downto 0) := \"00000\";"
set line_num 115; puts $output_file "signal tapForDqs_val : std_logic_vector(4 downto 0):= \"11000\";"
set line_num 116; puts $output_file ""
set line_num 117; puts $output_file ""
set line_num 118; puts $output_file "attribute syn_keep of tapForDqs_val : signal is true;"
set line_num 119; puts $output_file "attribute syn_keep of selTap_val    : signal is true;"
set line_num 120; puts $output_file "begin"
set line_num 121; puts $output_file ""
set line_num 122; puts $output_file "locReset <= '0' when (dcmlocked = '1' and ( not reset = '1')) else"
set line_num 123; puts $output_file "            '1';"
set line_num 124; puts $output_file ""
set line_num 125; puts $output_file "psinc <= psinc_val;"
set line_num 126; puts $output_file ""
set line_num 127; puts $output_file "selTap     <= selTap_val;"
set line_num 128; puts $output_file "tapForDqs  <= tapForDqs_val;"
set line_num 129; puts $output_file ""
set line_num 130; puts $output_file "process(clk)"
set line_num 131; puts $output_file "begin"
set line_num 132; puts $output_file " if clk'event and clk = '1' then"
set line_num 133; puts $output_file "  if reset = '1' then"
set line_num 134; puts $output_file "    ozShft <= (others => '0');"
set line_num 135; puts $output_file "    zoShft <= (others => '0');"
set line_num 136; puts $output_file "  else"
set line_num 137; puts $output_file "    zoShft <= suShft - posPhShft;"
set line_num 138; puts $output_file "    ozShft <= negPhShft + suShft;"
set line_num 139; puts $output_file "  end if;"
set line_num 140; puts $output_file " end if;"
set line_num 141; puts $output_file "end process;"
set line_num 142; puts $output_file ""
set line_num 143; puts $output_file ""
set line_num 144; puts $output_file ""
set line_num 145; puts $output_file "-----   statemachine"
set line_num 146; puts $output_file ""
set line_num 147; puts $output_file "process(clk)"
set line_num 148; puts $output_file "begin"
set line_num 149; puts $output_file "   if clk'event and clk = '1' then"
set line_num 150; puts $output_file "      if reset = '1' then"
set line_num 151; puts $output_file "         psEn    <=  '0';"
set line_num 152; puts $output_file "         psinc_val   <=  '0';"
set line_num 153; puts $output_file "         state   <=  idleSetup;"
set line_num 154; puts $output_file "         prevSamp <= '0';"
set line_num 155; puts $output_file "         posPhShft <= \"00000000\";"
set line_num 156; puts $output_file "         negPhShft <= \"00000000\";"
set line_num 157; puts $output_file ""
set line_num 158; puts $output_file "         d0Shft <= \"00000000\";"
set line_num 159; puts $output_file "         d1Shft <= \"00000000\";"
set line_num 160; puts $output_file "         d2Shft <= \"00000000\";"
set line_num 161; puts $output_file "         d3Shft <= \"00000000\";"
set line_num 162; puts $output_file "         d4Shft <= \"00000000\";"
set line_num 163; puts $output_file "         d5Shft <= \"00000000\";"
set line_num 164; puts $output_file "         suShft <= \"00000000\";"
set line_num 165; puts $output_file ""
set line_num 166; puts $output_file "         selTap_val <= tap1;"
set line_num 167; puts $output_file "         waitOneCycle <= '1';"
set line_num 168; puts $output_file "         waitTwoCycle <= '0';"
set line_num 169; puts $output_file "         wait3Cycle <= '0';"
set line_num 170; puts $output_file "         wait4Cycle <= '0';"
set line_num 171; puts $output_file "         wait5Cycle <= '0';"
set line_num 172; puts $output_file "         psDoneReg <= '0';"
set line_num 173; puts $output_file "         decPosSh <= \"00000000\";"
set line_num 174; puts $output_file "         decNegSh <= \"00000000\";"
set line_num 175; puts $output_file "         resetDcm <= '0';"
set line_num 176; puts $output_file "         rstate <= idleReset;"
set line_num 177; puts $output_file "      else"
set line_num 178; puts $output_file "         psDoneReg <= psDone;"
set line_num 179; puts $output_file "         if (dcmlocked = '1') then"
set line_num 180; puts $output_file "            if ( resetDcm = '1') then"
set line_num 181; puts $output_file "               if ( rstate = idleReset) then"
set line_num 182; puts $output_file "                  if (posPhShft /= decPosSh) then"
set line_num 183; puts $output_file "                     psEn <= '1';"
set line_num 184; puts $output_file "                     psinc_val <= '0';"
set line_num 185; puts $output_file "                     decPosSh <= decPosSh + 1;"
set line_num 186; puts $output_file "                     rstate <= waitReset;"
set line_num 187; puts $output_file "                  elsif ( negPhShft /= decNegSh) then"
set line_num 188; puts $output_file "                     psEn <= '1';"
set line_num 189; puts $output_file "                     psinc_val <= '1';"
set line_num 190; puts $output_file "                     decNegSh <= decNegSh + 1;"
set line_num 191; puts $output_file "                     rstate <= waitReset;"
set line_num 192; puts $output_file "                  else "
set line_num 193; puts $output_file "                     resetDcm <= '0';"
set line_num 194; puts $output_file "                     posPhShft <= \"00000000\";"
set line_num 195; puts $output_file "                     negPhShft <= \"00000000\";"
set line_num 196; puts $output_file "                     decNegSh  <= \"00000000\";"
set line_num 197; puts $output_file "                     decPosSh  <= \"00000000\";"
set line_num 198; puts $output_file "                  end if; ---if (posPhShft /= decPosSh)"
set line_num 199; puts $output_file "               elsif ( rstate = waitReset) then"
set line_num 200; puts $output_file "                  psEn <= '0';"
set line_num 201; puts $output_file "                  if (psDoneReg = '1') then"
set line_num 202; puts $output_file "                     rstate <= idleReset;"
set line_num 203; puts $output_file "                  else"
set line_num 204; puts $output_file "                     rstate <= waitReset;"
set line_num 205; puts $output_file "                  end if; ----if (psDoneReg = '1')"
set line_num 206; puts $output_file "                end if; ---- if ( rstate = idleReset)"
set line_num 207; puts $output_file "            else --- if (resetDcm = 0)"
set line_num 208; puts $output_file "               if (waitOneCycle = '1') then"
set line_num 209; puts $output_file "                  waitOneCycle <= '0';"
set line_num 210; puts $output_file "		  waitTwoCycle <= '1';"
set line_num 211; puts $output_file "               elsif (waitTwoCycle = '1') then"
set line_num 212; puts $output_file "                  waitTwoCycle <= '0';"
set line_num 213; puts $output_file "		  wait3Cycle   <= '1';"
set line_num 214; puts $output_file "               elsif (wait3Cycle = '1') then"
set line_num 215; puts $output_file "                  wait3Cycle <= '0';"
set line_num 216; puts $output_file "		  wait4Cycle <= '1';"
set line_num 217; puts $output_file "               elsif (wait4Cycle = '1') then"
set line_num 218; puts $output_file "                  wait4Cycle <= '0';"
set line_num 219; puts $output_file "		  wait5Cycle <= '1';"
set line_num 220; puts $output_file "               elsif (wait5Cycle = '1') then"
set line_num 221; puts $output_file "                  wait5Cycle <= '0';"
set line_num 222; puts $output_file "                  if (state = idleSetup) then"
set line_num 223; puts $output_file "                     prevSamp <= phSamp1;"
set line_num 224; puts $output_file "                  else"
set line_num 225; puts $output_file "                     prevSamp <= hxSamp1;"
set line_num 226; puts $output_file "                   end if;"
set line_num 227; puts $output_file "                else"
set line_num 228; puts $output_file "                   if (state = idleSetup) then"
set line_num 229; puts $output_file "                        if (phSamp1 = '1' and prevSamp = '0') then"
set line_num 230; puts $output_file "                           suShft <= posPhShft;"
set line_num 231; puts $output_file "			   state <= idleD0;"
set line_num 232; puts $output_file "			   rstate <= idleReset;"
set line_num 233; puts $output_file "			   resetDcm <= '1';"
set line_num 234; puts $output_file "			   waitOneCycle <= '1';"
set line_num 235; puts $output_file "                        elsif ( phSamp1 = '0' and prevSamp = '1') then"
set line_num 236; puts $output_file "                           suShft <= negPhShft;"
set line_num 237; puts $output_file "		           state <= idleD0;"
set line_num 238; puts $output_file "			   rstate <= idleReset;"
set line_num 239; puts $output_file "			   resetDcm <= '1';"
set line_num 240; puts $output_file "			   waitOneCycle <= '1';"
set line_num 241; puts $output_file "                        elsif ( phSamp1 = '0' and prevSamp = '0') then"
set line_num 242; puts $output_file "                           psEn <= '1';"
set line_num 243; puts $output_file "			   psinc_val <= '1';"
set line_num 244; puts $output_file "			   state <= waitSetup;"
set line_num 245; puts $output_file "			   prevSamp <= '0';"
set line_num 246; puts $output_file "                        elsif (phSamp1 = '1' and prevSamp = '1') then"
set line_num 247; puts $output_file "                           psEn <= '1';"
set line_num 248; puts $output_file "			   psinc_val <= '0';"
set line_num 249; puts $output_file "			   prevSamp <= '1';"
set line_num 250; puts $output_file "			   state <= waitSetup;"
set line_num 251; puts $output_file "		        end if;"
set line_num 252; puts $output_file "                   elsif (state = waitSetup) then"
set line_num 253; puts $output_file "                      psEn <= '0';"
set line_num 254; puts $output_file "                      if (psDoneReg = '1') then"
set line_num 255; puts $output_file "                         state <= idleSetup;"
set line_num 256; puts $output_file "                       end if;"
set line_num 257; puts $output_file "                   elsif (state = idleD0) then"
set line_num 258; puts $output_file "                       if (hxSamp1 = '1' and prevSamp = '0') then"
set line_num 259; puts $output_file "                          d0Shft <= zoShft;"
set line_num 260; puts $output_file "                          selTap_val <= tap2;"
set line_num 261; puts $output_file "                          waitOneCycle <= '1';"
set line_num 262; puts $output_file "                          state <= idleD1;"
set line_num 263; puts $output_file "                          rstate <= idleReset;"
set line_num 264; puts $output_file "                          resetDcm <= '1';"
set line_num 265; puts $output_file "                       elsif (hxSamp1 = '0' and prevSamp = '1' ) then"
set line_num 266; puts $output_file "			  d0Shft <= ozShft;"
set line_num 267; puts $output_file "			  selTap_val <= tap2;"
set line_num 268; puts $output_file "			  waitOneCycle <= '1';"
set line_num 269; puts $output_file "			  state <= idleD1;"
set line_num 270; puts $output_file "			  rstate <= idleReset;"
set line_num 271; puts $output_file "			  resetDcm <= '1';"
set line_num 272; puts $output_file "		       elsif (hxSamp1 = '0' and prevSamp = '0') then"
set line_num 273; puts $output_file "			--- increment phase shift delay"
set line_num 274; puts $output_file "			  psEn <= '1';"
set line_num 275; puts $output_file "			  psinc_val <= '1';"
set line_num 276; puts $output_file "			  state <= waitDcmD0;"
set line_num 277; puts $output_file "			  prevSamp <= '0';"
set line_num 278; puts $output_file "		       elsif (hxSamp1 = '1' and prevSamp = '1')  then"
set line_num 279; puts $output_file "			---- decrement variable delay"
set line_num 280; puts $output_file "			  psEn <= '1';"
set line_num 281; puts $output_file "			  psinc_val <= '0';"
set line_num 282; puts $output_file "			  state <= waitDcmD0;"
set line_num 283; puts $output_file "			  prevSamp <= '1';"
set line_num 284; puts $output_file "		       end if;"
set line_num 285; puts $output_file " 		  elsif (state = waitDcmD0) then"
set line_num 286; puts $output_file "		     psEn <= '0';"
set line_num 287; puts $output_file "		     if (psDoneReg = '1') then"
set line_num 288; puts $output_file "			state <= idleD0;"
set line_num 289; puts $output_file "		     end if;"
set line_num 290; puts $output_file "                  elsif (state = idleD1) then"
set line_num 291; puts $output_file "		     if (hxSamp1 = '1' and prevSamp = '0') then"
set line_num 292; puts $output_file "			d1Shft <= zoShft;"
set line_num 293; puts $output_file "			selTap_val <= tap3;"
set line_num 294; puts $output_file "			waitOneCycle <= '1';"
set line_num 295; puts $output_file "			state <= idleD2;"
set line_num 296; puts $output_file "			rstate <= idleReset;"
set line_num 297; puts $output_file "			resetDcm <= '1';"
set line_num 298; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '1') then"
set line_num 299; puts $output_file "			d1Shft <= ozShft;"
set line_num 300; puts $output_file "			selTap_val <= tap3;"
set line_num 301; puts $output_file "			waitOneCycle <= '1';"
set line_num 302; puts $output_file "			state <= idleD2;"
set line_num 303; puts $output_file "			rstate <= idleReset;"
set line_num 304; puts $output_file "			resetDcm <= '1';"
set line_num 305; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '0') then"
set line_num 306; puts $output_file "			--- increment phase shift delay"
set line_num 307; puts $output_file "			psEn <= '1';"
set line_num 308; puts $output_file "                        psinc_val <= '1';"
set line_num 309; puts $output_file "			state <= waitDcmD1;"
set line_num 310; puts $output_file "			prevSamp <= '0';"
set line_num 311; puts $output_file "		     elsif (hxSamp1 = '1' and prevSamp = '1') then"
set line_num 312; puts $output_file "			--- decrement variable delay"
set line_num 313; puts $output_file "			psEn <= '1';"
set line_num 314; puts $output_file "			psinc_val <= '0';"
set line_num 315; puts $output_file "			state <= waitDcmD1;"
set line_num 316; puts $output_file "			prevSamp <= '1';"
set line_num 317; puts $output_file "		       end if;"
set line_num 318; puts $output_file " 		  elsif (state = waitDcmD1) then"
set line_num 319; puts $output_file "		     psEn <= '0';"
set line_num 320; puts $output_file "		     if (psDoneReg = '1') then"
set line_num 321; puts $output_file "			state <= idleD1;"
set line_num 322; puts $output_file "		     end if;"
set line_num 323; puts $output_file "                  elsif (state = idleD2) then"
set line_num 324; puts $output_file "		     if (hxSamp1 = '1' and  prevSamp = '0') then"
set line_num 325; puts $output_file "			d2Shft <= zoShft;"
set line_num 326; puts $output_file "			selTap_val <= tap4;"
set line_num 327; puts $output_file "			waitOneCycle <= '1';"
set line_num 328; puts $output_file "			state <= idleD3;"
set line_num 329; puts $output_file "			rstate <= idleReset;"
set line_num 330; puts $output_file "			resetDcm <= '1';"
set line_num 331; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '1') then"
set line_num 332; puts $output_file "			d2Shft <= ozShft;"
set line_num 333; puts $output_file "			selTap_val <= tap4;"
set line_num 334; puts $output_file "			waitOneCycle <= '1';"
set line_num 335; puts $output_file "			state <= idleD3;"
set line_num 336; puts $output_file "			rstate <= idleReset;"
set line_num 337; puts $output_file "			resetDcm <= '1';"
set line_num 338; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '0') then"
set line_num 339; puts $output_file "			--- increment phase shift delay"
set line_num 340; puts $output_file "			psEn <= '1';"
set line_num 341; puts $output_file "			psinc_val <= '1';"
set line_num 342; puts $output_file "			state <= waitDcmD2;"
set line_num 343; puts $output_file "			prevSamp <= '0';"
set line_num 344; puts $output_file "		    elsif (hxSamp1 = '1' and prevSamp = '1') then"
set line_num 345; puts $output_file "			--- decrement variable delay"
set line_num 346; puts $output_file "			psEn <= '1';"
set line_num 347; puts $output_file "			psinc_val <= '0';"
set line_num 348; puts $output_file "			state <= waitDcmD2;"
set line_num 349; puts $output_file "			prevSamp <= '1';"
set line_num 350; puts $output_file "		     end if;"
set line_num 351; puts $output_file " 		  elsif (state = waitDcmD2) then"
set line_num 352; puts $output_file "		     psEn <= '0';"
set line_num 353; puts $output_file "		     if (psDoneReg = '1') then"
set line_num 354; puts $output_file "			state <= idleD2;"
set line_num 355; puts $output_file "		     end if;"
set line_num 356; puts $output_file "                  elsif (state = idleD3) then"
set line_num 357; puts $output_file "		     if (hxSamp1 = '1' and  prevSamp = '0') then"
set line_num 358; puts $output_file "			d3Shft <= zoShft;"
set line_num 359; puts $output_file "			selTap_val <= tap5;"
set line_num 360; puts $output_file "			waitOneCycle <= '1';"
set line_num 361; puts $output_file "			state <= idleD4;"
set line_num 362; puts $output_file "			rstate <= idleReset;"
set line_num 363; puts $output_file "			resetDcm <= '1';"
set line_num 364; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '1' ) then"
set line_num 365; puts $output_file "			d3Shft <= ozShft;"
set line_num 366; puts $output_file "			selTap_val <= tap5;"
set line_num 367; puts $output_file "			waitOneCycle <= '1';"
set line_num 368; puts $output_file "			state <= idleD4;"
set line_num 369; puts $output_file "			rstate <= idleReset;"
set line_num 370; puts $output_file "			resetDcm <= '1';"
set line_num 371; puts $output_file "		     elsif (hxSamp1 = '0'and prevSamp = '0') then"
set line_num 372; puts $output_file "			--- increment phase shift delay"
set line_num 373; puts $output_file "			psEn <= '1';"
set line_num 374; puts $output_file "			psinc_val <= '1';"
set line_num 375; puts $output_file "			state <= waitDcmD3;"
set line_num 376; puts $output_file "			prevSamp <= '0';"
set line_num 377; puts $output_file "                     elsif (hxSamp1 = '1' and prevSamp = '1') then"
set line_num 378; puts $output_file "			--- decrement variable delay"
set line_num 379; puts $output_file "			psEn <= '1';"
set line_num 380; puts $output_file "			psinc_val <= '0';"
set line_num 381; puts $output_file "			state <= waitDcmD3;"
set line_num 382; puts $output_file "			prevSamp <= '1';"
set line_num 383; puts $output_file "		        end if;"
set line_num 384; puts $output_file " 		  elsif (state = waitDcmD3) then"
set line_num 385; puts $output_file "		     psEn <= '0';"
set line_num 386; puts $output_file "		     if (psDoneReg = '1') then"
set line_num 387; puts $output_file "			state <= idleD3;"
set line_num 388; puts $output_file "		     end if;"
set line_num 389; puts $output_file "		  elsif (state = idleD4) then"
set line_num 390; puts $output_file "		     if (hxSamp1 = '1' and prevSamp = '0') then"
set line_num 391; puts $output_file "			d4Shft <= zoShft;"
set line_num 392; puts $output_file "			selTap_val <= tap6;"
set line_num 393; puts $output_file "			waitOneCycle <= '1';"
set line_num 394; puts $output_file "			state <= idleD5;"
set line_num 395; puts $output_file "			rstate <= idleReset;"
set line_num 396; puts $output_file "			resetDcm <= '1';"
set line_num 397; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '1' ) then"
set line_num 398; puts $output_file "			d4Shft <= ozShft;"
set line_num 399; puts $output_file "			selTap_val <= tap6;"
set line_num 400; puts $output_file "			waitOneCycle <= '1';"
set line_num 401; puts $output_file "			state <= idleD5;"
set line_num 402; puts $output_file "			rstate <= idleReset;"
set line_num 403; puts $output_file "			resetDcm <= '1';"
set line_num 404; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '0') then"
set line_num 405; puts $output_file "			--- increment phase shift delay"
set line_num 406; puts $output_file "			psEn <= '1';"
set line_num 407; puts $output_file "			psinc_val <= '1';"
set line_num 408; puts $output_file "			state <= waitDcmD4;"
set line_num 409; puts $output_file "			prevSamp <= '0';"
set line_num 410; puts $output_file "		     elsif (hxSamp1 = '1'and prevSamp = '1') then"
set line_num 411; puts $output_file "			--- decrement variable delay"
set line_num 412; puts $output_file "			psEn <= '1';"
set line_num 413; puts $output_file "			psinc_val <= '0';"
set line_num 414; puts $output_file "			state <= waitDcmD4;"
set line_num 415; puts $output_file "			prevSamp <= '1';"
set line_num 416; puts $output_file "		     end if;"
set line_num 417; puts $output_file "                  elsif (state = waitDcmD4) then"
set line_num 418; puts $output_file "		     psEn <= '0';"
set line_num 419; puts $output_file "		     if (psDoneReg = '1') then"
set line_num 420; puts $output_file "			state <= idleD4;"
set line_num 421; puts $output_file "		     end if;"
set line_num 422; puts $output_file "		  elsif (state = idleD5) then"
set line_num 423; puts $output_file "		     if (hxSamp1 = '1' and prevSamp = '0') then"
set line_num 424; puts $output_file "			d5Shft <= zoShft;"
set line_num 425; puts $output_file "			selTap_val <= tap1;"
set line_num 426; puts $output_file "			waitOneCycle <= '1';"
set line_num 427; puts $output_file "			state <= idleD0;"
set line_num 428; puts $output_file "			rstate <= idleReset;"
set line_num 429; puts $output_file "			resetDcm <= '1';"
set line_num 430; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '1' ) then"
set line_num 431; puts $output_file "			d5Shft <= ozShft;"
set line_num 432; puts $output_file "			selTap_val <= tap1;"
set line_num 433; puts $output_file "			waitOneCycle <= '1';"
set line_num 434; puts $output_file "			state <= idleD0;"
set line_num 435; puts $output_file "			rstate <= idleReset;"
set line_num 436; puts $output_file "			resetDcm <= '1';"
set line_num 437; puts $output_file "		     elsif (hxSamp1 = '0' and prevSamp = '0') then"
set line_num 438; puts $output_file "                        ---  increment phase shift delay"
set line_num 439; puts $output_file "			psEn <= '1';"
set line_num 440; puts $output_file "			psinc_val <= '1';"
set line_num 441; puts $output_file "			state <= waitDcmD5;"
set line_num 442; puts $output_file "			prevSamp <= '0';"
set line_num 443; puts $output_file "		     elsif (hxSamp1 = '1' and prevSamp = '1') then"
set line_num 444; puts $output_file "			---- decrement variable delay"
set line_num 445; puts $output_file "			psEn <= '1';"
set line_num 446; puts $output_file "			psinc_val <= '0';"
set line_num 447; puts $output_file "			state <= waitDcmD5;"
set line_num 448; puts $output_file "			prevSamp <= '1';"
set line_num 449; puts $output_file "		     end if;"
set line_num 450; puts $output_file " 		 elsif (state = waitDcmD5) then"
set line_num 451; puts $output_file "		     psEn <= '0';"
set line_num 452; puts $output_file "		     if (psDoneReg = '1' ) then"
set line_num 453; puts $output_file "			state <= idleD5;"
set line_num 454; puts $output_file "		     end if;"
set line_num 455; puts $output_file "		     --- end else if (state == `idleDone) begin"
set line_num 456; puts $output_file "		  end if;"
set line_num 457; puts $output_file "	       end if; --- else: !if(wait4Cycle)"
set line_num 458; puts $output_file "	       "
set line_num 459; puts $output_file "	    end if; ----  else: !if(resetDcm)"
set line_num 460; puts $output_file ""
set line_num 461; puts $output_file "           if (psDoneReg = '1' and rstate /= waitReset) then"
set line_num 462; puts $output_file "	      if (psinc_val = '1') then"
set line_num 463; puts $output_file "                   posPhShft <= posPhShft + 1;"
set line_num 464; puts $output_file "	      else "
set line_num 465; puts $output_file "                  negPhShft <= negPhShft + 1;"
set line_num 466; puts $output_file "	       end if;"
set line_num 467; puts $output_file "            end if;"
set line_num 468; puts $output_file ""
set line_num 469; puts $output_file "	 end if;---- // if (dcmlocked)"
set line_num 470; puts $output_file "	 "
set line_num 471; puts $output_file "      end if;--- // else: !if(reset)"
set line_num 472; puts $output_file "      end if;"
set line_num 473; puts $output_file "  "
set line_num 474; puts $output_file "end process;      "
set line_num 475; puts $output_file "   "
set line_num 476; puts $output_file ""
set line_num 477; puts $output_file "--- Logic to figure out the number of tap delays to use for dqs"
set line_num 478; puts $output_file " ---  generate the output tapForDqs"
set line_num 479; puts $output_file " "
set line_num 480; puts $output_file " process(clk)"
set line_num 481; puts $output_file " begin            "
set line_num 482; puts $output_file "     if clk'event and clk = '1' then"
set line_num 483; puts $output_file "        if reset = '1' then"
set line_num 484; puts $output_file "             lPtr <= \"0000\";"
set line_num 485; puts $output_file "             uPtr <= \"0101\";"
set line_num 486; puts $output_file "             tapForDqs_val <= defaultTap;"
set line_num 487; puts $output_file "             inTapForDqs <= defaultTap;"
set line_num 488; puts $output_file "             newTap  <= defaultTap;"
set line_num 489; puts $output_file "             midPt <= \"0011\";"
set line_num 490; puts $output_file "             okSelCnt <= '0';"
set line_num 491; puts $output_file "         else"
set line_num 492; puts $output_file "            if (d0Shft > lBound) then"
set line_num 493; puts $output_file "               lPtr <= \"0000\";"
set line_num 494; puts $output_file "            elsif (d1Shft > lBound) then"
set line_num 495; puts $output_file "               lPtr <= \"0001\";"
set line_num 496; puts $output_file "            elsif (d2Shft > lBound) then"
set line_num 497; puts $output_file "               lPtr <= \"0010\";"
set line_num 498; puts $output_file "	    elsif (d3Shft > lBound) then"
set line_num 499; puts $output_file "               lPtr <= \"0011\";"
set line_num 500; puts $output_file "	    elsif (d4Shft > lBound) then"
set line_num 501; puts $output_file "               lPtr <= \"0100\";"
set line_num 502; puts $output_file "	    else "
set line_num 503; puts $output_file "               lPtr <= \"0101\";"
set line_num 504; puts $output_file "            end if;"
set line_num 505; puts $output_file "             "
set line_num 506; puts $output_file "             if (d5Shft < uBound) then"
set line_num 507; puts $output_file "                uPtr <= \"0101\";"
set line_num 508; puts $output_file "	     elsif (d4Shft < uBound) then"
set line_num 509; puts $output_file "                uPtr <= \"0100\";"
set line_num 510; puts $output_file "	     elsif (d3Shft < uBound) then"
set line_num 511; puts $output_file "                uPtr <= \"0011\";"
set line_num 512; puts $output_file "	     elsif (d2Shft < uBound) then"
set line_num 513; puts $output_file "                uPtr <= \"0010\";"
set line_num 514; puts $output_file "	     elsif (d1Shft < uBound) then"
set line_num 515; puts $output_file "                uPtr <= \"0001\";"
set line_num 516; puts $output_file "	     else "
set line_num 517; puts $output_file "                uPtr <= \"0000\";"
set line_num 518; puts $output_file "             end if;"
set line_num 519; puts $output_file ""
set line_num 520; puts $output_file "           midPt(3 downto 0) <= ( uPtr(3 downto 0) + lPtr(3 downto 0) );"
set line_num 521; puts $output_file ""
set line_num 522; puts $output_file "  --------------------"
set line_num 523; puts $output_file "            "
set line_num 524; puts $output_file "           case midPt(3 downto 1) is"
set line_num 525; puts $output_file ""
set line_num 526; puts $output_file "               when \"000\" =>"
set line_num 527; puts $output_file "                     inTapForDqs <= tap1;"
set line_num 528; puts $output_file "	       when \"001\" =>"
set line_num 529; puts $output_file "                     inTapForDqs <= tap2;"
set line_num 530; puts $output_file "	       when \"010\" =>"
set line_num 531; puts $output_file "                     inTapForDqs <= tap3;"
set line_num 532; puts $output_file "	       when \"011\" =>"
set line_num 533; puts $output_file "                     inTapForDqs <= tap4;              "
set line_num 534; puts $output_file "	       when \"100\" =>"
set line_num 535; puts $output_file "                     inTapForDqs <= tap5;"
set line_num 536; puts $output_file "	       when \"101\" =>"
set line_num 537; puts $output_file "                     inTapForDqs <= tap6;"
set line_num 538; puts $output_file "	       when others =>"
set line_num 539; puts $output_file "                     inTapForDqs <= inTapForDqs;"
set line_num 540; puts $output_file "	 end case;  --- case(midPt\[2:0\])"
set line_num 541; puts $output_file "        "
set line_num 542; puts $output_file "         ---  tap output shouldn't change unless the same tap value is selected n number of times."
set line_num 543; puts $output_file ""
set line_num 544; puts $output_file "	 newTap <= inTapForDqs;"
set line_num 545; puts $output_file ""
set line_num 546; puts $output_file "	 if (inTapForDqs = newTap) then"
set line_num 547; puts $output_file "	    "
set line_num 548; puts $output_file "	    if (wait4Cycle = '1') then"
set line_num 549; puts $output_file "              selCnt <= selCnt + 1;"
set line_num 550; puts $output_file "             end if;"
set line_num 551; puts $output_file "	    if (selCnt = slipCnt) then"
set line_num 552; puts $output_file "               okSelCnt <= '1';"
set line_num 553; puts $output_file "	    else okSelCnt <= '0';"
set line_num 554; puts $output_file "             end if;"
set line_num 555; puts $output_file "	  else "
set line_num 556; puts $output_file "	    selCnt <= \"0000\";"
set line_num 557; puts $output_file "	    okSelCnt <= '0';"
set line_num 558; puts $output_file "	 end if;"
set line_num 559; puts $output_file "	    	 "
set line_num 560; puts $output_file "	 if (okToSelTap ='1' and okSelCnt = '1') then"
set line_num 561; puts $output_file "               tapForDqs_val <= newTap;"
set line_num 562; puts $output_file "         end if;"
set line_num 563; puts $output_file "        end if;"
set line_num 564; puts $output_file "       end if;"
set line_num 565; puts $output_file "      end process;"
set line_num 566; puts $output_file "     "
set line_num 567; puts $output_file ""
set line_num 568; puts $output_file ""
set line_num 569; puts $output_file "	"
set line_num 570; puts $output_file "end arc_cal_ctl;"
set line_num 571; puts $output_file ""
close $output_file
