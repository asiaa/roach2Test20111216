------------------------------------------------------------------------------
--
-- ***************************************************************************
-- **                                                                       **
-- ** Copyright (c) 1995-2005 Xilinx, Inc.  All rights reserved.            **
-- **                                                                       **
-- ** You may copy and modify these files for your own internal use solely  **
-- ** with Xilinx programmable logic devices and Xilinx EDK system or       **
-- ** create IP modules solely for Xilinx programmable logic devices and    **
-- ** Xilinx EDK system. No rights are granted to distribute any files      **
-- ** unless they are distributed in Xilinx programmable logic devices.     **
-- **                                                                       **
-- ***************************************************************************
--
------------------------------------------------------------------------------
-- Filename:          /home/droz/XPS_iBOB_base/pcores/plb_sram_v1_00_a/devl/bfmsim/scripts/sample.bfl
-- Description:       Sample BFL command script to test peripheral
-- Date:              Tue May 23 16:27:57 2006 (by Create and Import Peripheral Wizard)
------------------------------------------------------------------------------


--
-- Define Alias
--

-- Byte Enable Alias
set_alias(IGNOR = 00000000)
set_alias(BYTE0 = 10000000)
set_alias(BYTE1 = 01000000)
set_alias(BYTE2 = 00100000)
set_alias(BYTE3 = 00010000)
set_alias(BYTE4 = 00001000)
set_alias(BYTE5 = 00000100)
set_alias(BYTE6 = 00000010)
set_alias(BYTE7 = 00000001)
set_alias(BYTE8 = 10000000)
set_alias(BYTE9 = 01000000)
set_alias(BYTEA = 00100000)
set_alias(BYTEB = 00010000)
set_alias(BYTEC = 00001000)
set_alias(BYTED = 00000100)
set_alias(BYTEE = 00000010)
set_alias(BYTEF = 00000001)
set_alias(HWRD0 = 11000000)
set_alias(HWRD2 = 00110000)
set_alias(HWRD4 = 00001100)
set_alias(HWRD6 = 00000011)
set_alias(HWRD8 = 11000000)
set_alias(HWRDA = 00110000)
set_alias(HWRDC = 00001100)
set_alias(HWRDE = 00000011)
set_alias(WORD0 = 11110000)
set_alias(WORD4 = 00001111)
set_alias(WORD8 = 11110000)
set_alias(WORDC = 00001111)
set_alias(DWORD = 11111111)

-- PLB BE aliases (fixed length burst)
set_alias(IBURST   = 00000000)
set_alias(FBURST2  = 00010000)
set_alias(FBURST3  = 00100000)
set_alias(FBURST4  = 00110000)
set_alias(FBURST5  = 01000000)
set_alias(FBURST6  = 01010000)
set_alias(FBURST7  = 01100000)
set_alias(FBURST8  = 01110000)
set_alias(FBURST9  = 10000000)
set_alias(FBURST10 = 10010000)
set_alias(FBURST11 = 10100000)
set_alias(FBURST12 = 10110000)
set_alias(FBURST13 = 11000000)
set_alias(FBURST14 = 11010000)
set_alias(FBURST15 = 11100000)
set_alias(FBURST16 = 11110000)

-- PLB Size Alias
set_alias(SINGLE_NORMAL  = 0000)
set_alias(CACHELN_4WRD   = 0001)
set_alias(CACHELN_8WRD   = 0010)
set_alias(CACHELN_16WRD  = 0011)
set_alias(BYTE_BURST     = 1000)
set_alias(HLFWORD_BURST  = 1001)
set_alias(WORD_BURST     = 1010)
set_alias(DBLWORD_BURST  = 1011)
set_alias(QUADWORD_BURST = 1100)
set_alias(OCTWORD_BURST  = 1101)

-- UUT Address Space Alias

-- Memory Address Space Alias
set_alias(MEM0_BASEADDR = 10000000)
set_alias(MEM1_BASEADDR = 20000000)
set_alias(BRAM0_BASEADDR = 40000000)

--
-- Data Alias
--

-- Common Data
set_alias(ALL_CLEARED         = 00000000)

--
-- BFL/VHDL communication alias
--

set_alias(NOP        = 0)
set_alias(START      = 1)
set_alias(STOP       = 2)
set_alias(WAIT_IN    = 3)
set_alias(WAIT_OUT   = 4)
set_alias(ASSERT_IN  = 5)
set_alias(ASSERT_OUT = 6)
set_alias(ASSIGN_IN  = 7)
set_alias(ASSIGN_OUT = 8)
set_alias(RESET_WDT  = 9)
set_alias(INTERRUPT  = 31)

--
-- Initialize the PLB Slave as slave memory ...
--
-- Note:
--
-- 	The instance name for bfm_memory is duplicated in the path due to the
-- 	wrapper level inserted by SimGen to support mixed language simulation.
--

set_device(path = /bfm_system/bfm_memory/bfm_memory/slave, device_type = plb_slave)
configure(ssize = 01)

-- initialize the source data memory (first 16 locations) ...
mem_init(addr = 10000000, data = 00010203)
mem_init(addr = 10000004, data = 04050607)
mem_init(addr = 10000008, data = 08090A0B)
mem_init(addr = 1000000C, data = 0C0D0E0F)
mem_init(addr = 10000010, data = 10111213)
mem_init(addr = 10000014, data = 14151617)
mem_init(addr = 10000018, data = 18191A1B)
mem_init(addr = 1000001C, data = 1C1D1E1F)
mem_init(addr = 10000020, data = 20212223)
mem_init(addr = 10000024, data = 24252627)
mem_init(addr = 10000028, data = 28292A2B)
mem_init(addr = 1000002C, data = 2C2D2E2F)
mem_init(addr = 10000030, data = 30313233)
mem_init(addr = 10000034, data = 34353637)
mem_init(addr = 10000038, data = 38393A3B)
mem_init(addr = 1000003C, data = 3C3D3E3F)

-- initialize the destination data memory (first 16 locations) ...
mem_init(addr = 20000000, data = DEADBEEF)
mem_init(addr = 20000004, data = DEADBEEF)
mem_init(addr = 20000008, data = DEADBEEF)
mem_init(addr = 2000000C, data = DEADBEEF)
mem_init(addr = 20000010, data = DEADBEEF)
mem_init(addr = 20000014, data = DEADBEEF)
mem_init(addr = 20000018, data = DEADBEEF)
mem_init(addr = 2000001C, data = DEADBEEF)
mem_init(addr = 20000020, data = DEADBEEF)
mem_init(addr = 20000024, data = DEADBEEF)
mem_init(addr = 20000028, data = DEADBEEF)
mem_init(addr = 2000002C, data = DEADBEEF)
mem_init(addr = 20000030, data = DEADBEEF)
mem_init(addr = 20000034, data = DEADBEEF)
mem_init(addr = 20000038, data = DEADBEEF)
mem_init(addr = 2000003C, data = DEADBEEF)

--
-- Initialize the PLB Master as master processor ...
--
-- Note:
--
-- 	The instance name for bfm_processor is duplicated in the path due to the
-- 	wrapper level inserted by SimGen to support mixed language simulation.
--

set_device(path = /bfm_system/bfm_processor/bfm_processor/master, device_type = plb_master)
configure(msize = 01)

--
-- Start Testing ...
--

------------------------------------------------------------
-- Test User Logic Inferred BRAM
--
-- In the following section, we will test the BRAM infered in
-- User Logic, both single data write/read transactions and
-- burst write/read transactions will be tested if burst allowed.
------------------------------------------------------------

wait(level = START)

-- setup data for first 16 locations (single transaction) ...
mem_update(addr = 40000000, data = 0000000000000000)
mem_update(addr = 40000008, data = 0101010101010101)
mem_update(addr = 40000010, data = 0202020202020202)
mem_update(addr = 40000018, data = 0303030303030303)
mem_update(addr = 40000020, data = 0404040404040404)
mem_update(addr = 40000028, data = 0505050505050505)
mem_update(addr = 40000030, data = 0606060606060606)
mem_update(addr = 40000038, data = 0707070707070707)
mem_update(addr = 40000040, data = 0808080808080808)
mem_update(addr = 40000048, data = 0909090909090909)
mem_update(addr = 40000050, data = 0A0A0A0A0A0A0A0A)
mem_update(addr = 40000058, data = 0B0B0B0B0B0B0B0B)
mem_update(addr = 40000060, data = 0C0C0C0C0C0C0C0C)
mem_update(addr = 40000068, data = 0D0D0D0D0D0D0D0D)
mem_update(addr = 40000070, data = 0E0E0E0E0E0E0E0E)
mem_update(addr = 40000078, data = 0F0F0F0F0F0F0F0F)

-- write to first 16 locations (single transaction) ...
write(addr = 40000000, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000004, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000008, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000000C, size = SINGLE_NORMAL, be = WORDC)
write(addr = 40000010, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000014, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000018, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000001C, size = SINGLE_NORMAL, be = WORDC)
write(addr = 40000020, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000024, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000028, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000002C, size = SINGLE_NORMAL, be = WORDC)
write(addr = 40000030, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000034, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000038, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000003C, size = SINGLE_NORMAL, be = WORDC)
write(addr = 40000040, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000044, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000048, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000004C, size = SINGLE_NORMAL, be = WORDC)
write(addr = 40000050, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000054, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000058, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000005C, size = SINGLE_NORMAL, be = WORDC)
write(addr = 40000060, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000064, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000068, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000006C, size = SINGLE_NORMAL, be = WORDC)
write(addr = 40000070, size = SINGLE_NORMAL, be = WORD0)
write(addr = 40000074, size = SINGLE_NORMAL, be = WORD4)
write(addr = 40000078, size = SINGLE_NORMAL, be = WORD8)
write(addr = 4000007C, size = SINGLE_NORMAL, be = WORDC)

-- read from first 16 locations (single transaction) ...
read(addr = 40000000, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000004, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000008, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000000C, size = SINGLE_NORMAL, be = WORDC)
read(addr = 40000010, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000014, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000018, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000001C, size = SINGLE_NORMAL, be = WORDC)
read(addr = 40000020, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000024, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000028, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000002C, size = SINGLE_NORMAL, be = WORDC)
read(addr = 40000030, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000034, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000038, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000003C, size = SINGLE_NORMAL, be = WORDC)
read(addr = 40000040, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000044, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000048, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000004C, size = SINGLE_NORMAL, be = WORDC)
read(addr = 40000050, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000054, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000058, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000005C, size = SINGLE_NORMAL, be = WORDC)
read(addr = 40000060, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000064, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000068, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000006C, size = SINGLE_NORMAL, be = WORDC)
read(addr = 40000070, size = SINGLE_NORMAL, be = WORD0)
read(addr = 40000074, size = SINGLE_NORMAL, be = WORD4)
read(addr = 40000078, size = SINGLE_NORMAL, be = WORD8)
read(addr = 4000007C, size = SINGLE_NORMAL, be = WORDC)

send(level = STOP)

--
-- End of Testing.
--
