set output_file [open "mem_tester_sim/ddr2_controller_v1_00_a/hdl/vhdl/ddr2_controller.vhd" w ]
set line_num 1; puts $output_file "library ieee; "
set line_num 2; puts $output_file "use ieee.std_logic_1164.all;"
set line_num 3; puts $output_file "use ieee.std_logic_unsigned.all;"
set line_num 4;  if $synthesize {
set line_num 5; puts $output_file "	use work.parameter.all;"
set line_num 6;  } else {
set line_num 7; puts $output_file "	library ddr2_controller;"
set line_num 8; puts $output_file "	use ddr2_controller.parameter.all;"
set line_num 9;  }
set line_num 10; puts $output_file " --library synplify; "
set line_num 11; puts $output_file "--use synplify.attributes.all;"
set line_num 12; puts $output_file "--"
set line_num 13; puts $output_file "-- pragma translate_off"
set line_num 14; puts $output_file "library UNISIM;use UNISIM.VCOMPONENTS.ALL;"
set line_num 15; puts $output_file "-- pragma translate_on"
set line_num 16; puts $output_file "--"
set line_num 17; puts $output_file "----------------------------------------"
set line_num 18; puts $output_file "-- ENTITY DECLARATION"
set line_num 19; puts $output_file "----------------------------------------"
set line_num 20; puts $output_file ""
set line_num 21; puts $output_file "entity  ddr2_controller is"
set line_num 22; puts $output_file "port("
set line_num 23; puts $output_file ""
set line_num 24;  foreach i $DIMM_NUMS {
set line_num 25;  set user_name [lindex $USER_IFS [expr $i-1]]
set line_num 26; puts $output_file "	-- user ${i} interface"
set line_num 27; puts $output_file "	${user_name}_input_data         : in  STD_LOGIC_VECTOR(143 downto 0);"
set line_num 28; puts $output_file "	${user_name}_byte_enable        : in  STD_LOGIC_VECTOR(17 downto 0):=\"111111111111111111\";"
set line_num 29; puts $output_file "	${user_name}_get_data           : out STD_LOGIC;"
set line_num 30; puts $output_file "	${user_name}_output_data        : out STD_LOGIC_VECTOR(143 downto 0);"
set line_num 31; puts $output_file "	${user_name}_data_valid         : out STD_LOGIC;"
set line_num 32; puts $output_file "	${user_name}_address            : in  STD_LOGIC_VECTOR(31 downto 0);"
set line_num 33; puts $output_file "	${user_name}_read               : in  STD_LOGIC;"
set line_num 34; puts $output_file "	${user_name}_write              : in  STD_LOGIC;"
set line_num 35; puts $output_file "	${user_name}_ready              : out STD_LOGIC;"
set line_num 36; puts $output_file ""
set line_num 37;  }
set line_num 38; puts $output_file ""
set line_num 39;  if $synthesize {
set line_num 40;  	foreach i $DIMM_NUMS {
set line_num 41; puts $output_file "	-- DIMM ${i} pads"
set line_num 42; puts $output_file "	dimm${i}_rst_dqs_div_in         : in STD_LOGIC;"
set line_num 43; puts $output_file "	dimm${i}_rst_dqs_div_out        : out STD_LOGIC;"
set line_num 44; puts $output_file "	dimm${i}_casb                   : out STD_LOGIC;"
set line_num 45; puts $output_file "	dimm${i}_cke                    : out STD_LOGIC; "
set line_num 46; puts $output_file "	dimm${i}_clk0                   : out STD_LOGIC; "
set line_num 47; puts $output_file "	dimm${i}_clk0b                  : out STD_LOGIC; 	"
set line_num 48; puts $output_file "	dimm${i}_clk1                   : out STD_LOGIC; "
set line_num 49; puts $output_file "	dimm${i}_clk1b                  : out STD_LOGIC; "
set line_num 50; puts $output_file "	dimm${i}_clk2                   : out STD_LOGIC; "
set line_num 51; puts $output_file "	dimm${i}_clk2b                  : out STD_LOGIC; "
set line_num 52; puts $output_file "	dimm${i}_csb                    : out STD_LOGIC_VECTOR(1 downto 0);"
set line_num 53; puts $output_file "	dimm${i}_rasb                   : out STD_LOGIC;"
set line_num 54; puts $output_file "	dimm${i}_web                    : out STD_LOGIC; "
set line_num 55; puts $output_file "	dimm${i}_ODT                    : out STD_LOGIC_VECTOR(1 downto 0); "
set line_num 56; puts $output_file "	dimm${i}_address                : out STD_LOGIC_VECTOR((row_address_p - 1) downto 0);"
set line_num 57; puts $output_file "	dimm${i}_ba                     : out STD_LOGIC_VECTOR((bank_address_p - 1) downto 0);"
set line_num 58; puts $output_file "	dimm${i}_dm                     : out STD_LOGIC_VECTOR(8 downto 0);"
set line_num 59; puts $output_file "	dimm${i}_dqs                    : inout STD_LOGIC_VECTOR(8 downto 0); "
set line_num 60; puts $output_file "	dimm${i}_dq                     : inout STD_LOGIC_VECTOR(71 downto 0);"
set line_num 61; puts $output_file ""
set line_num 62;  	}
set line_num 63;  }
set line_num 64; puts $output_file ""
set line_num 65; puts $output_file "	-- System interface"
set line_num 66; puts $output_file "	clk_in                          : in STD_LOGIC;"
set line_num 67; puts $output_file "	reset_in                        : in STD_LOGIC"
set line_num 68; puts $output_file ""
set line_num 69; puts $output_file ");"
set line_num 70; puts $output_file ""
set line_num 71; puts $output_file "end   ddr2_controller; "
set line_num 72; puts $output_file ""
set line_num 73; puts $output_file "----------------------------------------"
set line_num 74; puts $output_file "-- ARCHITECTURE DECLARATION"
set line_num 75; puts $output_file "----------------------------------------"
set line_num 76; puts $output_file ""
set line_num 77; puts $output_file "architecture   arc_ddr2_controller of    ddr2_controller    is "
set line_num 78; puts $output_file ""
set line_num 79; puts $output_file "----------------------------------------"
set line_num 80; puts $output_file "-- low level controller declaration"
set line_num 81; puts $output_file "----------------------------------------"
set line_num 82; puts $output_file "component   ddr2_cntrl_72bit_rl"
set line_num 83; puts $output_file "port("
set line_num 84; puts $output_file ""
set line_num 85; puts $output_file "	-- system interface"
set line_num 86; puts $output_file "	sys_delay_sel_val           : in    STD_LOGIC_VECTOR(4 downto 0);"
set line_num 87; puts $output_file "	sys_clk_int                 : in    STD_LOGIC;"
set line_num 88; puts $output_file "	sys_clk90_int               : in    STD_LOGIC;"
set line_num 89; puts $output_file "	sys_rst                     : in    STD_LOGIC;"
set line_num 90; puts $output_file "	sys_rst90                   : in    STD_LOGIC;"
set line_num 91; puts $output_file "	sys_rst180                  : in    STD_LOGIC;"
set line_num 92; puts $output_file "	sys_rst270                  : in    STD_LOGIC;"
set line_num 93; puts $output_file ""
set line_num 94; puts $output_file "	-- user interface"
set line_num 95; puts $output_file "	user_input_data             : in    STD_LOGIC_VECTOR(143 downto 0);"
set line_num 96; puts $output_file "	user_byte_enable            : in    STD_LOGIC_VECTOR(17 downto 0):=\"111111111111111111\";"
set line_num 97; puts $output_file "	user_get_data               : out   STD_LOGIC;"
set line_num 98; puts $output_file "	user_output_data            : out   STD_LOGIC_VECTOR(143 downto 0);"
set line_num 99; puts $output_file "	user_data_valid             : out   STD_LOGIC;"
set line_num 100; puts $output_file ""
set line_num 101; puts $output_file "	user_col_address            : in    STD_LOGIC_VECTOR((column_address_p - 1) downto 0);"
set line_num 102; puts $output_file "	user_row_address            : in    STD_LOGIC_VECTOR((row_address_p - 1) downto 0);"
set line_num 103; puts $output_file "	user_bank_address           : in    STD_LOGIC_VECTOR((bank_address_p - 1) downto 0);"
set line_num 104; puts $output_file "	user_rank_address           : in    STD_LOGIC;"
set line_num 105; puts $output_file ""
set line_num 106; puts $output_file "	user_read                   : in    STD_LOGIC;"
set line_num 107; puts $output_file "	user_write                  : in    STD_LOGIC;"
set line_num 108; puts $output_file "	user_ready                  : out   STD_LOGIC;"
set line_num 109; puts $output_file "	"
set line_num 110; puts $output_file "	-- DIMM pads"
set line_num 111; puts $output_file "	pad_rst_dqs_div_in          : in    STD_LOGIC;"
set line_num 112; puts $output_file "	pad_rst_dqs_div_out         : out   STD_LOGIC; "
set line_num 113; puts $output_file "	pad_casb                    : out   STD_LOGIC;"
set line_num 114; puts $output_file "	pad_cke                     : out   STD_LOGIC;"
set line_num 115; puts $output_file "	pad_clk0                    : out   STD_LOGIC; "
set line_num 116; puts $output_file "	pad_clk0b                   : out   STD_LOGIC; "
set line_num 117; puts $output_file "	pad_clk1                    : out   STD_LOGIC; "
set line_num 118; puts $output_file "	pad_clk1b                   : out   STD_LOGIC; "
set line_num 119; puts $output_file "	pad_clk2                    : out   STD_LOGIC; "
set line_num 120; puts $output_file "	pad_clk2b                   : out   STD_LOGIC; "
set line_num 121; puts $output_file "	pad_csb                     : out   STD_LOGIC_VECTOR(1 downto 0);"
set line_num 122; puts $output_file "	pad_rasb                    : out   STD_LOGIC;"
set line_num 123; puts $output_file "	pad_web                     : out   STD_LOGIC; "
set line_num 124; puts $output_file "	pad_ODT                     : out   STD_LOGIC_VECTOR(1 downto 0); "
set line_num 125; puts $output_file "	pad_address                 : out   STD_LOGIC_VECTOR((row_address_p - 1) downto 0);"
set line_num 126; puts $output_file "	pad_ba                      : out   STD_LOGIC_VECTOR((bank_address_p - 1) downto 0);"
set line_num 127; puts $output_file "	pad_dm                      : out   STD_LOGIC_VECTOR(8 downto 0);"
set line_num 128; puts $output_file "	pad_dqs                     : inout STD_LOGIC_VECTOR(8 downto 0);"
set line_num 129; puts $output_file "	pad_dq                      : inout STD_LOGIC_VECTOR(71 downto 0) "
set line_num 130; puts $output_file ");"
set line_num 131; puts $output_file "end component;   "
set line_num 132; puts $output_file ""
set line_num 133;  if !$synthesize {
set line_num 134; puts $output_file "----------------------------------------"
set line_num 135; puts $output_file "-- DDR2 DIMM declaration"
set line_num 136; puts $output_file "----------------------------------------"
set line_num 137; puts $output_file ""
set line_num 138; puts $output_file "component   ddr2dimm"
set line_num 139; puts $output_file "port("
set line_num 140; puts $output_file "	ClockPos           : in    STD_LOGIC_VECTOR( 2 downto 0);"
set line_num 141; puts $output_file "	ClockNeg           : in    STD_LOGIC_VECTOR( 2 downto 0);"
set line_num 142; puts $output_file "	ODT                : in    STD_LOGIC_VECTOR( 1 downto 0);"
set line_num 143; puts $output_file "	CKE                : in    STD_LOGIC_VECTOR( 1 downto 0);"
set line_num 144; puts $output_file "	CS_N               : in    STD_LOGIC_VECTOR( 1 downto 0);"
set line_num 145; puts $output_file "	RAS_N              : in    STD_LOGIC;"
set line_num 146; puts $output_file "	CAS_N              : in    STD_LOGIC;"
set line_num 147; puts $output_file "	WE_N               : in    STD_LOGIC;"
set line_num 148; puts $output_file "	BA                 : in    STD_LOGIC_VECTOR( 2 downto 0);"
set line_num 149; puts $output_file "	A                  : in    STD_LOGIC_VECTOR(13 downto 0);"
set line_num 150; puts $output_file "	DM                 : in    STD_LOGIC_VECTOR( 8 downto 0);"
set line_num 151; puts $output_file "	DQ                 : inout STD_LOGIC_VECTOR(71 downto 0);"
set line_num 152; puts $output_file "	DQS                : inout STD_LOGIC_VECTOR( 8 downto 0);"
set line_num 153; puts $output_file "	DQS_N              : inout STD_LOGIC_VECTOR( 8 downto 0)"
set line_num 154; puts $output_file ");"
set line_num 155; puts $output_file "end component;   "
set line_num 156;  }
set line_num 157; puts $output_file ""
set line_num 158; puts $output_file "----------------------------------------"
set line_num 159; puts $output_file "-- system infrastructure declaration"
set line_num 160; puts $output_file "----------------------------------------"
set line_num 161; puts $output_file "component infrastructure_top"
set line_num 162; puts $output_file "port ("
set line_num 163; puts $output_file "	-- system interface"
set line_num 164; puts $output_file "	reset_in                    : in  STD_LOGIC;"
set line_num 165; puts $output_file "	sys_clk_ibuf                : in  STD_LOGIC; "
set line_num 166; puts $output_file "	delay_sel_val1_val          : out STD_LOGIC_VECTOR(4 downto 0); "
set line_num 167; puts $output_file "	sys_rst_val                 : out STD_LOGIC;"
set line_num 168; puts $output_file "	sys_rst90_val               : out STD_LOGIC;"
set line_num 169; puts $output_file "	sys_rst180_val              : out STD_LOGIC;"
set line_num 170; puts $output_file "	sys_rst270_val              : out STD_LOGIC;"
set line_num 171; puts $output_file "	clk_int_val                 : out STD_LOGIC;"
set line_num 172; puts $output_file "	clk90_int_val               : out STD_LOGIC"
set line_num 173; puts $output_file ""
set line_num 174; puts $output_file ");"
set line_num 175; puts $output_file "end component;"
set line_num 176; puts $output_file ""
set line_num 177; puts $output_file "----------------------------------------"
set line_num 178; puts $output_file "-- signals declaration"
set line_num 179; puts $output_file "----------------------------------------"
set line_num 180; puts $output_file ""
set line_num 181; puts $output_file "	-- system signals"
set line_num 182; puts $output_file "	signal extended_reset              :  STD_LOGIC := '1';"
set line_num 183; puts $output_file "	signal reset_counter               :  STD_LOGIC_VECTOR(27 downto 0) := X\"0000000\";"
set line_num 184; puts $output_file "	signal sys_rst                     :  STD_LOGIC;"
set line_num 185; puts $output_file "	signal sys_rst90                   :  STD_LOGIC;"
set line_num 186; puts $output_file "	signal sys_rst180                  :  STD_LOGIC;"
set line_num 187; puts $output_file "	signal sys_rst270                  :  STD_LOGIC;"
set line_num 188; puts $output_file "	signal sys_clk_int                 :  STD_LOGIC;"
set line_num 189; puts $output_file "	signal sys_clk90_int               :  STD_LOGIC; "
set line_num 190; puts $output_file "	signal sys_delay_sel               :  STD_LOGIC_VECTOR(4 downto 0);"
set line_num 191; puts $output_file ""
set line_num 192;  if !$synthesize {
set line_num 193;  	foreach i $DIMM_NUMS {
set line_num 194; puts $output_file "	-- DIMM ${i} pads"
set line_num 195; puts $output_file "	signal dimm${i}_rst_dqs_div_in     :  STD_LOGIC;"
set line_num 196; puts $output_file "	signal dimm${i}_rst_dqs_div_out    :  STD_LOGIC;"
set line_num 197; puts $output_file "	signal dimm${i}_casb               :  STD_LOGIC;"
set line_num 198; puts $output_file "	signal dimm${i}_cke                :  STD_LOGIC; "
set line_num 199; puts $output_file "	signal dimm${i}_clk0               :  STD_LOGIC; "
set line_num 200; puts $output_file "	signal dimm${i}_clk0b              :  STD_LOGIC; 	"
set line_num 201; puts $output_file "	signal dimm${i}_clk1               :  STD_LOGIC; "
set line_num 202; puts $output_file "	signal dimm${i}_clk1b              :  STD_LOGIC; "
set line_num 203; puts $output_file "	signal dimm${i}_clk2               :  STD_LOGIC; "
set line_num 204; puts $output_file "	signal dimm${i}_clk2b              :  STD_LOGIC; "
set line_num 205; puts $output_file "	signal dimm${i}_csb                :  STD_LOGIC_VECTOR(1 downto 0);"
set line_num 206; puts $output_file "	signal dimm${i}_rasb               :  STD_LOGIC;"
set line_num 207; puts $output_file "	signal dimm${i}_web                :  STD_LOGIC; "
set line_num 208; puts $output_file "	signal dimm${i}_ODT                :  STD_LOGIC_VECTOR(1 downto 0); "
set line_num 209; puts $output_file "	signal dimm${i}_address            :  STD_LOGIC_VECTOR((row_address_p - 1) downto 0);"
set line_num 210; puts $output_file "	signal dimm${i}_ba                 :  STD_LOGIC_VECTOR((bank_address_p - 1) downto 0);"
set line_num 211; puts $output_file "	signal dimm${i}_dm                 :  STD_LOGIC_VECTOR(8 downto 0);"
set line_num 212; puts $output_file "	signal dimm${i}_dqs                :  STD_LOGIC_VECTOR(8 downto 0); "
set line_num 213; puts $output_file "	signal dimm${i}_dq                 :  STD_LOGIC_VECTOR(71 downto 0);"
set line_num 214; puts $output_file ""
set line_num 215; puts $output_file "	signal dimm${i}_clk                :  STD_LOGIC_VECTOR(2 downto 0);"
set line_num 216; puts $output_file "	signal dimm${i}_clkb               :  STD_LOGIC_VECTOR(2 downto 0);"
set line_num 217; puts $output_file "	signal dimm${i}_dqsb               :  STD_LOGIC_VECTOR(8 downto 0);"
set line_num 218; puts $output_file "	signal dimm${i}_cke_ext            :  STD_LOGIC_VECTOR(1 downto 0);"
set line_num 219; puts $output_file "	signal dimm${i}_ba_ext             :  STD_LOGIC_VECTOR(2 downto 0);"
set line_num 220; puts $output_file ""
set line_num 221;  	}
set line_num 222;  }
set line_num 223; puts $output_file ""
set line_num 224; puts $output_file ""
set line_num 225; puts $output_file "begin "
set line_num 226; puts $output_file ""
set line_num 227; puts $output_file "----------------------------------------"
set line_num 228; puts $output_file "-- Power up reset extender"
set line_num 229; puts $output_file "----------------------------------------"
set line_num 230; puts $output_file ""
set line_num 231; puts $output_file "process(clk_in)"
set line_num 232; puts $output_file "begin"
set line_num 233; puts $output_file "	if clk_in'event and clk_in = '1' then"
set line_num 234; puts $output_file "		-- counts for more than 200us and then release reset"
set line_num 235;  if $synthesize {
set line_num 236; puts $output_file "		if reset_counter /= X\"0030D40\" then"
set line_num 237;  } else {
set line_num 238; puts $output_file "		if reset_counter /= X\"0000000\" then"
set line_num 239;  }
set line_num 240; puts $output_file "			reset_counter <= reset_counter + 1;"
set line_num 241; puts $output_file "			extended_reset <= '1';"
set line_num 242; puts $output_file "		else"
set line_num 243; puts $output_file "			extended_reset <= reset_in;"
set line_num 244; puts $output_file "		end if;"
set line_num 245; puts $output_file "	end if;"
set line_num 246; puts $output_file "end process;"
set line_num 247; puts $output_file ""
set line_num 248; puts $output_file "----------------------------------------"
set line_num 249; puts $output_file "-- Low level controller signals mapping"
set line_num 250; puts $output_file "----------------------------------------"
set line_num 251; puts $output_file ""
set line_num 252;  foreach i $DIMM_NUMS {
set line_num 253;  set user_name [lindex $USER_IFS [expr $i-1]]
set line_num 254; puts $output_file "cntrl_DIMM${i} : ddr2_cntrl_72bit_rl"
set line_num 255; puts $output_file "port map("
set line_num 256; puts $output_file ""
set line_num 257; puts $output_file "	-- system interface"
set line_num 258; puts $output_file "	sys_delay_sel_val    => sys_delay_sel              ,"
set line_num 259;  if $synthesize {
set line_num 260; puts $output_file "	sys_clk_int          => sys_clk_int                ,"
set line_num 261;  } else {
set line_num 262; puts $output_file "	sys_clk_int          => clk_in                     , -- using input clock for simulation to get rid of delta delays"
set line_num 263;  }
set line_num 264; puts $output_file "	sys_clk90_int        => sys_clk90_int              ,"
set line_num 265; puts $output_file "	sys_rst              => sys_rst                    ,"
set line_num 266; puts $output_file "	sys_rst90            => sys_rst90                  ,"
set line_num 267; puts $output_file "	sys_rst180           => sys_rst180                 ,"
set line_num 268; puts $output_file "	sys_rst270           => sys_rst270                 ,"
set line_num 269; puts $output_file ""
set line_num 270; puts $output_file "	-- user interface"
set line_num 271; puts $output_file "	user_input_data      => ${user_name}_input_data            ,"
set line_num 272; puts $output_file "	user_byte_enable     => ${user_name}_byte_enable           , "
set line_num 273; puts $output_file "	user_get_data        => ${user_name}_get_data              , "
set line_num 274; puts $output_file "	user_output_data     => ${user_name}_output_data           , "
set line_num 275; puts $output_file "	user_data_valid      => ${user_name}_data_valid            , "
set line_num 276; puts $output_file "	user_col_address     => ${user_name}_address(12 downto 3)  , "
set line_num 277; puts $output_file "	user_row_address     => ${user_name}_address(26 downto 13) , "
set line_num 278; puts $output_file "	user_bank_address    => ${user_name}_address(28 downto 27) , "
set line_num 279; puts $output_file "	user_rank_address    => ${user_name}_address(29)           , "
set line_num 280; puts $output_file "	user_read            => ${user_name}_read                  , "
set line_num 281; puts $output_file "	user_write           => ${user_name}_write                 , "
set line_num 282; puts $output_file "	user_ready           => ${user_name}_ready                 , "
set line_num 283; puts $output_file ""
set line_num 284; puts $output_file "	-- pads"
set line_num 285; puts $output_file "	pad_rst_dqs_div_in   => dimm${i}_rst_dqs_div_in         ,"
set line_num 286; puts $output_file "	pad_rst_dqs_div_out  => dimm${i}_rst_dqs_div_out        , "
set line_num 287; puts $output_file "	pad_casb             => dimm${i}_casb                   ,"
set line_num 288; puts $output_file "	pad_cke              => dimm${i}_cke                    , "
set line_num 289; puts $output_file "	pad_clk0             => dimm${i}_clk0                   , "
set line_num 290; puts $output_file "	pad_clk0b            => dimm${i}_clk0b                  , 	"
set line_num 291; puts $output_file "	pad_clk1             => dimm${i}_clk1                   , "
set line_num 292; puts $output_file "	pad_clk1b            => dimm${i}_clk1b                  , 	"
set line_num 293; puts $output_file "	pad_clk2             => dimm${i}_clk2                   , "
set line_num 294; puts $output_file "	pad_clk2b            => dimm${i}_clk2b                  ,   "
set line_num 295; puts $output_file "	pad_csb              => dimm${i}_csb                    ,"
set line_num 296; puts $output_file "	pad_rasb             => dimm${i}_rasb                   ,"
set line_num 297; puts $output_file "	pad_web              => dimm${i}_web                    , "
set line_num 298; puts $output_file "	pad_ODT              => dimm${i}_ODT                    ,"
set line_num 299; puts $output_file "	pad_address          => dimm${i}_address                ,"
set line_num 300; puts $output_file "	pad_ba               => dimm${i}_ba                     ,"
set line_num 301; puts $output_file "	pad_dm               => dimm${i}_dm                     ,"
set line_num 302; puts $output_file "	pad_dqs              => dimm${i}_dqs                    , "
set line_num 303; puts $output_file "	pad_dq               => dimm${i}_dq"
set line_num 304; puts $output_file ""
set line_num 305; puts $output_file ");"
set line_num 306; puts $output_file ""
set line_num 307;  }
set line_num 308; puts $output_file ""
set line_num 309; puts $output_file "----------------------------------------"
set line_num 310; puts $output_file "-- infrastructure signals mapping"
set line_num 311; puts $output_file "----------------------------------------"
set line_num 312; puts $output_file "infrastructure_top0 : infrastructure_top"
set line_num 313; puts $output_file "port map"
set line_num 314; puts $output_file "("
set line_num 315; puts $output_file "	reset_in             => extended_reset             ,"
set line_num 316; puts $output_file "	sys_clk_ibuf         => clk_in                     ,"
set line_num 317; puts $output_file "	delay_sel_val1_val   => sys_delay_sel              , "
set line_num 318; puts $output_file "	sys_rst_val          => sys_rst                    ,"
set line_num 319; puts $output_file "	sys_rst90_val        => sys_rst90                  ,"
set line_num 320; puts $output_file "	sys_rst180_val       => sys_rst180                 ,"
set line_num 321; puts $output_file "	sys_rst270_val       => sys_rst270                 ,"
set line_num 322; puts $output_file "	clk_int_val          => sys_clk_int                ,"
set line_num 323; puts $output_file "	clk90_int_val        => sys_clk90_int"
set line_num 324; puts $output_file ");"
set line_num 325; puts $output_file ""
set line_num 326;  if !${synthesize} {
set line_num 327; puts $output_file "----------------------------------------"
set line_num 328; puts $output_file "-- DDR2 DIMM signal mapping"
set line_num 329; puts $output_file "----------------------------------------"
set line_num 330; puts $output_file ""
set line_num 331;  	foreach i $DIMM_NUMS {
set line_num 332; puts $output_file "dimm${i}_rst_dqs_div_in <= dimm${i}_rst_dqs_div_out after 1.6 ns;"
set line_num 333; puts $output_file ""
set line_num 334; puts $output_file "dimm${i}_clk(0)  <= dimm${i}_clk0;"
set line_num 335; puts $output_file "dimm${i}_clk(1)  <= dimm${i}_clk1;"
set line_num 336; puts $output_file "dimm${i}_clk(2)  <= dimm${i}_clk2;"
set line_num 337; puts $output_file "dimm${i}_clkb(0) <= dimm${i}_clk0b;"
set line_num 338; puts $output_file "dimm${i}_clkb(1) <= dimm${i}_clk1b;"
set line_num 339; puts $output_file "dimm${i}_clkb(2) <= dimm${i}_clk2b;"
set line_num 340; puts $output_file "dimm${i}_dqsb    <= (others => '0');"
set line_num 341; puts $output_file "dimm${i}_cke_ext <= dimm${i}_cke & dimm${i}_cke;"
set line_num 342; puts $output_file "dimm${i}_ba_ext  <= '0' & dimm${i}_ba;"
set line_num 343; puts $output_file ""
set line_num 344; puts $output_file "ddr2_dimm${i} : ddr2dimm"
set line_num 345; puts $output_file "port map"
set line_num 346; puts $output_file "("
set line_num 347; puts $output_file "	ClockPos           => dimm${i}_clk     ,"
set line_num 348; puts $output_file "	ClockNeg           => dimm${i}_clkb    ,"
set line_num 349; puts $output_file "	ODT                => dimm${i}_ODT     ,"
set line_num 350; puts $output_file "	CKE                => dimm${i}_cke_ext ,"
set line_num 351; puts $output_file "	CS_N               => dimm${i}_csb     ,"
set line_num 352; puts $output_file "	RAS_N              => dimm${i}_rasb    ,"
set line_num 353; puts $output_file "	CAS_N              => dimm${i}_casb    ,"
set line_num 354; puts $output_file "	WE_N               => dimm${i}_web     ,"
set line_num 355; puts $output_file "	BA                 => dimm${i}_ba_ext  ,"
set line_num 356; puts $output_file "	A                  => dimm${i}_address ,"
set line_num 357; puts $output_file "	DM                 => dimm${i}_dm      ,"
set line_num 358; puts $output_file "	DQ                 => dimm${i}_dq      ,"
set line_num 359; puts $output_file "	DQS                => dimm${i}_dqs     ,"
set line_num 360; puts $output_file "	DQS_N              => dimm${i}_dqsb"
set line_num 361; puts $output_file ");"
set line_num 362;  	}
set line_num 363;  }
set line_num 364; puts $output_file ""
set line_num 365; puts $output_file "end arc_ddr2_controller; "
set line_num 366; puts $output_file ""
close $output_file
