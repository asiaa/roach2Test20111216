set output_file [open "mem_tester_sim/ddr2_controller_v1_00_a/hdl/vhdl/controller.vhd" w ]
set line_num 1; puts $output_file "--  File name :       controller.vhd"
set line_num 2; puts $output_file "--"
set line_num 3; puts $output_file "--  Description :     "
set line_num 4; puts $output_file "--                    Main DDR SDRAM controller block."
set line_num 5; puts $output_file "--"
set line_num 6; puts $output_file "--  Date - revision : 08/10/2005"
set line_num 7; puts $output_file "--"
set line_num 8; puts $output_file "--  Author :          Pierre-Yves Droz"
set line_num 9; puts $output_file "--"
set line_num 10; puts $output_file ""
set line_num 11; puts $output_file ""
set line_num 12; puts $output_file "--                   #                    "
set line_num 13; puts $output_file "--                   #                    "
set line_num 14; puts $output_file "-- ## ##    #####   ####    #####   ##### "
set line_num 15; puts $output_file "--  ##  #  #     #   #     #     # #     #"
set line_num 16; puts $output_file "--  #   #  #     #   #     #######  ###   "
set line_num 17; puts $output_file "--  #   #  #     #   #     #           ## "
set line_num 18; puts $output_file "--  #   #  #     #   #  #  #     # #     #"
set line_num 19; puts $output_file "-- ### ###  #####     ##    #####   ##### "
set line_num 20; puts $output_file ""
set line_num 21; puts $output_file ""
set line_num 22; puts $output_file "library ieee;"
set line_num 23; puts $output_file "use ieee.std_logic_1164.all;"
set line_num 24; puts $output_file "use ieee.std_logic_unsigned.all;"
set line_num 25; puts $output_file "use work.parameter.all;"
set line_num 26; puts $output_file "--"
set line_num 27; puts $output_file "-- pragma translate_off"
set line_num 28; puts $output_file "library UNISIM;"
set line_num 29; puts $output_file "use UNISIM.VCOMPONENTS.ALL;"
set line_num 30; puts $output_file "-- pragma translate_on"
set line_num 31; puts $output_file "--"
set line_num 32; puts $output_file "entity controller is"
set line_num 33; puts $output_file "port("
set line_num 34; puts $output_file "	-- system signals"
set line_num 35; puts $output_file "	clk                    : in std_logic;"
set line_num 36; puts $output_file "	reset                  : in std_logic;"
set line_num 37; puts $output_file ""
set line_num 38; puts $output_file "	-- user interface"
set line_num 39; puts $output_file "	user_get_data          : out STD_LOGIC;"
set line_num 40; puts $output_file "	user_col_address       : in  STD_LOGIC_VECTOR((column_address_p - 1) downto 0);"
set line_num 41; puts $output_file "	user_row_address       : in  STD_LOGIC_VECTOR((row_address_p - 1) downto 0);"
set line_num 42; puts $output_file "	user_bank_address      : in  STD_LOGIC_VECTOR((bank_address_p - 1) downto 0);"
set line_num 43; puts $output_file "	user_rank_address      : in  STD_LOGIC;"
set line_num 44; puts $output_file "	user_read              : in  STD_LOGIC;"
set line_num 45; puts $output_file "	user_write             : in  STD_LOGIC;"
set line_num 46; puts $output_file "	user_ready             : out  STD_LOGIC := '0';"
set line_num 47; puts $output_file ""
set line_num 48; puts $output_file "	-- pads"
set line_num 49; puts $output_file "	ddr_rasb               : out std_logic;"
set line_num 50; puts $output_file "	ddr_casb               : out std_logic;"
set line_num 51; puts $output_file "	ddr_web                : out std_logic;"
set line_num 52; puts $output_file "	ddr_ODT                : out std_logic_vector(1 downto 0);"
set line_num 53; puts $output_file "	ddr_ba                 : out std_logic_vector((bank_address_p-1) downto 0);"
set line_num 54; puts $output_file "	ddr_address            : out std_logic_vector((row_address_p-1) downto 0);"
set line_num 55; puts $output_file "	ddr_cke                : out std_logic;"
set line_num 56; puts $output_file "	ddr_csb                : out std_logic_vector(1 downto 0);"
set line_num 57; puts $output_file "	ddr_rst_dqs_div_out    : out std_logic;"
set line_num 58; puts $output_file "	ddr_force_nop          : out std_logic_vector(1 downto 0);"
set line_num 59; puts $output_file "	"
set line_num 60; puts $output_file "	-- data path control"
set line_num 61; puts $output_file "	dqs_enable             : out std_logic;"
set line_num 62; puts $output_file "	dqs_reset              : out std_logic;"
set line_num 63; puts $output_file "	write_enable           : out std_logic;"
set line_num 64; puts $output_file "	input_data_valid       : out std_logic;"
set line_num 65; puts $output_file ""
set line_num 66; puts $output_file "	-- infrastructure control"
set line_num 67; puts $output_file "	rst_calib              : out std_logic"
set line_num 68; puts $output_file ");"
set line_num 69; puts $output_file "end controller;"
set line_num 70; puts $output_file ""
set line_num 71; puts $output_file "architecture arc_controller of controller is"
set line_num 72; puts $output_file ""
set line_num 73; puts $output_file "attribute syn_noprune : boolean;"
set line_num 74; puts $output_file ""
set line_num 75; puts $output_file "type fsm_state is ("
set line_num 76; puts $output_file "			INIT_WAIT_POWER_UP,"
set line_num 77; puts $output_file "			INIT_WAIT_01_COMMAND,"
set line_num 78; puts $output_file "			INIT_WAIT_02_COMMAND,"
set line_num 79; puts $output_file "			INIT_WAIT_03_COMMAND,			"
set line_num 80; puts $output_file "			INIT_WAIT_04_COMMAND,			"
set line_num 81; puts $output_file "			INIT_WAIT_05_COMMAND,			"
set line_num 82; puts $output_file "			INIT_WAIT_06_COMMAND,			"
set line_num 83; puts $output_file "			INIT_WAIT_07_COMMAND,			"
set line_num 84; puts $output_file "			INIT_WAIT_08_COMMAND,			"
set line_num 85; puts $output_file "			INIT_WAIT_09_COMMAND,			"
set line_num 86; puts $output_file "			INIT_WAIT_10_COMMAND,			"
set line_num 87; puts $output_file "			INIT_WAIT_11_COMMAND,			"
set line_num 88; puts $output_file "			INIT_WAIT_12_COMMAND,			"
set line_num 89; puts $output_file "			INIT_WAIT_COMPLETION,"
set line_num 90; puts $output_file "			INIT_COMPLETE"
set line_num 91; puts $output_file "		);"
set line_num 92; puts $output_file "signal init_state: fsm_state;"
set line_num 93; puts $output_file ""
set line_num 94; puts $output_file "	-- timming constants"
set line_num 95; puts $output_file "	-- init"
set line_num 96; puts $output_file "	constant POWERUP_CNT       : std_logic_vector(15 downto 0) := X\"000F\";"
set line_num 97; puts $output_file "	constant CLKLOCK_CNT       : std_logic_vector(7 downto 0)  := X\"50\";"
set line_num 98; puts $output_file "	constant TRPA_CNT          : std_logic_vector(3 downto 0)  := X\"4\";"
set line_num 99; puts $output_file "	constant TMRD_CNT          : std_logic_vector(3 downto 0)  := X\"2\";"
set line_num 100; puts $output_file "	constant TRFC_CNT          : std_logic_vector(7 downto 0)  := X\"15\";"
set line_num 101; puts $output_file "	constant PLLLOCK_CNT       : std_logic_vector(7 downto 0)  := X\"C8\";"
set line_num 102; puts $output_file "	-- command to command"
set line_num 103; puts $output_file "	constant REF_2_REF_CNT     : std_logic_vector(7 downto 0)  := X\"15\";"
set line_num 104; puts $output_file "	constant REF_2_ACT_CNT     : std_logic_vector(7 downto 0)  := X\"15\";"
set line_num 105; puts $output_file "	constant REF_2_PRE_CNT     : std_logic_vector(7 downto 0)  := X\"15\";"
set line_num 106; puts $output_file "	constant REF_2_RD_CNT      : std_logic_vector(7 downto 0)  := X\"00\";  -- FORBIDDEN"
set line_num 107; puts $output_file "	constant REF_2_WR_CNT      : std_logic_vector(7 downto 0)  := X\"00\";  -- FORBIDDEN"
set line_num 108; puts $output_file "	constant ACT_2_REF_CNT     : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 109; puts $output_file "	constant ACT_2_ACT_CNT     : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 110; puts $output_file "	constant ACT_2_PRE_CNT     : std_logic_vector(3 downto 0)  := X\"8\";"
set line_num 111; puts $output_file "	constant ACT_2_RD_CNT      : std_logic_vector(3 downto 0)  := X\"3\";"
set line_num 112; puts $output_file "	constant ACT_2_WR_CNT      : std_logic_vector(3 downto 0)  := X\"3\";"
set line_num 113; puts $output_file "	constant PRE_2_REF_CNT     : std_logic_vector(3 downto 0)  := X\"3\";"
set line_num 114; puts $output_file "	constant PRE_2_ACT_CNT     : std_logic_vector(3 downto 0)  := X\"3\";"
set line_num 115; puts $output_file "	constant PRE_2_PRE_CNT     : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 116; puts $output_file "	constant PRE_2_RD_CNT      : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 117; puts $output_file "	constant PRE_2_WR_CNT      : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 118; puts $output_file "	constant RD_2_REF_CNT      : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 119; puts $output_file "	constant RD_2_ACT_CNT      : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 120; puts $output_file "	constant RD_2_PRE_CNT      : std_logic_vector(3 downto 0)  := X\"2\";"
set line_num 121; puts $output_file "	constant RD_2_RD_CNT       : std_logic_vector(3 downto 0)  := X\"2\";"
set line_num 122; puts $output_file "	constant RD_2_WR_CNT       : std_logic_vector(3 downto 0)  := X\"5\"; -- X\"4\"; DEBUG"
set line_num 123; puts $output_file "	constant WR_2_REF_CNT      : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 124; puts $output_file "	constant WR_2_ACT_CNT      : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 125; puts $output_file "	constant WR_2_PRE_CNT      : std_logic_vector(3 downto 0)  := X\"7\";"
set line_num 126; puts $output_file "	constant WR_2_RD_CNT       : std_logic_vector(3 downto 0)  := X\"7\"; -- X\"6\"; DEBUG"
set line_num 127; puts $output_file "	constant WR_2_WR_CNT       : std_logic_vector(3 downto 0)  := X\"2\";"
set line_num 128; puts $output_file "	-- command to ready"
set line_num 129; puts $output_file "	constant REF_2_READY_CNT   : std_logic_vector(7 downto 0)  := X\"15\";"
set line_num 130; puts $output_file "	constant ACT_2_READY_CNT   : std_logic_vector(3 downto 0)  := X\"0\";  -- FORBIDDEN"
set line_num 131; puts $output_file "	constant PRE_2_READY_CNT   : std_logic_vector(3 downto 0)  := X\"3\";"
set line_num 132; puts $output_file "	constant RD_2_READY_CNT    : std_logic_vector(3 downto 0)  := X\"2\";"
set line_num 133; puts $output_file "	constant WR_2_READY_CNT    : std_logic_vector(3 downto 0)  := X\"2\";"
set line_num 134; puts $output_file "	-- maximum time"
set line_num 135; puts $output_file "	constant REFRESHMAX_CNT    : std_logic_vector(15 downto 0) := X\"0601\";"
set line_num 136; puts $output_file "	constant ROWACTIVEMAX_CNT  : std_logic_vector(15 downto 0) := X\"FFFF\";"
set line_num 137; puts $output_file ""
set line_num 138; puts $output_file "	-- command constant"
set line_num 139; puts $output_file "	constant CMD_NOP           : std_logic_vector(2 downto 0) := \"111\";"
set line_num 140; puts $output_file "	constant CMD_READ          : std_logic_vector(2 downto 0) := \"101\";"
set line_num 141; puts $output_file "	constant CMD_WRITE         : std_logic_vector(2 downto 0) := \"100\";"
set line_num 142; puts $output_file "	constant CMD_ACTIVE        : std_logic_vector(2 downto 0) := \"011\";"
set line_num 143; puts $output_file "	constant CMD_PRECHARGE     : std_logic_vector(2 downto 0) := \"010\";"
set line_num 144; puts $output_file "	constant CMD_REFRESH       : std_logic_vector(2 downto 0) := \"001\";"
set line_num 145; puts $output_file "	constant CMD_MODESET       : std_logic_vector(2 downto 0) := \"000\";"
set line_num 146; puts $output_file ""
set line_num 147; puts $output_file "	-- CSB constants"
set line_num 148; puts $output_file "	constant CSB_BOTH          : std_logic_vector(1 downto 0) := \"00\";"
set line_num 149; puts $output_file "	constant CSB_ZERO          : std_logic_vector(1 downto 0) := \"10\";"
set line_num 150; puts $output_file "	constant CSB_ONE           : std_logic_vector(1 downto 0) := \"01\";"
set line_num 151; puts $output_file "	constant CSB_NONE          : std_logic_vector(1 downto 0) := \"11\";"
set line_num 152; puts $output_file ""
set line_num 153; puts $output_file "	-- ODT constants"
set line_num 154; puts $output_file "	constant ODT_BOTH          : std_logic_vector(1 downto 0) := \"11\";"
set line_num 155; puts $output_file "	constant ODT_ZERO          : std_logic_vector(1 downto 0) := \"01\";"
set line_num 156; puts $output_file "	constant ODT_ONE           : std_logic_vector(1 downto 0) := \"10\";"
set line_num 157; puts $output_file "	constant ODT_NONE          : std_logic_vector(1 downto 0) := \"00\";"
set line_num 158; puts $output_file ""
set line_num 159; puts $output_file "	-- CKE constants"
set line_num 160; puts $output_file "	constant CKE_DISABLED      : std_logic := '0';"
set line_num 161; puts $output_file "	constant CKE_ENABLED       : std_logic := '1';"
set line_num 162; puts $output_file ""
set line_num 163; puts $output_file "	-- address constants"
set line_num 164; puts $output_file "	constant ADD_PADZEROS      : std_logic_vector((row_address_p-12) downto 0) := (others => '0');"
set line_num 165; puts $output_file "	constant ADD_ALLBANKS      : std_logic_vector((row_address_p-1) downto 0) := ADD_PADZEROS & \"10000000000\";"
set line_num 166; puts $output_file "	constant ADD_SINGLEBANK    : std_logic_vector((row_address_p-1) downto 0) := ADD_PADZEROS & \"00000000000\";"
set line_num 167; puts $output_file "	constant ADD_AUTOPRE       : std_logic_vector((row_address_p-1) downto 0) := ADD_PADZEROS & \"10000000000\";"
set line_num 168; puts $output_file "	constant ADD_NOAUTOPRE     : std_logic_vector((row_address_p-1) downto 0) := ADD_PADZEROS & \"00000000000\";"
set line_num 169; puts $output_file ""
set line_num 170; puts $output_file "	-- bank address constants"
set line_num 171; puts $output_file "	constant BA_MR             : std_logic_vector((bank_address_p-1) downto 0) := \"00\";"
set line_num 172; puts $output_file "	constant BA_EMR1           : std_logic_vector((bank_address_p-1) downto 0) := \"01\";"
set line_num 173; puts $output_file "	constant BA_EMR2           : std_logic_vector((bank_address_p-1) downto 0) := \"10\";"
set line_num 174; puts $output_file "	constant BA_EMR3           : std_logic_vector((bank_address_p-1) downto 0) := \"11\";"
set line_num 175; puts $output_file ""
set line_num 176; puts $output_file "	-- internal mode registers values"
set line_num 177; puts $output_file "	constant REG_PADZEROS      : std_logic_vector((row_address_p-14) downto 0) := (others => '0');"
set line_num 178; puts $output_file "	constant REG_MR            : std_logic_vector((row_address_p-1) downto 0) := REG_PADZEROS & \"0010000110010\";"
set line_num 179; puts $output_file "	-- Fast-exit down mode-----------------------------------------------------------------------0"
set line_num 180; puts $output_file "	-- Write Recovery = 3 ------------------------------------------------------------------------010"
set line_num 181; puts $output_file "	-- PLL reset disabled ---------------------------------------------------------------------------0"
set line_num 182; puts $output_file "	-- Test mode disabled ----------------------------------------------------------------------------0"
set line_num 183; puts $output_file "	-- CAS latency = 3    -----------------------------------------------------------------------------011                                                                   "
set line_num 184; puts $output_file "    -- sequential burst   --------------------------------------------------------------------------------0"
set line_num 185; puts $output_file "	-- burstlength = 4    ---------------------------------------------------------------------------------010"
set line_num 186; puts $output_file "	constant REG_MR_DLL_RESET  : std_logic_vector((row_address_p-1) downto 0) := REG_PADZEROS & \"0010100110010\";"
set line_num 187; puts $output_file "	-- Fast-exit down mode-----------------------------------------------------------------------0"
set line_num 188; puts $output_file "	-- Write Recovery = 3 ------------------------------------------------------------------------010"
set line_num 189; puts $output_file "	-- PLL reset enabled  ---------------------------------------------------------------------------1"
set line_num 190; puts $output_file "	-- Test mode disabled ----------------------------------------------------------------------------0"
set line_num 191; puts $output_file "	-- CAS latency = 3    -----------------------------------------------------------------------------011                                                                   "
set line_num 192; puts $output_file "    -- sequential burst   --------------------------------------------------------------------------------0"
set line_num 193; puts $output_file "	-- burstlength = 4    ---------------------------------------------------------------------------------010"
set line_num 194; puts $output_file "	constant REG_EMR1_OCD_DEF  : std_logic_vector((row_address_p-1) downto 0) := REG_PADZEROS & \"0011110000100\";"
set line_num 195; puts $output_file "	-- output enabled     -----------------------------------------------------------------------0"
set line_num 196; puts $output_file "	-- RDQS disabled      ------------------------------------------------------------------------0"
set line_num 197; puts $output_file "	-- DQS# disabled      -------------------------------------------------------------------------1"
set line_num 198; puts $output_file "	-- Default OCD state  --------------------------------------------------------------------------111"
set line_num 199; puts $output_file "	-- Posted AL = 0      ------------------------------------------------------------------------------000"
set line_num 200; puts $output_file "	-- RTT = 75 Ohm       -----------------------------------------------------------------------------0---1"
set line_num 201; puts $output_file "    -- Full strength out  ----------------------------------------------------------------------------------0"
set line_num 202; puts $output_file "	-- DLL enabled        -----------------------------------------------------------------------------------0"
set line_num 203; puts $output_file "	constant REG_EMR1_OCD_EXIT : std_logic_vector((row_address_p-1) downto 0) := REG_PADZEROS & \"0010000000100\";"
set line_num 204; puts $output_file "	-- output enabled     -----------------------------------------------------------------------0"
set line_num 205; puts $output_file "	-- RDQS disabled      ------------------------------------------------------------------------0"
set line_num 206; puts $output_file "	-- DQS# disabled      -------------------------------------------------------------------------1"
set line_num 207; puts $output_file "	-- Default OCD state  --------------------------------------------------------------------------000"
set line_num 208; puts $output_file "	-- Posted AL = 0      ------------------------------------------------------------------------------000"
set line_num 209; puts $output_file "	-- RTT = 75 Ohm       -----------------------------------------------------------------------------0---1"
set line_num 210; puts $output_file "    -- Full strength out  ----------------------------------------------------------------------------------0"
set line_num 211; puts $output_file "	-- DLL enabled        -----------------------------------------------------------------------------------0"
set line_num 212; puts $output_file "	constant REG_EMR2          : std_logic_vector((row_address_p-1) downto 0) := REG_PADZEROS & \"0000000000000\";"
set line_num 213; puts $output_file "	-- reserved           -----------------------------------------------------------------------0000000000000"
set line_num 214; puts $output_file "	constant REG_EMR3          : std_logic_vector((row_address_p-1) downto 0) := REG_PADZEROS & \"0000000000000\";"
set line_num 215; puts $output_file "	-- reserved           -----------------------------------------------------------------------0000000000000"
set line_num 216; puts $output_file ""
set line_num 217; puts $output_file "	-- command signal"
set line_num 218; puts $output_file "	signal ddr_cmd             : std_logic_vector(2 downto 0) := \"111\";"
set line_num 219; puts $output_file "	-- timing counters"
set line_num 220; puts $output_file "	-- init"
set line_num 221; puts $output_file "	signal powerup_counter     : std_logic_vector(15 downto 0) := X\"0000\";"
set line_num 222; puts $output_file "	signal clklock_counter     : std_logic_vector(7 downto 0)  := CLKLOCK_CNT;"
set line_num 223; puts $output_file "	signal trpa_counter        : std_logic_vector(3 downto 0)  := TRPA_CNT;"
set line_num 224; puts $output_file "	signal tmrd_counter        : std_logic_vector(3 downto 0)  := TMRD_CNT;"
set line_num 225; puts $output_file "	signal trfc_counter        : std_logic_vector(7 downto 0)  := TRFC_CNT;"
set line_num 226; puts $output_file "	signal plllock_counter     : std_logic_vector(7 downto 0)  := PLLLOCK_CNT;"
set line_num 227; puts $output_file "	-- command to command"
set line_num 228; puts $output_file "	signal ref_2_ref_counter   : std_logic_vector(7 downto 0)  := REF_2_REF_CNT;"
set line_num 229; puts $output_file "	signal ref_2_act_counter   : std_logic_vector(7 downto 0)  := REF_2_ACT_CNT;"
set line_num 230; puts $output_file "	signal ref_2_pre_counter   : std_logic_vector(7 downto 0)  := REF_2_PRE_CNT;"
set line_num 231; puts $output_file "	signal ref_2_rd_counter    : std_logic_vector(7 downto 0)  := REF_2_RD_CNT ;"
set line_num 232; puts $output_file "	signal ref_2_wr_counter    : std_logic_vector(7 downto 0)  := REF_2_WR_CNT ;"
set line_num 233; puts $output_file "	signal act_2_ref_counter   : std_logic_vector(3 downto 0)  := ACT_2_REF_CNT;"
set line_num 234; puts $output_file "	signal act_2_act_counter   : std_logic_vector(3 downto 0)  := ACT_2_ACT_CNT;"
set line_num 235; puts $output_file "	signal act_2_pre_counter   : std_logic_vector(3 downto 0)  := ACT_2_PRE_CNT;"
set line_num 236; puts $output_file "	signal act_2_rd_counter    : std_logic_vector(3 downto 0)  := ACT_2_RD_CNT ;"
set line_num 237; puts $output_file "	signal act_2_wr_counter    : std_logic_vector(3 downto 0)  := ACT_2_WR_CNT ;"
set line_num 238; puts $output_file "	signal pre_2_ref_counter   : std_logic_vector(3 downto 0)  := PRE_2_REF_CNT;"
set line_num 239; puts $output_file "	signal pre_2_act_counter   : std_logic_vector(3 downto 0)  := PRE_2_ACT_CNT;"
set line_num 240; puts $output_file "	signal pre_2_pre_counter   : std_logic_vector(3 downto 0)  := PRE_2_PRE_CNT;"
set line_num 241; puts $output_file "	signal pre_2_rd_counter    : std_logic_vector(3 downto 0)  := PRE_2_RD_CNT ;"
set line_num 242; puts $output_file "	signal pre_2_wr_counter    : std_logic_vector(3 downto 0)  := PRE_2_WR_CNT ;"
set line_num 243; puts $output_file "	signal rd_2_ref_counter    : std_logic_vector(3 downto 0)  := RD_2_REF_CNT ;"
set line_num 244; puts $output_file "	signal rd_2_act_counter    : std_logic_vector(3 downto 0)  := RD_2_ACT_CNT ;"
set line_num 245; puts $output_file "	signal rd_2_pre_counter    : std_logic_vector(3 downto 0)  := RD_2_PRE_CNT ;"
set line_num 246; puts $output_file "	signal rd_2_rd_counter     : std_logic_vector(3 downto 0)  := RD_2_RD_CNT  ;"
set line_num 247; puts $output_file "	signal rd_2_wr_counter     : std_logic_vector(3 downto 0)  := RD_2_WR_CNT  ;"
set line_num 248; puts $output_file "	signal wr_2_ref_counter    : std_logic_vector(3 downto 0)  := WR_2_REF_CNT ;"
set line_num 249; puts $output_file "	signal wr_2_act_counter    : std_logic_vector(3 downto 0)  := WR_2_ACT_CNT ;"
set line_num 250; puts $output_file "	signal wr_2_pre_counter    : std_logic_vector(3 downto 0)  := WR_2_PRE_CNT ;"
set line_num 251; puts $output_file "	signal wr_2_rd_counter     : std_logic_vector(3 downto 0)  := WR_2_RD_CNT  ;"
set line_num 252; puts $output_file "	signal wr_2_wr_counter     : std_logic_vector(3 downto 0)  := WR_2_WR_CNT  ;"
set line_num 253; puts $output_file "	-- command to ready"
set line_num 254; puts $output_file "	signal ref_2_ready_counter : std_logic_vector(7 downto 0)  := REF_2_READY_CNT;"
set line_num 255; puts $output_file "	signal act_2_ready_counter : std_logic_vector(3 downto 0)  := ACT_2_READY_CNT;"
set line_num 256; puts $output_file "	signal pre_2_ready_counter : std_logic_vector(3 downto 0)  := PRE_2_READY_CNT;"
set line_num 257; puts $output_file "	signal rd_2_ready_counter  : std_logic_vector(3 downto 0)  := RD_2_READY_CNT ;"
set line_num 258; puts $output_file "	signal wr_2_ready_counter  : std_logic_vector(3 downto 0)  := WR_2_READY_CNT ;"
set line_num 259; puts $output_file "	-- maximum time"
set line_num 260; puts $output_file "	signal refreshmax_counter  : std_logic_vector(15 downto 0) := REFRESHMAX_CNT  ;"
set line_num 261; puts $output_file "	signal rowactivemax_counter: std_logic_vector(15 downto 0) := ROWACTIVEMAX_CNT;"
set line_num 262; puts $output_file "                                                                  "
set line_num 263; puts $output_file "	-- timming counters reached signals                           "
set line_num 264; puts $output_file "	-- init                                                       "
set line_num 265; puts $output_file "	signal powerup_reached     : std_logic := '0';"
set line_num 266; puts $output_file "	signal clklock_reached     : std_logic := '1';"
set line_num 267; puts $output_file "	signal trpa_reached        : std_logic := '1';"
set line_num 268; puts $output_file "	signal tmrd_reached        : std_logic := '1';"
set line_num 269; puts $output_file "	signal trfc_reached        : std_logic := '1';"
set line_num 270; puts $output_file "	signal plllock_reached     : std_logic := '1';"
set line_num 271; puts $output_file "	-- command to command"
set line_num 272; puts $output_file "	signal ref_2_ref_reached   : std_logic := '1';"
set line_num 273; puts $output_file "	signal ref_2_act_reached   : std_logic := '1';"
set line_num 274; puts $output_file "	signal ref_2_pre_reached   : std_logic := '1';"
set line_num 275; puts $output_file "	signal ref_2_rd_reached    : std_logic := '1';"
set line_num 276; puts $output_file "	signal ref_2_wr_reached    : std_logic := '1';"
set line_num 277; puts $output_file "	signal act_2_ref_reached   : std_logic := '1';"
set line_num 278; puts $output_file "	signal act_2_act_reached   : std_logic := '1';"
set line_num 279; puts $output_file "	signal act_2_pre_reached   : std_logic := '1';"
set line_num 280; puts $output_file "	signal act_2_rd_reached    : std_logic := '1';"
set line_num 281; puts $output_file "	signal act_2_wr_reached    : std_logic := '1';"
set line_num 282; puts $output_file "	signal pre_2_ref_reached   : std_logic := '1';"
set line_num 283; puts $output_file "	signal pre_2_act_reached   : std_logic := '1';"
set line_num 284; puts $output_file "	signal pre_2_pre_reached   : std_logic := '1';"
set line_num 285; puts $output_file "	signal pre_2_rd_reached    : std_logic := '1';"
set line_num 286; puts $output_file "	signal pre_2_wr_reached    : std_logic := '1';"
set line_num 287; puts $output_file "	signal rd_2_ref_reached    : std_logic := '1';"
set line_num 288; puts $output_file "	signal rd_2_act_reached    : std_logic := '1';"
set line_num 289; puts $output_file "	signal rd_2_pre_reached    : std_logic := '1';"
set line_num 290; puts $output_file "	signal rd_2_rd_reached     : std_logic := '1';"
set line_num 291; puts $output_file "	signal rd_2_wr_reached     : std_logic := '1';"
set line_num 292; puts $output_file "	signal wr_2_ref_reached    : std_logic := '1';"
set line_num 293; puts $output_file "	signal wr_2_act_reached    : std_logic := '1';"
set line_num 294; puts $output_file "	signal wr_2_pre_reached    : std_logic := '1';"
set line_num 295; puts $output_file "	signal wr_2_rd_reached     : std_logic := '1';"
set line_num 296; puts $output_file "	signal wr_2_wr_reached     : std_logic := '1';"
set line_num 297; puts $output_file "	-- command to ready"
set line_num 298; puts $output_file "	signal ref_2_ready_reached : std_logic := '1';"
set line_num 299; puts $output_file "	signal act_2_ready_reached : std_logic := '1';"
set line_num 300; puts $output_file "	signal pre_2_ready_reached : std_logic := '1';"
set line_num 301; puts $output_file "	signal rd_2_ready_reached  : std_logic := '1';"
set line_num 302; puts $output_file "	signal wr_2_ready_reached  : std_logic := '1';"
set line_num 303; puts $output_file "	-- maximum time"
set line_num 304; puts $output_file "	signal refreshmax_reached  : std_logic := '1';"
set line_num 305; puts $output_file "	signal rowactivemax_reached: std_logic := '1';"
set line_num 306; puts $output_file ""
set line_num 307; puts $output_file "	-- opened bank state"
set line_num 308; puts $output_file "	signal bank_is_opened      : std_logic := '0';"
set line_num 309; puts $output_file "	signal opened_row          : std_logic_vector((row_address_p-1) downto 0) := (others => '0');"
set line_num 310; puts $output_file "	signal opened_bank         : std_logic_vector((bank_address_p-1) downto 0) := (others => '0');"
set line_num 311; puts $output_file "	signal opened_rank         : std_logic := '0';"
set line_num 312; puts $output_file ""
set line_num 313; puts $output_file "	-- initialisation done"
set line_num 314; puts $output_file "	signal init_done           : std_logic := '0';"
set line_num 315; puts $output_file "	signal init_done_delay     : std_logic := '0';"
set line_num 316; puts $output_file "	"
set line_num 317; puts $output_file "	-- address conflict"
set line_num 318; puts $output_file "	signal address_conflict    : std_logic := '0';"
set line_num 319; puts $output_file ""
set line_num 320; puts $output_file "	-- csb decoding"
set line_num 321; puts $output_file "	signal user_csb            : std_logic_vector(1 downto 0);"
set line_num 322; puts $output_file "	signal opened_csb          : std_logic_vector(1 downto 0);"
set line_num 323; puts $output_file ""
set line_num 324; puts $output_file "	-- refresh internal command"
set line_num 325; puts $output_file "	signal auto_refresh        : std_logic;"
set line_num 326; puts $output_file "	signal do_auto_refresh     : std_logic := '0';"
set line_num 327; puts $output_file ""
set line_num 328; puts $output_file "	-- rowclose internal command"
set line_num 329; puts $output_file "	signal auto_rowclose       : std_logic;"
set line_num 330; puts $output_file "	signal do_auto_rowclose    : std_logic := '0';"
set line_num 331; puts $output_file ""
set line_num 332; puts $output_file "	-- registered and latched input signals"
set line_num 333; puts $output_file "	signal reg_col_address     : std_logic_vector((column_address_p - 1) downto 0) := (others => '0');"
set line_num 334; puts $output_file "	signal reg_row_address     : std_logic_vector((row_address_p - 1) downto 0) := (others => '0');"
set line_num 335; puts $output_file "	signal reg_bank_address    : std_logic_vector((bank_address_p - 1) downto 0) := (others => '0');"
set line_num 336; puts $output_file "	signal reg_rank_address    : std_logic := '0';"
set line_num 337; puts $output_file "	signal reg_read            : std_logic := '0';"
set line_num 338; puts $output_file "	signal reg_write           : std_logic := '0';"
set line_num 339; puts $output_file "	signal reg_csb             : std_logic_vector(1 downto 0);"
set line_num 340; puts $output_file "	signal latch_col_address   : std_logic_vector((column_address_p - 1) downto 0);"
set line_num 341; puts $output_file "	signal latch_row_address   : std_logic_vector((row_address_p - 1) downto 0);"
set line_num 342; puts $output_file "	signal latch_bank_address  : std_logic_vector((bank_address_p - 1) downto 0);"
set line_num 343; puts $output_file "	signal latch_rank_address  : std_logic;"
set line_num 344; puts $output_file "	signal latch_read          : std_logic;"
set line_num 345; puts $output_file "	signal latch_write         : std_logic;"
set line_num 346; puts $output_file "	signal latch_csb           : std_logic_vector(1 downto 0);"
set line_num 347; puts $output_file ""
set line_num 348; puts $output_file "	-- data request from the user"
set line_num 349; puts $output_file "	signal user_get_data_next  : std_logic := '0';"
set line_num 350; puts $output_file ""
set line_num 351; puts $output_file "	-- internal version of output signals"
set line_num 352; puts $output_file "	signal input_data_valid_int    : std_logic := '0';"
set line_num 353; puts $output_file "	signal user_get_data_int       : std_logic := '0';"
set line_num 354; puts $output_file "	signal user_ready_int          : std_logic := '0';"
set line_num 355; puts $output_file "	signal dqs_reset_int           : std_logic := '0';"
set line_num 356; puts $output_file "	signal dqs_enable_int          : std_logic := '0';"
set line_num 357; puts $output_file "	signal write_enable_int        : std_logic := '0';"
set line_num 358; puts $output_file "	signal ddr_rst_dqs_div_out_int : std_logic := '0';"
set line_num 359; puts $output_file "	signal rst_calib_int           : std_logic := '0';"
set line_num 360; puts $output_file "	signal ddr_csb_int             : std_logic_vector(1 downto 0) := CSB_NONE;"
set line_num 361; puts $output_file "	signal ddr_odt_int             : std_logic_vector(1 downto 0) := ODT_NONE;"
set line_num 362; puts $output_file "	attribute syn_noprune of ddr_csb_int: signal is true;"
set line_num 363; puts $output_file "	signal ddr_ba_int              : std_logic_vector((bank_address_p - 1) downto 0) := (others => '0');"
set line_num 364; puts $output_file "	signal ddr_address_int         : std_logic_vector((row_address_p - 1) downto 0) := (others => '0');"
set line_num 365; puts $output_file "	signal ddr_cke_int             : std_logic := CKE_DISABLED;"
set line_num 366; puts $output_file "	signal ddr_force_nop_int       : std_logic_vector(1 downto 0) := \"00\";"
set line_num 367; puts $output_file "	attribute syn_noprune of ddr_force_nop_int : signal is true;"
set line_num 368; puts $output_file ""
set line_num 369; puts $output_file "	-- init output signals"
set line_num 370; puts $output_file "	signal ddr_csb_init            : std_logic_vector(1 downto 0) := CSB_NONE;"
set line_num 371; puts $output_file "	signal ddr_cmd_init            : std_logic_vector(2 downto 0) := CMD_NOP;"
set line_num 372; puts $output_file "	signal ddr_address_init        : std_logic_vector((row_address_p - 1) downto 0) := (others => '0');"
set line_num 373; puts $output_file "	signal ddr_ba_init             : std_logic_vector((bank_address_p - 1) downto 0) := (others => '0');"
set line_num 374; puts $output_file "	signal ddr_cke_init            : std_logic := CKE_DISABLED;"
set line_num 375; puts $output_file ""
set line_num 376; puts $output_file "	-- enable receive path"
set line_num 377; puts $output_file "	signal receive_enable          : std_logic := '0';"
set line_num 378; puts $output_file "	signal receive_enable_delay1   : std_logic := '0';"
set line_num 379; puts $output_file "	signal receive_enable_delay2   : std_logic := '0';"
set line_num 380; puts $output_file "	signal receive_enable_next     : std_logic := '0';"
set line_num 381; puts $output_file ""
set line_num 382; puts $output_file "	-- enable sending path"
set line_num 383; puts $output_file "	signal write_enable_delay1     : std_logic := '0';"
set line_num 384; puts $output_file "	signal write_enable_delay2     : std_logic := '0';"
set line_num 385; puts $output_file ""
set line_num 386; puts $output_file "	-- abort command mode signal"
set line_num 387; puts $output_file "	signal abort_read              : std_logic;"
set line_num 388; puts $output_file "	signal abort_write             : std_logic;"
set line_num 389; puts $output_file "	signal valid_read              : std_logic;"
set line_num 390; puts $output_file "	signal valid_write             : std_logic;"
set line_num 391; puts $output_file ""
set line_num 392; puts $output_file "	-- pipeline empty signal"
set line_num 393; puts $output_file "	signal pipeline_not_empty      : std_logic := '0';"
set line_num 394; puts $output_file "	"
set line_num 395; puts $output_file "	-- tell what was the command executed on the previous cycle"
set line_num 396; puts $output_file "	signal last_was_read           : std_logic := '0';"
set line_num 397; puts $output_file "	signal last_was_write          : std_logic := '0';"
set line_num 398; puts $output_file "	signal last_was_precharge      : std_logic := '0';"
set line_num 399; puts $output_file "	signal last_was_active         : std_logic := '0';"
set line_num 400; puts $output_file "	signal last_was_refresh        : std_logic := '0';"
set line_num 401; puts $output_file ""
set line_num 402; puts $output_file "begin"
set line_num 403; puts $output_file ""
set line_num 404; puts $output_file "-- #######  #####  ##   ##"
set line_num 405; puts $output_file "--  #    # #     #  #   # "
set line_num 406; puts $output_file "--  #      #        ## ## "
set line_num 407; puts $output_file "--  #  #   #        ## ## "
set line_num 408; puts $output_file "--  ####    #####   # # # "
set line_num 409; puts $output_file "--  #  #         #  # # # "
set line_num 410; puts $output_file "--  #            #  #   # "
set line_num 411; puts $output_file "--  #      #     #  #   # "
set line_num 412; puts $output_file "-- ####     #####  ### ###"
set line_num 413; puts $output_file ""
set line_num 414; puts $output_file "controller_fsm: process(clk)"
set line_num 415; puts $output_file "begin"
set line_num 416; puts $output_file "	if clk'event and clk = '1' then"
set line_num 417; puts $output_file "		if reset = '1' then"
set line_num 418; puts $output_file "            --                                   #    "
set line_num 419; puts $output_file "            --                                   #    "
set line_num 420; puts $output_file "            -- ### ##   #####   #####   #####   ####  "
set line_num 421; puts $output_file "            --   ##  # #     # #     # #     #   #    "
set line_num 422; puts $output_file "            --   #     #######  ###    #######   #    "
set line_num 423; puts $output_file "            --   #     #           ##  #         #    "
set line_num 424; puts $output_file "            --   #     #     # #     # #     #   #  # "
set line_num 425; puts $output_file "            -- #####    #####   #####   #####     ##  "
set line_num 426; puts $output_file ""
set line_num 427; puts $output_file "			-- disable outputs and clock"
set line_num 428; puts $output_file "			ddr_cmd                 <= CMD_NOP; "
set line_num 429; puts $output_file "			ddr_csb_int             <= CSB_NONE;  "
set line_num 430; puts $output_file "			ddr_odt_int             <= ODT_NONE;"
set line_num 431; puts $output_file "			ddr_ba_int              <= (others => '0');  "
set line_num 432; puts $output_file "			ddr_address_int         <= (others => '0');  "
set line_num 433; puts $output_file "			ddr_cke_int             <= CKE_DISABLED; "
set line_num 434; puts $output_file "			-- disable the data path"
set line_num 435; puts $output_file "			input_data_valid_int    <= '0';"
set line_num 436; puts $output_file "			dqs_enable_int          <= '0';"
set line_num 437; puts $output_file "			dqs_reset_int           <= '0';"
set line_num 438; puts $output_file "			write_enable_delay1     <= '0';"
set line_num 439; puts $output_file "			write_enable_delay2     <= '0';"
set line_num 440; puts $output_file "			write_enable_int        <= '0';"
set line_num 441; puts $output_file "			receive_enable          <= '0';"
set line_num 442; puts $output_file "			receive_enable_delay1   <= '0';"
set line_num 443; puts $output_file "			receive_enable_delay2   <= '0';"
set line_num 444; puts $output_file "			receive_enable_next     <= '0';"
set line_num 445; puts $output_file "			ddr_rst_dqs_div_out_int <= '0';"
set line_num 446; puts $output_file "			rst_calib_int           <= '0';"
set line_num 447; puts $output_file "			-- user interface disabled"
set line_num 448; puts $output_file "			user_ready_int          <= '0';"
set line_num 449; puts $output_file "			user_ready              <= '0';"
set line_num 450; puts $output_file "			user_get_data_int       <= '0';"
set line_num 451; puts $output_file "			user_get_data_next      <= '0';"
set line_num 452; puts $output_file "			-- initial state"
set line_num 453; puts $output_file "			init_state              <= INIT_WAIT_POWER_UP;"
set line_num 454; puts $output_file "			-- timing counters reset"
set line_num 455; puts $output_file "			-- init"
set line_num 456; puts $output_file "			powerup_counter     <=  X\"0000\"         ;"
set line_num 457; puts $output_file "			trpa_counter        <=  TRPA_CNT        ;"
set line_num 458; puts $output_file "			tmrd_counter        <=  TMRD_CNT        ;"
set line_num 459; puts $output_file "			trfc_counter        <=  TRFC_CNT        ;"
set line_num 460; puts $output_file "			plllock_counter     <=  PLLLOCK_CNT     ;"
set line_num 461; puts $output_file "			clklock_counter     <=  CLKLOCK_CNT     ;"
set line_num 462; puts $output_file "			-- command to command"
set line_num 463; puts $output_file "			ref_2_ref_counter   <= 	REF_2_REF_CNT   ;"
set line_num 464; puts $output_file "			ref_2_act_counter   <= 	REF_2_ACT_CNT   ;"
set line_num 465; puts $output_file "			ref_2_pre_counter   <= 	REF_2_PRE_CNT   ;"
set line_num 466; puts $output_file "			ref_2_rd_counter    <= 	REF_2_RD_CNT    ;"
set line_num 467; puts $output_file "			ref_2_wr_counter    <= 	REF_2_WR_CNT    ;"
set line_num 468; puts $output_file "			act_2_ref_counter   <= 	ACT_2_REF_CNT   ;"
set line_num 469; puts $output_file "			act_2_act_counter   <= 	ACT_2_ACT_CNT   ;"
set line_num 470; puts $output_file "			act_2_pre_counter   <= 	ACT_2_PRE_CNT   ;"
set line_num 471; puts $output_file "			act_2_rd_counter    <= 	ACT_2_RD_CNT    ;"
set line_num 472; puts $output_file "			act_2_wr_counter    <= 	ACT_2_WR_CNT    ;"
set line_num 473; puts $output_file "			pre_2_ref_counter   <= 	PRE_2_REF_CNT   ;"
set line_num 474; puts $output_file "			pre_2_act_counter   <= 	PRE_2_ACT_CNT   ;"
set line_num 475; puts $output_file "			pre_2_pre_counter   <= 	PRE_2_PRE_CNT   ;"
set line_num 476; puts $output_file "			pre_2_rd_counter    <= 	PRE_2_RD_CNT    ;"
set line_num 477; puts $output_file "			pre_2_wr_counter    <= 	PRE_2_WR_CNT    ;"
set line_num 478; puts $output_file "			rd_2_ref_counter    <= 	RD_2_REF_CNT    ;"
set line_num 479; puts $output_file "			rd_2_act_counter    <= 	RD_2_ACT_CNT    ;"
set line_num 480; puts $output_file "			rd_2_pre_counter    <= 	RD_2_PRE_CNT    ;"
set line_num 481; puts $output_file "			rd_2_rd_counter     <= 	RD_2_RD_CNT     ;"
set line_num 482; puts $output_file "			rd_2_wr_counter     <= 	RD_2_WR_CNT     ;"
set line_num 483; puts $output_file "			wr_2_ref_counter    <= 	WR_2_REF_CNT    ;"
set line_num 484; puts $output_file "			wr_2_act_counter    <= 	WR_2_ACT_CNT    ;"
set line_num 485; puts $output_file "			wr_2_pre_counter    <= 	WR_2_PRE_CNT    ;"
set line_num 486; puts $output_file "			wr_2_rd_counter     <= 	WR_2_RD_CNT     ;"
set line_num 487; puts $output_file "			wr_2_wr_counter     <= 	WR_2_WR_CNT     ;"
set line_num 488; puts $output_file "			-- command to ready"
set line_num 489; puts $output_file "			ref_2_ready_counter <=  REF_2_READY_CNT ;"
set line_num 490; puts $output_file "			act_2_ready_counter <=  ACT_2_READY_CNT ;"
set line_num 491; puts $output_file "			pre_2_ready_counter <=  PRE_2_READY_CNT ;"
set line_num 492; puts $output_file "			rd_2_ready_counter  <=  RD_2_READY_CNT  ;"
set line_num 493; puts $output_file "			wr_2_ready_counter  <=  WR_2_READY_CNT  ;"
set line_num 494; puts $output_file "			-- max time"
set line_num 495; puts $output_file "			refreshmax_counter  <=  REFRESHMAX_CNT  ;"
set line_num 496; puts $output_file "			rowactivemax_counter<=  ROWACTIVEMAX_CNT;"
set line_num 497; puts $output_file "			-- timming counters reached signals                           "
set line_num 498; puts $output_file "			-- init                                                       "
set line_num 499; puts $output_file "			powerup_reached     <= '0';"
set line_num 500; puts $output_file "			clklock_reached     <= '1';"
set line_num 501; puts $output_file "			trpa_reached        <= '1';"
set line_num 502; puts $output_file "			tmrd_reached        <= '1';"
set line_num 503; puts $output_file "			trfc_reached        <= '1';"
set line_num 504; puts $output_file "			plllock_reached     <= '1';"
set line_num 505; puts $output_file "			-- command to command"
set line_num 506; puts $output_file "			ref_2_ref_reached   <= '1';"
set line_num 507; puts $output_file "			ref_2_act_reached   <= '1';"
set line_num 508; puts $output_file "			ref_2_pre_reached   <= '1';"
set line_num 509; puts $output_file "			ref_2_rd_reached    <= '1';"
set line_num 510; puts $output_file "			ref_2_wr_reached    <= '1';"
set line_num 511; puts $output_file "			act_2_ref_reached   <= '1';"
set line_num 512; puts $output_file "			act_2_act_reached   <= '1';"
set line_num 513; puts $output_file "			act_2_pre_reached   <= '1';"
set line_num 514; puts $output_file "			act_2_rd_reached    <= '1';"
set line_num 515; puts $output_file "			act_2_wr_reached    <= '1';"
set line_num 516; puts $output_file "			pre_2_ref_reached   <= '1';"
set line_num 517; puts $output_file "			pre_2_act_reached   <= '1';"
set line_num 518; puts $output_file "			pre_2_pre_reached   <= '1';"
set line_num 519; puts $output_file "			pre_2_rd_reached    <= '1';"
set line_num 520; puts $output_file "			pre_2_wr_reached    <= '1';"
set line_num 521; puts $output_file "			rd_2_ref_reached    <= '1';"
set line_num 522; puts $output_file "			rd_2_act_reached    <= '1';"
set line_num 523; puts $output_file "			rd_2_pre_reached    <= '1';"
set line_num 524; puts $output_file "			rd_2_rd_reached     <= '1';"
set line_num 525; puts $output_file "			rd_2_wr_reached     <= '1';"
set line_num 526; puts $output_file "			wr_2_ref_reached    <= '1';"
set line_num 527; puts $output_file "			wr_2_act_reached    <= '1';"
set line_num 528; puts $output_file "			wr_2_pre_reached    <= '1';"
set line_num 529; puts $output_file "			wr_2_rd_reached     <= '1';"
set line_num 530; puts $output_file "			wr_2_wr_reached     <= '1';"
set line_num 531; puts $output_file "			-- command to ready"
set line_num 532; puts $output_file "			ref_2_ready_reached <= '1';"
set line_num 533; puts $output_file "			act_2_ready_reached <= '1';"
set line_num 534; puts $output_file "			pre_2_ready_reached <= '1';"
set line_num 535; puts $output_file "			rd_2_ready_reached  <= '1';"
set line_num 536; puts $output_file "			wr_2_ready_reached  <= '1';"
set line_num 537; puts $output_file "			-- maximum time"
set line_num 538; puts $output_file "			refreshmax_reached  <= '1';"
set line_num 539; puts $output_file "			rowactivemax_reached<= '1';"
set line_num 540; puts $output_file "			-- bank opened state"
set line_num 541; puts $output_file "			bank_is_opened      <= '0';"
set line_num 542; puts $output_file "			opened_row          <= (others => '0');"
set line_num 543; puts $output_file "			opened_bank         <= (others => '0');"
set line_num 544; puts $output_file "			opened_rank         <= '0';"
set line_num 545; puts $output_file "			-- initialisation done"
set line_num 546; puts $output_file "			init_done           <= '0';"
set line_num 547; puts $output_file "			init_done_delay     <= '0';"
set line_num 548; puts $output_file "			-- registered input signals"
set line_num 549; puts $output_file "			reg_col_address     <= (others => '0');"
set line_num 550; puts $output_file "			reg_row_address     <= (others => '0');"
set line_num 551; puts $output_file "			reg_bank_address    <= (others => '0');"
set line_num 552; puts $output_file "			reg_rank_address    <= '0';"
set line_num 553; puts $output_file "			reg_read            <= '0';"
set line_num 554; puts $output_file "			reg_write           <= '0';"
set line_num 555; puts $output_file "			-- delayed refresh command"
set line_num 556; puts $output_file "			do_auto_refresh     <= '0';"
set line_num 557; puts $output_file "			-- delayed rowclose command"
set line_num 558; puts $output_file "			do_auto_rowclose    <= '0';"
set line_num 559; puts $output_file "			-- pipeline empty signal"
set line_num 560; puts $output_file "			pipeline_not_empty  <= '0';"
set line_num 561; puts $output_file "			-- address conflict detect"
set line_num 562; puts $output_file "			address_conflict    <= '0';"
set line_num 563; puts $output_file "			-- tell what was the command executed on the previous cycle"
set line_num 564; puts $output_file "			last_was_read       <= '0';"
set line_num 565; puts $output_file "			last_was_write      <= '0';"
set line_num 566; puts $output_file "			last_was_precharge  <= '0';"
set line_num 567; puts $output_file "			last_was_active     <= '0';"
set line_num 568; puts $output_file "			last_was_refresh    <= '0';"
set line_num 569; puts $output_file "			-- init command signals"
set line_num 570; puts $output_file "			ddr_csb_init        <= CSB_NONE;"
set line_num 571; puts $output_file "			ddr_cmd_init        <= CMD_NOP;"
set line_num 572; puts $output_file "			ddr_address_init    <= (others => '0');"
set line_num 573; puts $output_file "			ddr_ba_init         <= (others => '0');"
set line_num 574; puts $output_file "			ddr_cke_init        <= CKE_DISABLED;"
set line_num 575; puts $output_file "			-- abort signals"
set line_num 576; puts $output_file "			ddr_force_nop_int   <= \"00\";"
set line_num 577; puts $output_file "		else"
set line_num 578; puts $output_file "			-- make sure the default value of chip selects is (none selected)"
set line_num 579; puts $output_file "			ddr_csb_int  <= CSB_NONE;"
set line_num 580; puts $output_file "			ddr_csb_init <= CSB_NONE;"
set line_num 581; puts $output_file "			-- make sure the default value of the abort signals is low"
set line_num 582; puts $output_file "			ddr_force_nop_int  <= \"00\";"
set line_num 583; puts $output_file "			-- delay the init_done signal"
set line_num 584; puts $output_file "			init_done_delay    <= init_done;"
set line_num 585; puts $output_file "			-- make sure the default value of the last command indicators is 0"
set line_num 586; puts $output_file "			last_was_read       <= '0';"
set line_num 587; puts $output_file "			last_was_write      <= '0';"
set line_num 588; puts $output_file "			last_was_precharge  <= '0';"
set line_num 589; puts $output_file "			last_was_active     <= '0';"
set line_num 590; puts $output_file "			last_was_refresh    <= '0';"
set line_num 591; puts $output_file "			-- registered input signals"
set line_num 592; puts $output_file "			if user_ready_int = '1' then"
set line_num 593; puts $output_file "				reg_col_address     <= user_col_address ; "
set line_num 594; puts $output_file "				reg_row_address     <= user_row_address ; "
set line_num 595; puts $output_file "				reg_bank_address    <= user_bank_address; "
set line_num 596; puts $output_file "				reg_rank_address    <= user_rank_address; "
set line_num 597; puts $output_file "				reg_read            <= user_read        ; "
set line_num 598; puts $output_file "				reg_write           <= user_write       ; "
set line_num 599; puts $output_file "    		end if;"
set line_num 600; puts $output_file ""
set line_num 601; puts $output_file "			--     ##                                                          ##     "
set line_num 602; puts $output_file "			--      #            #                                       #      #     "
set line_num 603; puts $output_file "			--      #            #                                       #      #     "
set line_num 604; puts $output_file "			--  #####   ####    ####    ####           ######   ####    ####    # ##  "
set line_num 605; puts $output_file "			-- #    #       #    #          #           #    #      #    #      ##  # "
set line_num 606; puts $output_file "			-- #    #   #####    #      #####           #    #  #####    #      #   # "
set line_num 607; puts $output_file "			-- #    #  #    #    #     #    #           #    # #    #    #      #   # "
set line_num 608; puts $output_file "			-- #    #  #    #    #  #  #    #           #    # #    #    #  #   #   # "
set line_num 609; puts $output_file "			--  ######  #### #    ##    #### #          #####   #### #    ##   ### ###"
set line_num 610; puts $output_file "			--                                          #                             "
set line_num 611; puts $output_file "			--                                         ###                            "
set line_num 612; puts $output_file ""
set line_num 613; puts $output_file "			-- delaying of data request from the user"
set line_num 614; puts $output_file "			user_get_data_next         <= '0';"
set line_num 615; puts $output_file "			user_get_data_int          <= user_get_data_next;"
set line_num 616; puts $output_file "			-- signaling a valid data to the data path"
set line_num 617; puts $output_file "			input_data_valid_int       <= user_get_data_int;"
set line_num 618; puts $output_file "			-- delaying of receive enable"
set line_num 619; puts $output_file "			receive_enable_next        <= '0';"
set line_num 620; puts $output_file "			receive_enable             <= receive_enable_next;"
set line_num 621; puts $output_file "			receive_enable_delay1      <= receive_enable;"
set line_num 622; puts $output_file "			receive_enable_delay2      <= receive_enable_delay1;"
set line_num 623; puts $output_file "			-- dqs div output reset"
set line_num 624; puts $output_file "			ddr_rst_dqs_div_out_int    <= receive_enable_delay2;"
set line_num 625; puts $output_file "			-- calibration reset"
set line_num 626; puts $output_file "			rst_calib_int              <= receive_enable_delay2;"
set line_num 627; puts $output_file "			-- write enable signal"
set line_num 628; puts $output_file "			write_enable_delay1        <= '0';"
set line_num 629; puts $output_file "			write_enable_delay2        <= write_enable_delay1;"
set line_num 630; puts $output_file "			write_enable_int           <= write_enable_delay2;"
set line_num 631; puts $output_file "			-- bring dqs enable down at the end of a burst"
set line_num 632; puts $output_file "			if write_enable_int = '0' then"
set line_num 633; puts $output_file "				dqs_enable_int  <= '0';"
set line_num 634; puts $output_file "			end if;"
set line_num 635; puts $output_file "			-- make sure the default value of dqs reset is (not reset)"
set line_num 636; puts $output_file "			dqs_reset_int <= '0';"
set line_num 637; puts $output_file "			-- if we are not currently bursting, reset the dqs circuitry and take the bus"
set line_num 638; puts $output_file "			if write_enable_delay2 = '1' and write_enable_int = '0' and abort_write = '0' then"
set line_num 639; puts $output_file "				dqs_enable_int  <= '1';"
set line_num 640; puts $output_file "				dqs_reset_int   <= '1';"
set line_num 641; puts $output_file "			end if;"
set line_num 642; puts $output_file ""
set line_num 643; puts $output_file "			--                            ##     ##       #                   "
set line_num 644; puts $output_file "			--                           #        #                      #    "
set line_num 645; puts $output_file "			--                           #        #                      #    "
set line_num 646; puts $output_file "			--  #####   #####  ## ##    ####      #     ###     #####   ####  "
set line_num 647; puts $output_file "			-- #     # #     #  ##  #    #        #       #    #     #   #    "
set line_num 648; puts $output_file "			-- #       #     #  #   #    #        #       #    #         #    "
set line_num 649; puts $output_file "			-- #       #     #  #   #    #        #       #    #         #    "
set line_num 650; puts $output_file "			-- #     # #     #  #   #    #        #       #    #     #   #  # "
set line_num 651; puts $output_file "			--  #####   #####  ### ###  ####    #####   #####   #####     ##  "
set line_num 652; puts $output_file ""
set line_num 653; puts $output_file "			-- address conflict detection"
set line_num 654; puts $output_file "			if user_ready_int = '1' then"
set line_num 655; puts $output_file "				if"
set line_num 656; puts $output_file "					bank_is_opened = '1' and"
set line_num 657; puts $output_file "					(user_row_address /= opened_row  or"
set line_num 658; puts $output_file "					user_bank_address /= opened_bank or"
set line_num 659; puts $output_file "					user_rank_address /= opened_rank)"
set line_num 660; puts $output_file "				then"
set line_num 661; puts $output_file "					-- if we asked for a transaction in the cycle in any case we want to cancel the next command"
set line_num 662; puts $output_file "					ddr_force_nop_int <= \"11\";"
set line_num 663; puts $output_file "					address_conflict  <= '1';"
set line_num 664; puts $output_file "				else"
set line_num 665; puts $output_file "					address_conflict  <= '0';"
set line_num 666; puts $output_file "				end if;"
set line_num 667; puts $output_file "			end if;"
set line_num 668; puts $output_file ""
set line_num 669; puts $output_file ""
set line_num 670; puts $output_file "            --                                   #                            "
set line_num 671; puts $output_file "            --                                   #                            "
set line_num 672; puts $output_file "            --  #####   #####  ##  ##  ## ##    ####    #####  ### ##   ##### "
set line_num 673; puts $output_file "            -- #     # #     #  #   #   ##  #    #     #     #   ##  # #     #"
set line_num 674; puts $output_file "            -- #       #     #  #   #   #   #    #     #######   #      ###   "
set line_num 675; puts $output_file "            -- #       #     #  #   #   #   #    #     #         #         ## "
set line_num 676; puts $output_file "            -- #     # #     #  #  ##   #   #    #  #  #     #   #     #     #"
set line_num 677; puts $output_file "            --  #####   #####    ## ## ### ###    ##    #####  #####    ##### "
set line_num 678; puts $output_file ""
set line_num 679; puts $output_file "			-- counters"
set line_num 680; puts $output_file "			-- init"
set line_num 681; puts $output_file "			if powerup_reached      = '0' then powerup_counter       <= powerup_counter      + 1; end if;"
set line_num 682; puts $output_file "			if clklock_reached      = '0' then clklock_counter       <= clklock_counter      + 1; end if;"
set line_num 683; puts $output_file "			if trpa_reached         = '0' then trpa_counter          <= trpa_counter         + 1; end if;"
set line_num 684; puts $output_file "			if tmrd_reached         = '0' then tmrd_counter          <= tmrd_counter         + 1; end if;"
set line_num 685; puts $output_file "			if trfc_reached         = '0' then trfc_counter          <= trfc_counter         + 1; end if;"
set line_num 686; puts $output_file "			if plllock_reached      = '0' then plllock_counter       <= plllock_counter      + 1; end if;"
set line_num 687; puts $output_file "			-- command to command"
set line_num 688; puts $output_file "			if ref_2_ref_reached    = '0' then ref_2_ref_counter     <= ref_2_ref_counter    + 1; end if;"
set line_num 689; puts $output_file "			if ref_2_act_reached    = '0' then ref_2_act_counter     <= ref_2_act_counter    + 1; end if;"
set line_num 690; puts $output_file "			if ref_2_pre_reached    = '0' then ref_2_pre_counter     <= ref_2_pre_counter    + 1; end if;"
set line_num 691; puts $output_file "			if ref_2_rd_reached     = '0' then ref_2_rd_counter      <= ref_2_rd_counter     + 1; end if;"
set line_num 692; puts $output_file "			if ref_2_wr_reached     = '0' then ref_2_wr_counter      <= ref_2_wr_counter     + 1; end if;"
set line_num 693; puts $output_file "			if act_2_ref_reached    = '0' then act_2_ref_counter     <= act_2_ref_counter    + 1; end if;"
set line_num 694; puts $output_file "			if act_2_act_reached    = '0' then act_2_act_counter     <= act_2_act_counter    + 1; end if;"
set line_num 695; puts $output_file "			if act_2_pre_reached    = '0' then act_2_pre_counter     <= act_2_pre_counter    + 1; end if;"
set line_num 696; puts $output_file "			if act_2_rd_reached     = '0' then act_2_rd_counter      <= act_2_rd_counter     + 1; end if;"
set line_num 697; puts $output_file "			if act_2_wr_reached     = '0' then act_2_wr_counter      <= act_2_wr_counter     + 1; end if;"
set line_num 698; puts $output_file "			if pre_2_ref_reached    = '0' then pre_2_ref_counter     <= pre_2_ref_counter    + 1; end if;"
set line_num 699; puts $output_file "			if pre_2_act_reached    = '0' then pre_2_act_counter     <= pre_2_act_counter    + 1; end if;"
set line_num 700; puts $output_file "			if pre_2_pre_reached    = '0' then pre_2_pre_counter     <= pre_2_pre_counter    + 1; end if;"
set line_num 701; puts $output_file "			if pre_2_rd_reached     = '0' then pre_2_rd_counter      <= pre_2_rd_counter     + 1; end if;"
set line_num 702; puts $output_file "			if pre_2_wr_reached     = '0' then pre_2_wr_counter      <= pre_2_wr_counter     + 1; end if;"
set line_num 703; puts $output_file "			if rd_2_ref_reached     = '0' then rd_2_ref_counter      <= rd_2_ref_counter     + 1; end if;"
set line_num 704; puts $output_file "			if rd_2_act_reached     = '0' then rd_2_act_counter      <= rd_2_act_counter     + 1; end if;"
set line_num 705; puts $output_file "			if rd_2_pre_reached     = '0' then rd_2_pre_counter      <= rd_2_pre_counter     + 1; end if;"
set line_num 706; puts $output_file "			if rd_2_rd_reached      = '0' then rd_2_rd_counter       <= rd_2_rd_counter      + 1; end if;"
set line_num 707; puts $output_file "			if rd_2_wr_reached      = '0' then rd_2_wr_counter       <= rd_2_wr_counter      + 1; end if;"
set line_num 708; puts $output_file "			if wr_2_ref_reached     = '0' then wr_2_ref_counter      <= wr_2_ref_counter     + 1; end if;"
set line_num 709; puts $output_file "			if wr_2_act_reached     = '0' then wr_2_act_counter      <= wr_2_act_counter     + 1; end if;"
set line_num 710; puts $output_file "			if wr_2_pre_reached     = '0' then wr_2_pre_counter      <= wr_2_pre_counter     + 1; end if;"
set line_num 711; puts $output_file "			if wr_2_rd_reached      = '0' then wr_2_rd_counter       <= wr_2_rd_counter      + 1; end if;"
set line_num 712; puts $output_file "			if wr_2_wr_reached      = '0' then wr_2_wr_counter       <= wr_2_wr_counter      + 1; end if;"
set line_num 713; puts $output_file "			-- command to ready"
set line_num 714; puts $output_file "			if ref_2_ready_reached  = '0' then ref_2_ready_counter   <= ref_2_ready_counter  + 1; end if;"
set line_num 715; puts $output_file "			if act_2_ready_reached  = '0' then act_2_ready_counter   <= act_2_ready_counter  + 1; end if;"
set line_num 716; puts $output_file "			if pre_2_ready_reached  = '0' then pre_2_ready_counter   <= pre_2_ready_counter  + 1; end if;"
set line_num 717; puts $output_file "			if rd_2_ready_reached   = '0' then rd_2_ready_counter    <= rd_2_ready_counter   + 1; end if;"
set line_num 718; puts $output_file "			if wr_2_ready_reached   = '0' then wr_2_ready_counter    <= wr_2_ready_counter   + 1; end if;"
set line_num 719; puts $output_file "			-- max time"
set line_num 720; puts $output_file "			if refreshmax_reached   = '0' then refreshmax_counter    <= refreshmax_counter   + 1; end if;"
set line_num 721; puts $output_file "			if rowactivemax_reached = '0' then rowactivemax_counter  <= rowactivemax_counter + 1; end if;"
set line_num 722; puts $output_file ""
set line_num 723; puts $output_file "			-- counters overflow detect"
set line_num 724; puts $output_file "			-- init        "
set line_num 725; puts $output_file "			if powerup_counter      = POWERUP_CNT     - 2 then powerup_reached      <= '1'; end if;"
set line_num 726; puts $output_file "			if clklock_counter      = CLKLOCK_CNT     - 2 then clklock_reached      <= '1'; end if;"
set line_num 727; puts $output_file "			if trpa_counter         = TRPA_CNT        - 2 then trpa_reached         <= '1'; end if;"
set line_num 728; puts $output_file "			if tmrd_counter         = TMRD_CNT        - 2 then tmrd_reached         <= '1'; end if;"
set line_num 729; puts $output_file "			if trfc_counter         = TRFC_CNT        - 2 then trfc_reached         <= '1'; end if;"
set line_num 730; puts $output_file "			if plllock_counter      = PLLLOCK_CNT     - 2 then plllock_reached      <= '1'; end if;"
set line_num 731; puts $output_file "			-- command to command"
set line_num 732; puts $output_file "			if ref_2_ref_counter    = REF_2_REF_CNT   - 2 then ref_2_ref_reached    <= '1'; end if;"
set line_num 733; puts $output_file "			if ref_2_act_counter    = REF_2_ACT_CNT   - 2 then ref_2_act_reached    <= '1'; end if;"
set line_num 734; puts $output_file "			if ref_2_pre_counter    = REF_2_PRE_CNT   - 2 then ref_2_pre_reached    <= '1'; end if;"
set line_num 735; puts $output_file "			if ref_2_rd_counter     = REF_2_RD_CNT    - 2 then ref_2_rd_reached     <= '1'; end if;"
set line_num 736; puts $output_file "			if ref_2_wr_counter     = REF_2_WR_CNT    - 2 then ref_2_wr_reached     <= '1'; end if;"
set line_num 737; puts $output_file "			if act_2_ref_counter    = ACT_2_REF_CNT   - 2 then act_2_ref_reached    <= '1'; end if;"
set line_num 738; puts $output_file "			if act_2_act_counter    = ACT_2_ACT_CNT   - 2 then act_2_act_reached    <= '1'; end if;"
set line_num 739; puts $output_file "			if act_2_pre_counter    = ACT_2_PRE_CNT   - 2 then act_2_pre_reached    <= '1'; end if;"
set line_num 740; puts $output_file "			if act_2_rd_counter     = ACT_2_RD_CNT    - 2 then act_2_rd_reached     <= '1'; end if;"
set line_num 741; puts $output_file "			if act_2_wr_counter     = ACT_2_WR_CNT    - 2 then act_2_wr_reached     <= '1'; end if;"
set line_num 742; puts $output_file "			if pre_2_ref_counter    = PRE_2_REF_CNT   - 2 then pre_2_ref_reached    <= '1'; end if;"
set line_num 743; puts $output_file "			if pre_2_act_counter    = PRE_2_ACT_CNT   - 2 then pre_2_act_reached    <= '1'; end if;"
set line_num 744; puts $output_file "			if pre_2_pre_counter    = PRE_2_PRE_CNT   - 2 then pre_2_pre_reached    <= '1'; end if;"
set line_num 745; puts $output_file "			if pre_2_rd_counter     = PRE_2_RD_CNT    - 2 then pre_2_rd_reached     <= '1'; end if;"
set line_num 746; puts $output_file "			if pre_2_wr_counter     = PRE_2_WR_CNT    - 2 then pre_2_wr_reached     <= '1'; end if;"
set line_num 747; puts $output_file "			if rd_2_ref_counter     = RD_2_REF_CNT    - 2 then rd_2_ref_reached     <= '1'; end if;"
set line_num 748; puts $output_file "			if rd_2_act_counter     = RD_2_ACT_CNT    - 2 then rd_2_act_reached     <= '1'; end if;"
set line_num 749; puts $output_file "			if rd_2_pre_counter     = RD_2_PRE_CNT    - 2 then rd_2_pre_reached     <= '1'; end if;"
set line_num 750; puts $output_file "			if rd_2_rd_counter      = RD_2_RD_CNT     - 2 then rd_2_rd_reached      <= '1'; end if;"
set line_num 751; puts $output_file "			if rd_2_wr_counter      = RD_2_WR_CNT     - 2 then rd_2_wr_reached      <= '1'; end if;"
set line_num 752; puts $output_file "			if wr_2_ref_counter     = WR_2_REF_CNT    - 2 then wr_2_ref_reached     <= '1'; end if;"
set line_num 753; puts $output_file "			if wr_2_act_counter     = WR_2_ACT_CNT    - 2 then wr_2_act_reached     <= '1'; end if;"
set line_num 754; puts $output_file "			if wr_2_pre_counter     = WR_2_PRE_CNT    - 2 then wr_2_pre_reached     <= '1'; end if;"
set line_num 755; puts $output_file "			if wr_2_rd_counter      = WR_2_RD_CNT     - 2 then wr_2_rd_reached      <= '1'; end if;"
set line_num 756; puts $output_file "			if wr_2_wr_counter      = WR_2_WR_CNT     - 2 then wr_2_wr_reached      <= '1'; end if;"
set line_num 757; puts $output_file "			-- command to ready"
set line_num 758; puts $output_file "			if ref_2_ready_counter  = REF_2_READY_CNT - 2 then ref_2_ready_reached  <= '1'; end if;"
set line_num 759; puts $output_file "			if act_2_ready_counter  = ACT_2_READY_CNT - 2 then act_2_ready_reached  <= '1'; end if;"
set line_num 760; puts $output_file "			if pre_2_ready_counter  = PRE_2_READY_CNT - 2 then pre_2_ready_reached  <= '1'; end if;"
set line_num 761; puts $output_file "			if rd_2_ready_counter   = RD_2_READY_CNT  - 2 then rd_2_ready_reached   <= '1'; end if;"
set line_num 762; puts $output_file "			if wr_2_ready_counter   = WR_2_READY_CNT  - 2 then wr_2_ready_reached   <= '1'; end if;"
set line_num 763; puts $output_file "			-- maximum time"
set line_num 764; puts $output_file "			if refreshmax_counter   = REFRESHMAX_CNT  - 2 then refreshmax_reached   <= '1'; end if;"
set line_num 765; puts $output_file "			if rowactivemax_counter = ROWACTIVEMAX_CNT- 2 then rowactivemax_reached <= '1'; end if;"
set line_num 766; puts $output_file ""
set line_num 767; puts $output_file "			--    #               #           "
set line_num 768; puts $output_file "			--                           #    "
set line_num 769; puts $output_file "			--                           #    "
set line_num 770; puts $output_file "			--  ###    ## ##    ###     ####  "
set line_num 771; puts $output_file "			--    #     ##  #     #      #    "
set line_num 772; puts $output_file "			--    #     #   #     #      #    "
set line_num 773; puts $output_file "			--    #     #   #     #      #    "
set line_num 774; puts $output_file "			--    #     #   #     #      #  # "
set line_num 775; puts $output_file "			--  #####  ### ###  #####     ##  "
set line_num 776; puts $output_file ""
set line_num 777; puts $output_file "			case init_state is"
set line_num 778; puts $output_file "				-- wait for full power up of the DIMM"
set line_num 779; puts $output_file "				when INIT_WAIT_POWER_UP => "
set line_num 780; puts $output_file "					-- wait for DDR power-up"
set line_num 781; puts $output_file "					if powerup_reached = '1' then"
set line_num 782; puts $output_file "						-- send a first NOP to the two ranks"
set line_num 783; puts $output_file "						ddr_cmd_init     <= CMD_NOP;"
set line_num 784; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 785; puts $output_file "						-- activate the clock"
set line_num 786; puts $output_file "						ddr_cke_init      <= CKE_ENABLED;"
set line_num 787; puts $output_file "						-- start the clklock counter"
set line_num 788; puts $output_file "						clklock_counter   <= X\"00\";"
set line_num 789; puts $output_file "						clklock_reached   <= '0';				"
set line_num 790; puts $output_file "						-- go to the next state"
set line_num 791; puts $output_file "						init_state       <= INIT_WAIT_01_COMMAND;"
set line_num 792; puts $output_file "					end if;"
set line_num 793; puts $output_file "				-- first precharge"
set line_num 794; puts $output_file "				when INIT_WAIT_01_COMMAND =>"
set line_num 795; puts $output_file "					-- wait 400ns for the first clock lock"
set line_num 796; puts $output_file "					if clklock_reached = '1' then"
set line_num 797; puts $output_file "						-- send a precharge all command"
set line_num 798; puts $output_file "						ddr_cmd_init     <= CMD_PRECHARGE;"
set line_num 799; puts $output_file "						ddr_address_init <= ADD_ALLBANKS;"
set line_num 800; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 801; puts $output_file "						-- start the t(RPA) counter"
set line_num 802; puts $output_file "						trpa_counter     <= X\"0\";"
set line_num 803; puts $output_file "						trpa_reached     <= '0';				"
set line_num 804; puts $output_file "						-- go to the next state"
set line_num 805; puts $output_file "						init_state       <= INIT_WAIT_02_COMMAND;"
set line_num 806; puts $output_file "					end if;"
set line_num 807; puts $output_file "				-- load EMR2"
set line_num 808; puts $output_file "				when INIT_WAIT_02_COMMAND =>"
set line_num 809; puts $output_file "					-- wait until last precharge all finished"
set line_num 810; puts $output_file "					if trpa_reached = '1' then"
set line_num 811; puts $output_file "						-- Load EMR2"
set line_num 812; puts $output_file "						ddr_cmd_init     <= CMD_MODESET;"
set line_num 813; puts $output_file "						ddr_address_init <= REG_EMR2;"
set line_num 814; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 815; puts $output_file "						ddr_ba_init      <= BA_EMR2;"
set line_num 816; puts $output_file "						-- start the t(MRD) counter"
set line_num 817; puts $output_file "						tmrd_counter     <= X\"0\";	"
set line_num 818; puts $output_file "						tmrd_reached     <= '0';			"
set line_num 819; puts $output_file "						-- go to the next state"
set line_num 820; puts $output_file "						init_state       <= INIT_WAIT_03_COMMAND;"
set line_num 821; puts $output_file "					end if;"
set line_num 822; puts $output_file "				-- load EMR3"
set line_num 823; puts $output_file "				when INIT_WAIT_03_COMMAND =>"
set line_num 824; puts $output_file "					-- wait until last modeset finished"
set line_num 825; puts $output_file "					if tmrd_reached = '1' then"
set line_num 826; puts $output_file "						-- Load EMR3"
set line_num 827; puts $output_file "						ddr_cmd_init     <= CMD_MODESET;"
set line_num 828; puts $output_file "						ddr_address_init <= REG_EMR3;"
set line_num 829; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 830; puts $output_file "						ddr_ba_init      <= BA_EMR3;"
set line_num 831; puts $output_file "						-- start the t(MRD) counter"
set line_num 832; puts $output_file "						tmrd_counter     <= X\"0\";"
set line_num 833; puts $output_file "						tmrd_reached     <= '0';"
set line_num 834; puts $output_file "						-- go to the next state"
set line_num 835; puts $output_file "						init_state       <= INIT_WAIT_04_COMMAND;"
set line_num 836; puts $output_file "					end if;"
set line_num 837; puts $output_file "				-- load EMR	to enable DLL			"
set line_num 838; puts $output_file "				when INIT_WAIT_04_COMMAND =>"
set line_num 839; puts $output_file "					-- wait until last modeset finished"
set line_num 840; puts $output_file "					if tmrd_reached = '1' then"
set line_num 841; puts $output_file "						-- Load EMR1 with OCD exit"
set line_num 842; puts $output_file "						ddr_cmd_init     <= CMD_MODESET;"
set line_num 843; puts $output_file "						ddr_address_init <= REG_EMR1_OCD_EXIT;"
set line_num 844; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 845; puts $output_file "						ddr_ba_init      <= BA_EMR1;"
set line_num 846; puts $output_file "						-- start the t(MRD) counter"
set line_num 847; puts $output_file "						tmrd_counter     <= X\"0\";"
set line_num 848; puts $output_file "						tmrd_reached     <= '0';			"
set line_num 849; puts $output_file "						-- go to the next state"
set line_num 850; puts $output_file "						init_state       <= INIT_WAIT_05_COMMAND;"
set line_num 851; puts $output_file "					end if;"
set line_num 852; puts $output_file "				-- load MR with DLL reset"
set line_num 853; puts $output_file "				when INIT_WAIT_05_COMMAND =>"
set line_num 854; puts $output_file "					-- wait until last modeset finished"
set line_num 855; puts $output_file "					if tmrd_reached = '1' then"
set line_num 856; puts $output_file "						-- Load MR with DLL reset"
set line_num 857; puts $output_file "						ddr_cmd_init     <= CMD_MODESET;"
set line_num 858; puts $output_file "						ddr_address_init <= REG_MR_DLL_RESET;"
set line_num 859; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 860; puts $output_file "						ddr_ba_init      <= BA_MR;"
set line_num 861; puts $output_file "						-- start the t(MRD) and the plllock counter"
set line_num 862; puts $output_file "						tmrd_counter     <= X\"0\";				"
set line_num 863; puts $output_file "						tmrd_reached     <= '0';			"
set line_num 864; puts $output_file "						plllock_counter  <= X\"00\";				"
set line_num 865; puts $output_file "						plllock_reached  <= '0';			"
set line_num 866; puts $output_file "						-- go to the next state"
set line_num 867; puts $output_file "						init_state       <= INIT_WAIT_06_COMMAND;"
set line_num 868; puts $output_file "					end if;"
set line_num 869; puts $output_file "				-- second precharge				"
set line_num 870; puts $output_file "				when INIT_WAIT_06_COMMAND =>"
set line_num 871; puts $output_file "					-- wait until last modeset finished"
set line_num 872; puts $output_file "					if tmrd_reached = '1' then"
set line_num 873; puts $output_file "						-- send a precharge all command"
set line_num 874; puts $output_file "						ddr_cmd_init     <= CMD_PRECHARGE;"
set line_num 875; puts $output_file "						ddr_address_init <= ADD_ALLBANKS;"
set line_num 876; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 877; puts $output_file "						-- start the t(RPA) counter"
set line_num 878; puts $output_file "						trpa_counter     <= X\"0\";"
set line_num 879; puts $output_file "						trpa_reached     <= '0';							"
set line_num 880; puts $output_file "						-- go to the next state"
set line_num 881; puts $output_file "						init_state       <= INIT_WAIT_07_COMMAND;"
set line_num 882; puts $output_file "					end if;"
set line_num 883; puts $output_file "				-- first refresh"
set line_num 884; puts $output_file "				when INIT_WAIT_07_COMMAND =>"
set line_num 885; puts $output_file "					-- wait until last precharge all finished"
set line_num 886; puts $output_file "					if trpa_reached = '1' then"
set line_num 887; puts $output_file "						-- issue a refresh"
set line_num 888; puts $output_file "						ddr_cmd_init     <= CMD_REFRESH;"
set line_num 889; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 890; puts $output_file "						-- start the t(RFC) counter"
set line_num 891; puts $output_file "						trfc_counter     <= X\"00\";"
set line_num 892; puts $output_file "						trfc_reached     <= '0';			"
set line_num 893; puts $output_file "						-- go to the next state"
set line_num 894; puts $output_file "						init_state       <= INIT_WAIT_08_COMMAND;"
set line_num 895; puts $output_file "					end if;"
set line_num 896; puts $output_file "				-- second refresh"
set line_num 897; puts $output_file "				when INIT_WAIT_08_COMMAND =>"
set line_num 898; puts $output_file "					-- wait until last refresh finished"
set line_num 899; puts $output_file "					if trfc_reached = '1' then"
set line_num 900; puts $output_file "						-- issue a refresh"
set line_num 901; puts $output_file "						ddr_cmd_init     <= CMD_REFRESH;"
set line_num 902; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 903; puts $output_file "						-- start the t(RFC) counter"
set line_num 904; puts $output_file "						trfc_counter     <= X\"00\";"
set line_num 905; puts $output_file "						trfc_reached     <= '0';			"
set line_num 906; puts $output_file "						-- go to the next state"
set line_num 907; puts $output_file "						init_state       <= INIT_WAIT_09_COMMAND;"
set line_num 908; puts $output_file "					end if;"
set line_num 909; puts $output_file "				-- load MR without DLL reset"
set line_num 910; puts $output_file "				when INIT_WAIT_09_COMMAND =>"
set line_num 911; puts $output_file "					-- wait until last refresh finished"
set line_num 912; puts $output_file "					if trfc_reached = '1' then"
set line_num 913; puts $output_file "						-- Load MR without DLL reset"
set line_num 914; puts $output_file "						ddr_cmd_init     <= CMD_MODESET;"
set line_num 915; puts $output_file "						ddr_address_init <= REG_MR;"
set line_num 916; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 917; puts $output_file "						ddr_ba_init      <= BA_MR;"
set line_num 918; puts $output_file "						-- start the t(MRD) counter"
set line_num 919; puts $output_file "						tmrd_counter     <= X\"0\";"
set line_num 920; puts $output_file "						tmrd_reached     <= '0';							"
set line_num 921; puts $output_file "						-- go to the next state"
set line_num 922; puts $output_file "						init_state       <= INIT_WAIT_10_COMMAND;"
set line_num 923; puts $output_file "					end if;"
set line_num 924; puts $output_file "				-- load EMR1 with OCD default"
set line_num 925; puts $output_file "				when INIT_WAIT_10_COMMAND =>"
set line_num 926; puts $output_file "					-- wait until last modeset finished"
set line_num 927; puts $output_file "					if tmrd_reached = '1' then"
set line_num 928; puts $output_file "						-- Load EMR1 with OCD default"
set line_num 929; puts $output_file "						ddr_cmd_init     <= CMD_MODESET;"
set line_num 930; puts $output_file "						ddr_address_init <= REG_EMR1_OCD_DEF;"
set line_num 931; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 932; puts $output_file "						ddr_ba_init      <= BA_EMR1;"
set line_num 933; puts $output_file "						-- start the t(MRD) counter"
set line_num 934; puts $output_file "						tmrd_counter     <= X\"0\";"
set line_num 935; puts $output_file "						tmrd_reached     <= '0';							"
set line_num 936; puts $output_file "						-- go to the next state"
set line_num 937; puts $output_file "						init_state       <= INIT_WAIT_11_COMMAND;"
set line_num 938; puts $output_file "					end if;"
set line_num 939; puts $output_file "				-- load EMR1 with OCD exit"
set line_num 940; puts $output_file "				when INIT_WAIT_11_COMMAND =>"
set line_num 941; puts $output_file "					-- wait until last modeset finished"
set line_num 942; puts $output_file "					if tmrd_reached = '1' then"
set line_num 943; puts $output_file "						-- Load EMR1 with OCD exit"
set line_num 944; puts $output_file "						ddr_cmd_init     <= CMD_MODESET;"
set line_num 945; puts $output_file "						ddr_address_init <= REG_EMR1_OCD_EXIT;"
set line_num 946; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 947; puts $output_file "						ddr_ba_init      <= BA_EMR1;"
set line_num 948; puts $output_file "						-- start the t(MRD) counter"
set line_num 949; puts $output_file "						tmrd_counter     <= X\"0\";"
set line_num 950; puts $output_file "						tmrd_reached     <= '0';							"
set line_num 951; puts $output_file "						-- go to the next state"
set line_num 952; puts $output_file "						init_state       <= INIT_WAIT_12_COMMAND;"
set line_num 953; puts $output_file "					end if;"
set line_num 954; puts $output_file "				-- issue a NOP"
set line_num 955; puts $output_file "				when INIT_WAIT_12_COMMAND =>"
set line_num 956; puts $output_file "					-- wait until last modeset finished"
set line_num 957; puts $output_file "					if tmrd_reached = '1' then"
set line_num 958; puts $output_file "						-- Load EMR1 with OCD exit"
set line_num 959; puts $output_file "						ddr_cmd_init     <= CMD_NOP;"
set line_num 960; puts $output_file "						ddr_csb_init     <= CSB_BOTH;"
set line_num 961; puts $output_file "						-- go to the next state"
set line_num 962; puts $output_file "						init_state       <= INIT_WAIT_COMPLETION;"
set line_num 963; puts $output_file "					end if;"
set line_num 964; puts $output_file "				-- wait until the PLL is locked to start normal operation"
set line_num 965; puts $output_file "				when INIT_WAIT_COMPLETION =>"
set line_num 966; puts $output_file "					-- wait until the pll locked"
set line_num 967; puts $output_file "					if plllock_reached = '1' then"
set line_num 968; puts $output_file "						-- go to idle state and launches a first auto refresh"
set line_num 969; puts $output_file "						init_state       <= INIT_COMPLETE;"
set line_num 970; puts $output_file "						init_done        <= '1';"
set line_num 971; puts $output_file "						do_auto_refresh  <= '1';"
set line_num 972; puts $output_file "						-- enable ODT"
set line_num 973; puts $output_file "						ddr_odt_int      <= ODT_BOTH;"
set line_num 974; puts $output_file "					end if;"
set line_num 975; puts $output_file ""
set line_num 976; puts $output_file "				when INIT_COMPLETE =>"
set line_num 977; puts $output_file ""
set line_num 978; puts $output_file "				when others =>"
set line_num 979; puts $output_file "			end case;"
set line_num 980; puts $output_file ""
set line_num 981; puts $output_file "			if init_done_delay = '1' then"
set line_num 982; puts $output_file "	"
set line_num 983; puts $output_file "	"
set line_num 984; puts $output_file "				--                             ## "
set line_num 985; puts $output_file "				--                              # "
set line_num 986; puts $output_file "				--                              # "
set line_num 987; puts $output_file "				-- ### ##   #####   ####    ##### "
set line_num 988; puts $output_file "				--   ##  # #     #      #  #    # "
set line_num 989; puts $output_file "				--   #     #######  #####  #    # "
set line_num 990; puts $output_file "				--   #     #       #    #  #    # "
set line_num 991; puts $output_file "				--   #     #     # #    #  #    # "
set line_num 992; puts $output_file "				-- #####    #####   #### #  ######"
set line_num 993; puts $output_file "	"
set line_num 994; puts $output_file "				-- we issue a read command in the following cases:"
set line_num 995; puts $output_file "				--   * a READ request is issued and a bank is opened and there is no write request on the same cycle"
set line_num 996; puts $output_file "	"
set line_num 997; puts $output_file "				if "
set line_num 998; puts $output_file "					-- timming check"
set line_num 999; puts $output_file "					("
set line_num 1000; puts $output_file "						-- ref_2_rd_reached = '1' -- FORBIDDEN"
set line_num 1001; puts $output_file "						act_2_rd_reached = '1' and"
set line_num 1002; puts $output_file "						-- pre_2_rd_reached = '1' -- FORBIDDEN"
set line_num 1003; puts $output_file "						-- we cannot trust the counters if the last command was a read or a write (they could be aborted), so in this case we do nothing"
set line_num 1004; puts $output_file "						(rd_2_rd_reached  = '1' and last_was_read  = '0') and"
set line_num 1005; puts $output_file "						(wr_2_rd_reached  = '1' and last_was_write = '0')"
set line_num 1006; puts $output_file "					) and"
set line_num 1007; puts $output_file "					-- issue condition"
set line_num 1008; puts $output_file "					("
set line_num 1009; puts $output_file "						latch_read       = '1' and"
set line_num 1010; puts $output_file "						bank_is_opened   = '1' and"
set line_num 1011; puts $output_file "						(address_conflict = '0' or user_ready_int = '1') and"
set line_num 1012; puts $output_file "						latch_write      = '0'"
set line_num 1013; puts $output_file "					)"
set line_num 1014; puts $output_file "				then"
set line_num 1015; puts $output_file "					-- send a read command"
set line_num 1016; puts $output_file "					ddr_cmd          <= CMD_READ;"
set line_num 1017; puts $output_file "					ddr_address_int  <= ADD_PADZEROS & '0' & latch_col_address;"
set line_num 1018; puts $output_file "					ddr_ba_int       <= latch_bank_address;"
set line_num 1019; puts $output_file "					ddr_csb_int      <= latch_csb;"
set line_num 1020; puts $output_file "					-- enable receive circuitry during two cycles"
set line_num 1021; puts $output_file "					receive_enable      <= '1';"
set line_num 1022; puts $output_file "					receive_enable_next <= '1';"
set line_num 1023; puts $output_file "					-- signal the read"
set line_num 1024; puts $output_file "					last_was_read       <= '1';"
set line_num 1025; puts $output_file "				end if;"
set line_num 1026; puts $output_file "                    "
set line_num 1027; puts $output_file "				-- Read abort logic"
set line_num 1028; puts $output_file "				-- we abort the previous read in the following cases:"
set line_num 1029; puts $output_file "				--   * A read was issued on the previous cycle and there is an address conflict"
set line_num 1030; puts $output_file ""
set line_num 1031; puts $output_file "				if abort_read = '1' then"
set line_num 1032; puts $output_file "					-- disable the receive circuitry during two cycles"
set line_num 1033; puts $output_file "					receive_enable        <= '0';"
set line_num 1034; puts $output_file "					receive_enable_delay1 <= '0';"
set line_num 1035; puts $output_file "					receive_enable_next   <= '0';"
set line_num 1036; puts $output_file "				end if;"
set line_num 1037; puts $output_file ""
set line_num 1038; puts $output_file "				if valid_read = '1' then"
set line_num 1039; puts $output_file "					-- start the timming counters now that we know that the read was valid"
set line_num 1040; puts $output_file "					rd_2_ref_counter    <= X\"1\";"
set line_num 1041; puts $output_file "					rd_2_act_counter    <= X\"1\";"
set line_num 1042; puts $output_file "					rd_2_pre_counter    <= X\"1\";"
set line_num 1043; puts $output_file "					rd_2_rd_counter     <= X\"1\";"
set line_num 1044; puts $output_file "					rd_2_wr_counter     <= X\"1\";"
set line_num 1045; puts $output_file "					rd_2_ready_counter  <= X\"1\";"
set line_num 1046; puts $output_file "					if RD_2_REF_CNT   = 2 then rd_2_ref_reached   <= '1'; else rd_2_ref_reached   <= '0'; end if;"
set line_num 1047; puts $output_file "					if RD_2_ACT_CNT   = 2 then rd_2_act_reached   <= '1'; else rd_2_act_reached   <= '0'; end if;"
set line_num 1048; puts $output_file "					if RD_2_PRE_CNT   = 2 then rd_2_pre_reached   <= '1'; else rd_2_pre_reached   <= '0'; end if;"
set line_num 1049; puts $output_file "					if RD_2_RD_CNT    = 2 then rd_2_rd_reached    <= '1'; else rd_2_rd_reached    <= '0'; end if;"
set line_num 1050; puts $output_file "					if RD_2_WR_CNT    = 2 then rd_2_wr_reached    <= '1'; else rd_2_wr_reached    <= '0'; end if;"
set line_num 1051; puts $output_file "					if RD_2_READY_CNT = 2 then rd_2_ready_reached <= '1'; else rd_2_ready_reached <= '0'; end if;"
set line_num 1052; puts $output_file "				end if;"
set line_num 1053; puts $output_file ""
set line_num 1054; puts $output_file "				--                    #                   "
set line_num 1055; puts $output_file "				--                           #            "
set line_num 1056; puts $output_file "				--                           #            "
set line_num 1057; puts $output_file "				-- ### ### ### ##   ###     ####    ##### "
set line_num 1058; puts $output_file "				--  #   #    ##  #    #      #     #     #"
set line_num 1059; puts $output_file "				--  # # #    #        #      #     #######"
set line_num 1060; puts $output_file "				--  # # #    #        #      #     #      "
set line_num 1061; puts $output_file "				--   # #     #        #      #  #  #     #"
set line_num 1062; puts $output_file "				--   # #   #####    #####     ##    ##### "
set line_num 1063; puts $output_file "	"
set line_num 1064; puts $output_file "				-- we issue a write command in the following cases:"
set line_num 1065; puts $output_file "				--   * a WRITE request is issued and a bank is opened and there is no write request on the same cycle"
set line_num 1066; puts $output_file "	"
set line_num 1067; puts $output_file "				if "
set line_num 1068; puts $output_file "					-- timming check"
set line_num 1069; puts $output_file "					("
set line_num 1070; puts $output_file "						-- ref_2_wr_reached = '1' -- FORBIDDEN"
set line_num 1071; puts $output_file "						act_2_wr_reached = '1' and"
set line_num 1072; puts $output_file "						-- pre_2_wr_reached = '1 -- FORBIDDEN"
set line_num 1073; puts $output_file "						-- we cannot trust the counters if the last command was a read or a write (they could be aborted), so in this case we do nothing"
set line_num 1074; puts $output_file "						(rd_2_wr_reached  = '1' and last_was_read  = '0') and"
set line_num 1075; puts $output_file "						(wr_2_wr_reached  = '1' and last_was_write = '0')"
set line_num 1076; puts $output_file "					) and"
set line_num 1077; puts $output_file "					-- issue condition"
set line_num 1078; puts $output_file "					("
set line_num 1079; puts $output_file "						latch_write      = '1' and"
set line_num 1080; puts $output_file "						bank_is_opened   = '1' and"
set line_num 1081; puts $output_file "						(address_conflict = '0' or user_ready_int = '1') and"
set line_num 1082; puts $output_file "						latch_read       = '0'"
set line_num 1083; puts $output_file "					)"
set line_num 1084; puts $output_file "				then"
set line_num 1085; puts $output_file "					-- send a write command"
set line_num 1086; puts $output_file "					ddr_cmd          <= CMD_WRITE;"
set line_num 1087; puts $output_file "					ddr_address_int  <= ADD_PADZEROS & '0' & latch_col_address;"
set line_num 1088; puts $output_file "					ddr_ba_int       <= latch_bank_address;"
set line_num 1089; puts $output_file "					ddr_csb_int      <= latch_csb;"
set line_num 1090; puts $output_file "					-- request data on two cycles if the pipeline is empty, on only one cycle otherwise"
set line_num 1091; puts $output_file "					if pipeline_not_empty = '1' then"
set line_num 1092; puts $output_file "						user_get_data_int      <= '0';"
set line_num 1093; puts $output_file "						user_get_data_next     <= '1';"
set line_num 1094; puts $output_file "						pipeline_not_empty     <= '0';"
set line_num 1095; puts $output_file "					else"
set line_num 1096; puts $output_file "						user_get_data_int      <= '1';"
set line_num 1097; puts $output_file "						user_get_data_next     <= '1';"
set line_num 1098; puts $output_file "					end if;"
set line_num 1099; puts $output_file "					-- enable data write on two cycles"
set line_num 1100; puts $output_file "					write_enable_delay1    <= '1';"
set line_num 1101; puts $output_file "					write_enable_delay2    <= '1';"
set line_num 1102; puts $output_file "					-- signal the write"
set line_num 1103; puts $output_file "					last_was_write         <= '1';"
set line_num 1104; puts $output_file "				end if;"
set line_num 1105; puts $output_file ""
set line_num 1106; puts $output_file "				-- Write abort logic"
set line_num 1107; puts $output_file "				-- we abort the previous write in the following cases:"
set line_num 1108; puts $output_file "				--   * A write was issued on the previous cycle and there is an address conflict"
set line_num 1109; puts $output_file ""
set line_num 1110; puts $output_file "				if abort_write = '1' then"
set line_num 1111; puts $output_file "					-- disable the write pipeline"
set line_num 1112; puts $output_file "					user_get_data_int     <= '0';"
set line_num 1113; puts $output_file "					-- data write"
set line_num 1114; puts $output_file "					write_enable_delay2   <= '0';"
set line_num 1115; puts $output_file "					write_enable_int      <= '0';"
set line_num 1116; puts $output_file "					-- signal that we have one word waiting in the pipeline"
set line_num 1117; puts $output_file "					pipeline_not_empty    <= '1';"
set line_num 1118; puts $output_file "				end if;"
set line_num 1119; puts $output_file ""
set line_num 1120; puts $output_file "				if valid_write = '1' then"
set line_num 1121; puts $output_file "					-- start the timming counters now that we know that the write was valid"
set line_num 1122; puts $output_file "					wr_2_ref_counter    <= X\"1\";"
set line_num 1123; puts $output_file "					wr_2_act_counter    <= X\"1\";"
set line_num 1124; puts $output_file "					wr_2_pre_counter    <= X\"1\";"
set line_num 1125; puts $output_file "					wr_2_rd_counter     <= X\"1\";"
set line_num 1126; puts $output_file "					wr_2_wr_counter     <= X\"1\";"
set line_num 1127; puts $output_file "					wr_2_ready_counter  <= X\"1\";"
set line_num 1128; puts $output_file "					if WR_2_REF_CNT   = 2 then wr_2_ref_reached   <= '1'; else wr_2_ref_reached   <= '0'; end if;"
set line_num 1129; puts $output_file "					if WR_2_ACT_CNT   = 2 then wr_2_act_reached   <= '1'; else wr_2_act_reached   <= '0'; end if;"
set line_num 1130; puts $output_file "					if WR_2_PRE_CNT   = 2 then wr_2_pre_reached   <= '1'; else wr_2_pre_reached   <= '0'; end if;"
set line_num 1131; puts $output_file "					if WR_2_RD_CNT    = 2 then wr_2_rd_reached    <= '1'; else wr_2_rd_reached    <= '0'; end if;"
set line_num 1132; puts $output_file "					if WR_2_WR_CNT    = 2 then wr_2_wr_reached    <= '1'; else wr_2_wr_reached    <= '0'; end if;"
set line_num 1133; puts $output_file "					if WR_2_READY_CNT = 2 then wr_2_ready_reached <= '1'; else wr_2_ready_reached <= '0'; end if;"
set line_num 1134; puts $output_file "				end if;"
set line_num 1135; puts $output_file ""
set line_num 1136; puts $output_file "				--                                 ##                                     "
set line_num 1137; puts $output_file "				--                                  #                                     "
set line_num 1138; puts $output_file "				--                                  #                                     "
set line_num 1139; puts $output_file "				-- ######  ### ##   #####   #####   # ##    ####   ### ##   ######  ##### "
set line_num 1140; puts $output_file "				--  #    #   ##  # #     # #     #  ##  #       #    ##  # #    #  #     #"
set line_num 1141; puts $output_file "				--  #    #   #     ####### #        #   #   #####    #     #    #  #######"
set line_num 1142; puts $output_file "				--  #    #   #     #       #        #   #  #    #    #     #    #  #      "
set line_num 1143; puts $output_file "				--  #    #   #     #     # #     #  #   #  #    #    #      #####  #     #"
set line_num 1144; puts $output_file "				--  #####  #####    #####   #####  ### ###  #### # #####        #   ##### "
set line_num 1145; puts $output_file "				--  #                                                           #         "
set line_num 1146; puts $output_file "				-- ###                                                      ####          "
set line_num 1147; puts $output_file "	    "
set line_num 1148; puts $output_file "				-- we need to precharge in the following cases:"
set line_num 1149; puts $output_file "				--   * a READ  request is issued whith an address conflict on an opened bank"
set line_num 1150; puts $output_file "				--   * a WRITE request is issued whith an address conflict or an opened bank"
set line_num 1151; puts $output_file "				--   * a refresh has to be issued but a bank is opened"
set line_num 1152; puts $output_file "				--   * a row has been opened for too long and needs to be closed	"
set line_num 1153; puts $output_file ""
set line_num 1154; puts $output_file "				if "
set line_num 1155; puts $output_file "					-- timming check"
set line_num 1156; puts $output_file "					("
set line_num 1157; puts $output_file "						-- ref_2_pre_reached = '1' -- FORBIDDEN"
set line_num 1158; puts $output_file "						act_2_pre_reached = '1' and"
set line_num 1159; puts $output_file "						-- pre_2_pre_reached = '1' -- FORBIDDEN"
set line_num 1160; puts $output_file "						-- we cannot trust the counters if the last command was a read or a write (they could be aborted), so in this case we do nothing"
set line_num 1161; puts $output_file "						(rd_2_pre_reached  = '1' and last_was_read  = '0') and"
set line_num 1162; puts $output_file "						(wr_2_pre_reached  = '1' and last_was_write = '0')"
set line_num 1163; puts $output_file "					) and"
set line_num 1164; puts $output_file "					-- issue condition"
set line_num 1165; puts $output_file "					bank_is_opened = '1' and"
set line_num 1166; puts $output_file "					("
set line_num 1167; puts $output_file "						(latch_read  = '1' and address_conflict = '1' and user_ready_int = '0') or"
set line_num 1168; puts $output_file "						(latch_write = '1' and address_conflict = '1' and user_ready_int = '0') or"
set line_num 1169; puts $output_file "						(do_auto_refresh = '1') or"
set line_num 1170; puts $output_file "						(do_auto_rowclose = '1')"
set line_num 1171; puts $output_file "					)"
set line_num 1172; puts $output_file "				then"
set line_num 1173; puts $output_file "					-- send a precharge command"
set line_num 1174; puts $output_file "					ddr_cmd          <= CMD_PRECHARGE;"
set line_num 1175; puts $output_file "					ddr_address_int  <= ADD_SINGLEBANK;"
set line_num 1176; puts $output_file "					ddr_ba_int       <= opened_bank;"
set line_num 1177; puts $output_file "					ddr_csb_int      <= opened_csb;"
set line_num 1178; puts $output_file "					-- start the timming counters"
set line_num 1179; puts $output_file "					pre_2_ref_counter    <= X\"0\";"
set line_num 1180; puts $output_file "					pre_2_act_counter    <= X\"0\";"
set line_num 1181; puts $output_file "					pre_2_pre_counter    <= X\"0\";"
set line_num 1182; puts $output_file "					pre_2_rd_counter     <= X\"0\";"
set line_num 1183; puts $output_file "					pre_2_wr_counter     <= X\"0\";"
set line_num 1184; puts $output_file "					pre_2_ready_counter  <= X\"0\";"
set line_num 1185; puts $output_file "					pre_2_ref_reached    <= '0';"
set line_num 1186; puts $output_file "					pre_2_act_reached    <= '0';"
set line_num 1187; puts $output_file "					pre_2_pre_reached    <= '0';"
set line_num 1188; puts $output_file "					pre_2_rd_reached     <= '0';"
set line_num 1189; puts $output_file "					pre_2_wr_reached     <= '0';"
set line_num 1190; puts $output_file "					pre_2_ready_reached  <= '0';"
set line_num 1191; puts $output_file "					-- signal that the bank is closed"
set line_num 1192; puts $output_file "					bank_is_opened       <= '0';	"
set line_num 1193; puts $output_file "					-- signal the precharge"
set line_num 1194; puts $output_file "					last_was_precharge   <= '1';"
set line_num 1195; puts $output_file "				end if;"
set line_num 1196; puts $output_file "	                                                "
set line_num 1197; puts $output_file "				--                            #                   "
set line_num 1198; puts $output_file "				--                   #                            "
set line_num 1199; puts $output_file "				--                   #                            "
set line_num 1200; puts $output_file "				--  ####    #####   ####    ###    ### ###  ##### "
set line_num 1201; puts $output_file "				--      #  #     #   #        #     #   #  #     #"
set line_num 1202; puts $output_file "				--  #####  #         #        #     #   #  #######"
set line_num 1203; puts $output_file "				-- #    #  #         #        #      # #   #      "
set line_num 1204; puts $output_file "				-- #    #  #     #   #  #     #      # #   #     #"
set line_num 1205; puts $output_file "				--  #### #  #####     ##    #####     #     ##### "
set line_num 1206; puts $output_file "	"
set line_num 1207; puts $output_file "				-- we need to activate in the following cases:"
set line_num 1208; puts $output_file "				--   * a READ  request is issued on a closed bank"
set line_num 1209; puts $output_file "				--   * a WRITE request is issued on a closed bank"
set line_num 1210; puts $output_file "	"
set line_num 1211; puts $output_file "				if "
set line_num 1212; puts $output_file "					-- timming check"
set line_num 1213; puts $output_file "					("
set line_num 1214; puts $output_file "						ref_2_act_reached = '1' and"
set line_num 1215; puts $output_file "						-- act_2_act_reached = '1' and -- FORBIDDEN"
set line_num 1216; puts $output_file "						pre_2_act_reached = '1'"
set line_num 1217; puts $output_file "						-- rd_2_act_reached  = '1' -- FORBIDDEN"
set line_num 1218; puts $output_file "						-- wr_2_act_reached  = '1' -- FORBIDDEN"
set line_num 1219; puts $output_file "					) and"
set line_num 1220; puts $output_file "					-- issue condition"
set line_num 1221; puts $output_file "					bank_is_opened = '0' and"
set line_num 1222; puts $output_file "					("
set line_num 1223; puts $output_file "						(latch_read  = '1') or"
set line_num 1224; puts $output_file "						(latch_write = '1')"
set line_num 1225; puts $output_file "					)"
set line_num 1226; puts $output_file "				then"
set line_num 1227; puts $output_file "					-- send an activate command"
set line_num 1228; puts $output_file "					ddr_cmd          <= CMD_ACTIVE;"
set line_num 1229; puts $output_file "					ddr_address_int  <= latch_row_address;"
set line_num 1230; puts $output_file "					ddr_ba_int       <= latch_bank_address;"
set line_num 1231; puts $output_file "					ddr_csb_int      <= latch_csb;"
set line_num 1232; puts $output_file "					-- start the timming counters"
set line_num 1233; puts $output_file "					act_2_ref_counter    <= X\"0\";"
set line_num 1234; puts $output_file "					act_2_act_counter    <= X\"0\";"
set line_num 1235; puts $output_file "					act_2_pre_counter    <= X\"0\";"
set line_num 1236; puts $output_file "					act_2_rd_counter     <= X\"0\";"
set line_num 1237; puts $output_file "					act_2_wr_counter     <= X\"0\";"
set line_num 1238; puts $output_file "					act_2_ready_counter  <= X\"0\";"
set line_num 1239; puts $output_file "					rowactivemax_counter <= X\"0000\";"
set line_num 1240; puts $output_file "					act_2_ref_reached    <= '0';"
set line_num 1241; puts $output_file "					act_2_act_reached    <= '0';"
set line_num 1242; puts $output_file "					act_2_pre_reached    <= '0';"
set line_num 1243; puts $output_file "					act_2_rd_reached     <= '0';"
set line_num 1244; puts $output_file "					act_2_wr_reached     <= '0';"
set line_num 1245; puts $output_file "					act_2_ready_reached  <= '0';"
set line_num 1246; puts $output_file "					rowactivemax_reached <= '0';"
set line_num 1247; puts $output_file "					-- signal that the bank is opened"
set line_num 1248; puts $output_file "					bank_is_opened <= '1';"
set line_num 1249; puts $output_file "					-- latches the addresses for the opened bank"
set line_num 1250; puts $output_file "					opened_row   <= latch_row_address;"
set line_num 1251; puts $output_file "					opened_bank  <= latch_bank_address;"
set line_num 1252; puts $output_file "					opened_rank  <= latch_rank_address;"
set line_num 1253; puts $output_file "					-- signal that the address conflict has been solved"
set line_num 1254; puts $output_file "					address_conflict <= '0';"
set line_num 1255; puts $output_file "					-- signal the active"
set line_num 1256; puts $output_file "					last_was_active  <= '1';"
set line_num 1257; puts $output_file "				end if;"
set line_num 1258; puts $output_file "	"
set line_num 1259; puts $output_file "	"
set line_num 1260; puts $output_file "				--                    ##                           ##     "
set line_num 1261; puts $output_file "				--                   #                              #     "
set line_num 1262; puts $output_file "				--                   #                              #     "
set line_num 1263; puts $output_file "				-- ### ##   #####   ####   ### ##   #####   #####   # ##  "
set line_num 1264; puts $output_file "				--   ##  # #     #   #       ##  # #     # #     #  ##  # "
set line_num 1265; puts $output_file "				--   #     #######   #       #     #######  ###     #   # "
set line_num 1266; puts $output_file "				--   #     #         #       #     #           ##   #   # "
set line_num 1267; puts $output_file "				--   #     #     #   #       #     #     # #     #  #   # "
set line_num 1268; puts $output_file "				-- #####    #####   ####   #####    #####   #####  ### ###"
set line_num 1269; puts $output_file "	"
set line_num 1270; puts $output_file "				-- we need to refresh in the following cases:"
set line_num 1271; puts $output_file "				--   * the refresh controller is requesting a refresh, the bank is opened and there is no read or write going on"
set line_num 1272; puts $output_file "	"
set line_num 1273; puts $output_file "				if"
set line_num 1274; puts $output_file "					-- timming check"
set line_num 1275; puts $output_file "					("
set line_num 1276; puts $output_file "						ref_2_ref_reached = '1' and"
set line_num 1277; puts $output_file "						-- act_2_ref_reached = '1' -- FORBIDDEN"
set line_num 1278; puts $output_file "						pre_2_ref_reached = '1'"
set line_num 1279; puts $output_file "						-- rd_2_ref_reached  = '1' -- FORBIDDEN"
set line_num 1280; puts $output_file "						-- wr_2_ref_reached  = '1' -- FORBIDDEN"
set line_num 1281; puts $output_file "					) and"
set line_num 1282; puts $output_file "					-- issue condition"
set line_num 1283; puts $output_file "					("
set line_num 1284; puts $output_file "						(do_auto_refresh = '1' and bank_is_opened = '0')"
set line_num 1285; puts $output_file "					)"
set line_num 1286; puts $output_file "				then"
set line_num 1287; puts $output_file "					ddr_cmd     <= CMD_REFRESH;"
set line_num 1288; puts $output_file "					ddr_csb_int <= CSB_BOTH;"
set line_num 1289; puts $output_file "					-- start the timming counters"
set line_num 1290; puts $output_file "					ref_2_ref_counter    <= X\"00\";"
set line_num 1291; puts $output_file "					ref_2_act_counter    <= X\"00\";"
set line_num 1292; puts $output_file "					ref_2_pre_counter    <= X\"00\";"
set line_num 1293; puts $output_file "					ref_2_rd_counter     <= X\"00\";"
set line_num 1294; puts $output_file "					ref_2_wr_counter     <= X\"00\";"
set line_num 1295; puts $output_file "					ref_2_ready_counter  <= X\"00\";"
set line_num 1296; puts $output_file "					refreshmax_counter   <= X\"0000\";"
set line_num 1297; puts $output_file "					ref_2_ref_reached    <= '0';"
set line_num 1298; puts $output_file "					ref_2_act_reached    <= '0';"
set line_num 1299; puts $output_file "					ref_2_pre_reached    <= '0';"
set line_num 1300; puts $output_file "					ref_2_rd_reached     <= '0';"
set line_num 1301; puts $output_file "					ref_2_wr_reached     <= '0';"
set line_num 1302; puts $output_file "					ref_2_ready_reached  <= '0';"
set line_num 1303; puts $output_file "					refreshmax_reached   <= '0';"
set line_num 1304; puts $output_file "					-- signal the refresh"
set line_num 1305; puts $output_file "					last_was_refresh     <= '1';"
set line_num 1306; puts $output_file "				end if;"
set line_num 1307; puts $output_file "			end if;	"
set line_num 1308; puts $output_file ""
set line_num 1309; puts $output_file ""
set line_num 1310; puts $output_file "			--                             ##         "
set line_num 1311; puts $output_file "			--                              #         "
set line_num 1312; puts $output_file "			--                              #         "
set line_num 1313; puts $output_file "			-- ### ##   #####   ####    #####  ### ###"
set line_num 1314; puts $output_file "			--   ##  # #     #      #  #    #   #   # "
set line_num 1315; puts $output_file "			--   #     #######  #####  #    #   #   # "
set line_num 1316; puts $output_file "			--   #     #       #    #  #    #    # #  "
set line_num 1317; puts $output_file "			--   #     #     # #    #  #    #    # #  "
set line_num 1318; puts $output_file "			-- #####    #####   #### #  ######    #   "
set line_num 1319; puts $output_file "			--                                    #   "
set line_num 1320; puts $output_file "			--                                  ##    "
set line_num 1321; puts $output_file ""
set line_num 1322; puts $output_file "			-- take the ready bit down if we got a command to execute"
set line_num 1323; puts $output_file "			if ("
set line_num 1324; puts $output_file "					(user_ready_int = '1' and"
set line_num 1325; puts $output_file "					( user_write = '1' or user_read = '1'))"
set line_num 1326; puts $output_file "				)"
set line_num 1327; puts $output_file "			then"
set line_num 1328; puts $output_file "				-- disable the ready bit"
set line_num 1329; puts $output_file "				user_ready_int <= '0';"
set line_num 1330; puts $output_file "				user_ready     <= '0';"
set line_num 1331; puts $output_file "			end if;"
set line_num 1332; puts $output_file "			-- when a transaction is over or when we are idle, evaluate what to do next"
set line_num 1333; puts $output_file "			if	("
set line_num 1334; puts $output_file "					-- a refresh is about to complete"
set line_num 1335; puts $output_file "					(ref_2_ready_counter = (REF_2_READY_CNT - 2) and do_auto_refresh = '1') or"
set line_num 1336; puts $output_file "					-- a read is about to complete"
set line_num 1337; puts $output_file "					(valid_read = '1' and latch_read = '1') or"
set line_num 1338; puts $output_file "					-- a write is about to complete"
set line_num 1339; puts $output_file "					(valid_write = '1' and latch_write = '1') or"
set line_num 1340; puts $output_file "					-- an automatic row close is about to complete"
set line_num 1341; puts $output_file "					(pre_2_ready_counter = (PRE_2_READY_CNT - 2) and do_auto_rowclose = '1') or"
set line_num 1342; puts $output_file "					-- no command was sent previsously"
set line_num 1343; puts $output_file "					(user_ready_int = '1' and latch_read = '0' and latch_write = '0')"
set line_num 1344; puts $output_file "				)"
set line_num 1345; puts $output_file "			then"
set line_num 1346; puts $output_file "				-- deassert the command signals"
set line_num 1347; puts $output_file "				do_auto_refresh  <= '0';"
set line_num 1348; puts $output_file "				do_auto_rowclose <= '0';"
set line_num 1349; puts $output_file "				reg_read         <= '0';"
set line_num 1350; puts $output_file "				reg_write        <= '0';"
set line_num 1351; puts $output_file "				-- by default we request a new command"
set line_num 1352; puts $output_file "				user_ready_int   <= '1';"
set line_num 1353; puts $output_file "				user_ready       <= '1';"
set line_num 1354; puts $output_file "				-- if a refresh is needed, we execute it and we don't assert ready"
set line_num 1355; puts $output_file "				if auto_refresh = '1' then"
set line_num 1356; puts $output_file "					do_auto_refresh <= '1';"
set line_num 1357; puts $output_file "					user_ready_int  <= '0';"
set line_num 1358; puts $output_file "					user_ready      <= '0';"
set line_num 1359; puts $output_file "				end if;"
set line_num 1360; puts $output_file "				-- if a row close is needed and there is no refresh to do, we execute it and we don't assert ready"
set line_num 1361; puts $output_file "				if auto_rowclose = '1' and auto_refresh = '0' then"
set line_num 1362; puts $output_file "					do_auto_rowclose <= '1';"
set line_num 1363; puts $output_file "					user_ready_int   <= '0';"
set line_num 1364; puts $output_file "					user_ready       <= '0';"
set line_num 1365; puts $output_file "				end if;"
set line_num 1366; puts $output_file "			end if;"
set line_num 1367; puts $output_file ""
set line_num 1368; puts $output_file "			-- if we are in init then use the init commands"
set line_num 1369; puts $output_file "			if init_done = '0' then"
set line_num 1370; puts $output_file "				ddr_csb_int       <= ddr_csb_init;"
set line_num 1371; puts $output_file "				ddr_cmd           <= ddr_cmd_init;"
set line_num 1372; puts $output_file "				ddr_address_int   <= ddr_address_init;"
set line_num 1373; puts $output_file "				ddr_ba_int        <= ddr_ba_init;"
set line_num 1374; puts $output_file "				ddr_cke_int       <= ddr_cke_init;"
set line_num 1375; puts $output_file "			end if;"
set line_num 1376; puts $output_file ""
set line_num 1377; puts $output_file "		end if;"
set line_num 1378; puts $output_file "	end if;"
set line_num 1379; puts $output_file "end process controller_fsm;"
set line_num 1380; puts $output_file ""
set line_num 1381; puts $output_file "-- abort signals"
set line_num 1382; puts $output_file "abort_read           <= '1' when address_conflict = '1' and last_was_read  = '1' else '0';"
set line_num 1383; puts $output_file "abort_write          <= '1' when address_conflict = '1' and last_was_write = '1' else '0';"
set line_num 1384; puts $output_file "valid_read           <= '1' when address_conflict = '0' and last_was_read  = '1' else '0';"
set line_num 1385; puts $output_file "valid_write          <= '1' when address_conflict = '0' and last_was_write = '1' else '0';"
set line_num 1386; puts $output_file ""
set line_num 1387; puts $output_file "-- refresh command"
set line_num 1388; puts $output_file "auto_refresh    <= refreshmax_reached;"
set line_num 1389; puts $output_file ""
set line_num 1390; puts $output_file "-- automatic row closing command"
set line_num 1391; puts $output_file "auto_rowclose   <= rowactivemax_reached and bank_is_opened;"
set line_num 1392; puts $output_file ""
set line_num 1393; puts $output_file "-- command signals assignments"
set line_num 1394; puts $output_file "ddr_rasb        <= ddr_cmd(2);"
set line_num 1395; puts $output_file "ddr_casb        <= ddr_cmd(1);"
set line_num 1396; puts $output_file "ddr_web         <= ddr_cmd(0);"
set line_num 1397; puts $output_file "ddr_csb         <= ddr_csb_int;"
set line_num 1398; puts $output_file "ddr_ODT         <= ddr_odt_int;"
set line_num 1399; puts $output_file "ddr_ba          <= ddr_ba_int     ;"
set line_num 1400; puts $output_file "ddr_address     <= ddr_address_int;"
set line_num 1401; puts $output_file "ddr_cke         <= ddr_cke_int    ;"
set line_num 1402; puts $output_file "ddr_force_nop   <= ddr_force_nop_int;"
set line_num 1403; puts $output_file ""
set line_num 1404; puts $output_file "-- decoded csbs"
set line_num 1405; puts $output_file "user_csb     <= CSB_ZERO when user_rank_address  = '0'  else CSB_ONE;"
set line_num 1406; puts $output_file "latch_csb    <= CSB_ZERO when latch_rank_address = '0'  else CSB_ONE;"
set line_num 1407; puts $output_file "opened_csb   <= CSB_ZERO when opened_rank        = '0'  else CSB_ONE;"
set line_num 1408; puts $output_file "reg_csb      <= CSB_ZERO when reg_rank_address   = '0'  else CSB_ONE;"
set line_num 1409; puts $output_file ""
set line_num 1410; puts $output_file "-- latched input signals"
set line_num 1411; puts $output_file "latch_col_address     <= user_col_address  when user_ready_int = '1' else reg_col_address ; "
set line_num 1412; puts $output_file "latch_row_address     <= user_row_address  when user_ready_int = '1' else reg_row_address ; "
set line_num 1413; puts $output_file "latch_bank_address    <= user_bank_address when user_ready_int = '1' else reg_bank_address; "
set line_num 1414; puts $output_file "latch_rank_address    <= user_rank_address when user_ready_int = '1' else reg_rank_address; "
set line_num 1415; puts $output_file "latch_read            <= user_read         when user_ready_int = '1' else reg_read        ; "
set line_num 1416; puts $output_file "latch_write           <= user_write        when user_ready_int = '1' else reg_write       ; "
set line_num 1417; puts $output_file "latch_csb             <= user_csb          when user_ready_int = '1' else reg_csb         ;"
set line_num 1418; puts $output_file ""
set line_num 1419; puts $output_file "-- internal version of output signals"
set line_num 1420; puts $output_file "user_get_data       <= user_get_data_int;"
set line_num 1421; puts $output_file "dqs_reset           <= dqs_reset_int;"
set line_num 1422; puts $output_file "write_enable        <= write_enable_int;"
set line_num 1423; puts $output_file "dqs_enable          <= dqs_enable_int;"
set line_num 1424; puts $output_file "ddr_rst_dqs_div_out <= ddr_rst_dqs_div_out_int;"
set line_num 1425; puts $output_file "rst_calib           <= rst_calib_int;"
set line_num 1426; puts $output_file "input_data_valid    <= input_data_valid_int;"
set line_num 1427; puts $output_file "-- user_ready is coassigned with user_ready_int directly in the code"
set line_num 1428; puts $output_file "--    to avoid delta delay simulation problems and make routing easier"
set line_num 1429; puts $output_file "-- user_ready          <= user_ready_int;"
set line_num 1430; puts $output_file ""
set line_num 1431; puts $output_file "end arc_controller;                "
set line_num 1432; puts $output_file ""
close $output_file
