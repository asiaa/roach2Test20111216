set output_file [open "mem_tester_sim/ddr2_controller_v1_00_a/hdl/vhdl/data_write_72bit.vhd" w ]
set line_num 1; puts $output_file "--******************************************************************************"
set line_num 2; puts $output_file "--"
set line_num 3; puts $output_file "--  Xilinx, Inc. 2002                 www.xilinx.com"
set line_num 4; puts $output_file "--"
set line_num 5; puts $output_file "--"
set line_num 6; puts $output_file "--*******************************************************************************"
set line_num 7; puts $output_file "--"
set line_num 8; puts $output_file "--  File name :       data_write.vhd"
set line_num 9; puts $output_file "--"
set line_num 10; puts $output_file "--  Description :     This module comprises the write data paths for the"
set line_num 11; puts $output_file "--                    DDR1 memory interface.                 "
set line_num 12; puts $output_file "-- "
set line_num 13; puts $output_file "--                    "
set line_num 14; puts $output_file "--  Date - revision : 10/16/2003"
set line_num 15; puts $output_file "--"
set line_num 16; puts $output_file "--  Author :          Maria George (Modifed by Sailaja)"
set line_num 17; puts $output_file "--"
set line_num 18; puts $output_file "--  Contact : e-mail  hotline@xilinx.com"
set line_num 19; puts $output_file "--            phone   + 1 800 255 7778 "
set line_num 20; puts $output_file "--"
set line_num 21; puts $output_file "--  Disclaimer: LIMITED WARRANTY AND DISCLAMER. These designs are "
set line_num 22; puts $output_file "--              provided to you \"as is\". Xilinx and its licensors make and you "
set line_num 23; puts $output_file "--              receive no warranties or conditions, express, implied, "
set line_num 24; puts $output_file "--              statutory or otherwise, and Xilinx specifically disclaims any "
set line_num 25; puts $output_file "--              implied warranties of merchantability, non-infringement, or "
set line_num 26; puts $output_file "--              fitness for a particular purpose. Xilinx does not warrant that "
set line_num 27; puts $output_file "--              the functions contained in these designs will meet your "
set line_num 28; puts $output_file "--              requirements, or that the operation of these designs will be "
set line_num 29; puts $output_file "--              uninterrupted or error free, or that defects in the Designs "
set line_num 30; puts $output_file "--              will be corrected. Furthermore, Xilinx does not warrant or "
set line_num 31; puts $output_file "--              make any representations regarding use or the results of the "
set line_num 32; puts $output_file "--              use of the designs in terms of correctness, accuracy, "
set line_num 33; puts $output_file "--              reliability, or otherwise. "
set line_num 34; puts $output_file "--"
set line_num 35; puts $output_file "--              LIMITATION OF LIABILITY. In no event will Xilinx or its "
set line_num 36; puts $output_file "--              licensors be liable for any loss of data, lost profits, cost "
set line_num 37; puts $output_file "--              or procurement of substitute goods or services, or for any "
set line_num 38; puts $output_file "--              special, incidental, consequential, or indirect damages "
set line_num 39; puts $output_file "--              arising from the use or operation of the designs or "
set line_num 40; puts $output_file "--              accompanying documentation, however caused and on any theory "
set line_num 41; puts $output_file "--              of liability. This limitation will apply even if Xilinx "
set line_num 42; puts $output_file "--              has been advised of the possibility of such damage. This "
set line_num 43; puts $output_file "--              limitation shall apply not-withstanding the failure of the "
set line_num 44; puts $output_file "--              essential purpose of any limited remedies herein. "
set line_num 45; puts $output_file "--"
set line_num 46; puts $output_file "--  Copyright © 2002 Xilinx, Inc."
set line_num 47; puts $output_file "--  All rights reserved "
set line_num 48; puts $output_file "-- "
set line_num 49; puts $output_file "--*****************************************************************************"
set line_num 50; puts $output_file ""
set line_num 51; puts $output_file "library ieee;"
set line_num 52; puts $output_file "use ieee.std_logic_1164.all;"
set line_num 53; puts $output_file "use ieee.std_logic_unsigned.all;"
set line_num 54; puts $output_file "--library synplify; "
set line_num 55; puts $output_file "--use synplify.attributes.all;"
set line_num 56; puts $output_file "--"
set line_num 57; puts $output_file "-- pragma translate_off"
set line_num 58; puts $output_file "library UNISIM;"
set line_num 59; puts $output_file "use UNISIM.VCOMPONENTS.ALL;"
set line_num 60; puts $output_file "-- pragma translate_on"
set line_num 61; puts $output_file "--"
set line_num 62; puts $output_file "entity   data_write_72bit  is"
set line_num 63; puts $output_file "port("
set line_num 64; puts $output_file "	clk                : in std_logic;"
set line_num 65; puts $output_file "	clk90              : in std_logic;"
set line_num 66; puts $output_file "	reset_r            : in std_logic;"
set line_num 67; puts $output_file "	reset90_r          : in std_logic;"
set line_num 68; puts $output_file "	reset180_r         : in std_logic;"
set line_num 69; puts $output_file "	reset270_r         : in std_logic;"
set line_num 70; puts $output_file "	"
set line_num 71; puts $output_file "	input_data         : in std_logic_vector(143 downto 0);"
set line_num 72; puts $output_file "	byte_enable        : in std_logic_vector(17 downto 0);"
set line_num 73; puts $output_file "	write_enable       : in std_logic;"
set line_num 74; puts $output_file "	input_data_valid   : in std_logic;"
set line_num 75; puts $output_file ""
set line_num 76; puts $output_file "	write_en_val       : out std_logic;"
set line_num 77; puts $output_file "	write_data_falling : out std_logic_vector(71 downto 0);"
set line_num 78; puts $output_file "	write_data_rising  : out std_logic_vector(71 downto 0);"
set line_num 79; puts $output_file "	data_mask_falling  : out std_logic_vector(8 downto 0);"
set line_num 80; puts $output_file "	data_mask_rising   : out std_logic_vector(8 downto 0)"
set line_num 81; puts $output_file "     );"
set line_num 82; puts $output_file "end   data_write_72bit;  "
set line_num 83; puts $output_file ""
set line_num 84; puts $output_file "architecture   arc_data_write_72bit of   data_write_72bit    is"
set line_num 85; puts $output_file ""
set line_num 86; puts $output_file "signal write_data             : std_logic_vector(143 downto 0);"
set line_num 87; puts $output_file "signal write_data_falling_int : std_logic_vector(71 downto 0);"
set line_num 88; puts $output_file "signal write_data_rising_int  : std_logic_vector(71 downto 0);"
set line_num 89; puts $output_file "signal data_mask_falling_int  : std_logic_vector(8 downto 0);"
set line_num 90; puts $output_file "signal data_mask_rising_int   : std_logic_vector(8 downto 0);"
set line_num 91; puts $output_file ""
set line_num 92; puts $output_file "signal write_data_falling_val : std_logic_vector(71 downto 0);"
set line_num 93; puts $output_file "signal write_data_rising_val  : std_logic_vector(71 downto 0);"
set line_num 94; puts $output_file "signal data_mask_falling_val  : std_logic_vector(8 downto 0);"
set line_num 95; puts $output_file "signal data_mask_rising_val   : std_logic_vector(8 downto 0);"
set line_num 96; puts $output_file ""
set line_num 97; puts $output_file "signal clk180                 : std_logic;"
set line_num 98; puts $output_file "signal clk270                 : std_logic;"
set line_num 99; puts $output_file ""
set line_num 100; puts $output_file "attribute syn_preserve : boolean;"
set line_num 101; puts $output_file "attribute syn_preserve of write_data_falling_val  : signal is true;"
set line_num 102; puts $output_file "attribute syn_preserve of write_data_rising_val   : signal is true;"
set line_num 103; puts $output_file "attribute syn_preserve of write_data_falling_int  : signal is true;"
set line_num 104; puts $output_file "attribute syn_preserve of write_data_rising_int   : signal is true;"
set line_num 105; puts $output_file "attribute syn_preserve of data_mask_falling_val   : signal is true;"
set line_num 106; puts $output_file "attribute syn_preserve of data_mask_rising_val    : signal is true;"
set line_num 107; puts $output_file "attribute syn_preserve of data_mask_falling_int   : signal is true;"
set line_num 108; puts $output_file "attribute syn_preserve of data_mask_rising_int    : signal is true;"
set line_num 109; puts $output_file ""
set line_num 110; puts $output_file "begin"
set line_num 111; puts $output_file "                                                                     "
set line_num 112; puts $output_file "clk270      <= not clk90;"
set line_num 113; puts $output_file "clk180      <= not clk;"
set line_num 114; puts $output_file " "
set line_num 115; puts $output_file "-- internal signal remapping"
set line_num 116; puts $output_file "write_data_falling <= write_data_falling_val;"
set line_num 117; puts $output_file "write_data_rising  <= write_data_rising_val ;"
set line_num 118; puts $output_file "data_mask_falling  <= data_mask_falling_val ;"
set line_num 119; puts $output_file "data_mask_rising   <= data_mask_rising_val  ;"
set line_num 120; puts $output_file ""
set line_num 121; puts $output_file "-- first data sampling on clk"
set line_num 122; puts $output_file "process(clk)"
set line_num 123; puts $output_file "begin"
set line_num 124; puts $output_file "	if clk'event and clk = '1' then"
set line_num 125; puts $output_file "		if reset_r = '1' then"
set line_num 126; puts $output_file "			write_data_falling_int    <= (others => '0');"
set line_num 127; puts $output_file "			write_data_rising_int     <= (others => '0');"
set line_num 128; puts $output_file "			data_mask_falling_int     <= (others => '0');"
set line_num 129; puts $output_file "			data_mask_rising_int      <= (others => '0');"
set line_num 130; puts $output_file "		else"
set line_num 131; puts $output_file "			if input_data_valid = '1' then"
set line_num 132; puts $output_file "				write_data_rising_int    <= input_data(71 downto 0);"
set line_num 133; puts $output_file "				write_data_falling_int     <= input_data(143 downto 72);"
set line_num 134; puts $output_file "				data_mask_rising_int     <= not byte_enable(8 downto 0);"
set line_num 135; puts $output_file "				data_mask_falling_int      <= not byte_enable(17 downto 9);"
set line_num 136; puts $output_file "			end if;"
set line_num 137; puts $output_file "		end if;"
set line_num 138; puts $output_file ""
set line_num 139; puts $output_file "	end if;"
set line_num 140; puts $output_file "end process;"
set line_num 141; puts $output_file ""
set line_num 142; puts $output_file "-- falling needs a second data sampling on clk180, rising is directly connected to the output"
set line_num 143; puts $output_file "process(clk180)"
set line_num 144; puts $output_file "begin"
set line_num 145; puts $output_file "	if clk180'event and clk180 = '1' then"
set line_num 146; puts $output_file "		if reset180_r = '1' then"
set line_num 147; puts $output_file "			write_data_falling_val  <= (others => '0');"
set line_num 148; puts $output_file "			data_mask_falling_val   <= (others => '0');"
set line_num 149; puts $output_file "		else"
set line_num 150; puts $output_file "			write_data_falling_val  <= write_data_falling_int;"
set line_num 151; puts $output_file "			data_mask_falling_val   <= data_mask_falling_int;"
set line_num 152; puts $output_file "		end if;"
set line_num 153; puts $output_file "	end if;"
set line_num 154; puts $output_file "end process;"
set line_num 155; puts $output_file ""
set line_num 156; puts $output_file "write_data_rising_val <= write_data_rising_int;"
set line_num 157; puts $output_file "data_mask_rising_val  <= data_mask_rising_int ;"
set line_num 158; puts $output_file ""
set line_num 159; puts $output_file "-- write enable data path"
set line_num 160; puts $output_file ""
set line_num 161; puts $output_file "process(clk270)"
set line_num 162; puts $output_file "begin"
set line_num 163; puts $output_file "	if clk270'event and clk270 = '1' then"
set line_num 164; puts $output_file "		if reset270_r = '1' then"
set line_num 165; puts $output_file "			write_en_val    <= '0';"
set line_num 166; puts $output_file "		else"
set line_num 167; puts $output_file "			write_en_val    <= write_enable;"
set line_num 168; puts $output_file "		end if;"
set line_num 169; puts $output_file "	end if;"
set line_num 170; puts $output_file "end process;"
set line_num 171; puts $output_file "                                                      "
set line_num 172; puts $output_file "end   arc_data_write_72bit;  "
set line_num 173; puts $output_file ""
close $output_file
