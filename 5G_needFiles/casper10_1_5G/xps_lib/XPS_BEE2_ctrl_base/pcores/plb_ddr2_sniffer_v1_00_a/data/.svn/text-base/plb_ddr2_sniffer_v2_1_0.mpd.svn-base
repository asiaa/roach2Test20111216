## Copyright (c) 2004 Xilinx, Inc. All Rights Reserved.
## You may copy and modify these files for your own internal use solely with
## Xilinx programmable logic devices and  Xilinx EDK system or create IP
## modules solely for Xilinx programmable logic devices and Xilinx EDK system.
## No rights are granted to distribute any files unless they are distributed in
## Xilinx programmable logic devices.
###################################################################
##
## Name     : plb_ddr2_sniffer
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN plb_ddr2_sniffer

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = PPC:USER
OPTION CORE_STATE = DEVELOPMENT

## Bus Interfaces
BUS_INTERFACE BUS = SPLB, BUS_TYPE = SLAVE, BUS_STD = PLB
BUS_INTERFACE BUS = DDR2_USER, BUS_STD = DDR2_USER, BUS_TYPE = TARGET
BUS_INTERFACE BUS = DDR2_CTRL, BUS_STD = DDR2_USER, BUS_TYPE = INITIATOR

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, BUS = SPLB, ADDRESS = BASE, PAIR = C_HIGHADDR
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_BASEADDR
PARAMETER C_PLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_DWIDTH = 64, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_NUM_MASTERS = 8, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_MID_WIDTH = 3, DT = INTEGER, BUS = SPLB
PARAMETER C_FAMILY = virtex2p, DT = STRING

## Ports
PORT PLB_Clk = "", DIR = I, SIGIS = Clk, BUS = SPLB
PORT PLB_Rst = PLB_Rst, DIR = I, SIGIS = Rst, BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_PLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MErr = Sl_MErr, DIR = O, VEC = [0:(C_PLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_PLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:(C_PLB_AWIDTH-1)], BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_PLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_compress = PLB_compress, DIR = I, BUS = SPLB
PORT PLB_guarded = PLB_guarded, DIR = I, BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_PLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_ordered = PLB_ordered, DIR = I, BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_pendPri = PLB_pendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_pendReq = PLB_pendReq, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_PLB_DWIDTH-1)], BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB

# Controller memory interface
## Clock
PORT ddr_clk          = "",               DIR = I  

## USER interface
PORT user_input_data  = user_input_data,  BUS = DDR2_USER, DIR = I, VEC = [143:0]
PORT user_byte_enable = user_byte_enable, BUS = DDR2_USER, DIR = I, VEC = [17:0]
PORT user_get_data    = user_get_data,    BUS = DDR2_USER, DIR = O
PORT user_output_data = user_output_data, BUS = DDR2_USER, DIR = O, VEC = [143:0]
PORT user_data_valid  = user_data_valid,  BUS = DDR2_USER, DIR = O
PORT user_address     = user_address,     BUS = DDR2_USER, DIR = I, VEC = [31:0]
PORT user_read        = user_read,        BUS = DDR2_USER, DIR = I
PORT user_write       = user_write,       BUS = DDR2_USER, DIR = I
PORT user_half_burst  = user_half_burst,  BUS = DDR2_USER, DIR = I
PORT user_ready       = user_ready,       BUS = DDR2_USER, DIR = O
PORT user_reset       = user_reset,       BUS = DDR2_USER, DIR = I

## DDR2 controller ports                       
PORT ctrl_input_data  = user_input_data,  BUS = DDR2_CTRL, DIR = O, VEC = [143:0]
PORT ctrl_byte_enable = user_byte_enable, BUS = DDR2_CTRL, DIR = O, VEC = [17:0]
PORT ctrl_get_data    = user_get_data,    BUS = DDR2_CTRL, DIR = I  
PORT ctrl_output_data = user_output_data, BUS = DDR2_CTRL, DIR = I, VEC = [143:0]
PORT ctrl_data_valid  = user_data_valid,  BUS = DDR2_CTRL, DIR = I  
PORT ctrl_address     = user_address,     BUS = DDR2_CTRL, DIR = O, VEC = [31:0]
PORT ctrl_read        = user_read,        BUS = DDR2_CTRL, DIR = O
PORT ctrl_write       = user_write,       BUS = DDR2_CTRL, DIR = O
PORT ctrl_half_burst  = user_half_burst,  BUS = DDR2_CTRL, DIR = O
PORT ctrl_ready       = user_ready,       BUS = DDR2_CTRL, DIR = I
PORT ctrl_reset       = user_reset,       BUS = DDR2_CTRL, DIR = O

END
