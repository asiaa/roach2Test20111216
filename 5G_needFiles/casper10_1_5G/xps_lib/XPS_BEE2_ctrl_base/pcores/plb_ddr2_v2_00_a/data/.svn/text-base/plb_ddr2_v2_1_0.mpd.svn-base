BEGIN plb_ddr2

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION IP_GROUP = PPC:USER
OPTION CORE_STATE = DEVELOPMENT


## Bus Interfaces
BUS_INTERFACE BUS = SPLB, BUS_TYPE = SLAVE, BUS_STD = PLB
BUS_INTERFACE BUS = MEM_CMD, BUS_STD = MEM_CMD, BUS_TYPE = INITIATOR

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, BUS = SPLB, ADDRESS = BASE, PAIR = C_HIGHADDR
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_BASEADDR
PARAMETER C_PLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_DWIDTH = 64, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_NUM_MASTERS = 8, DT = INTEGER, BUS = SPLB
PARAMETER C_PLB_MID_WIDTH = 3, DT = INTEGER, BUS = SPLB
PARAMETER C_FAMILY = virtex2p, DT = STRING

PARAMETER C_WIDE_DATA = 0, DT = INTEGER, RANGE = (0:1)
PARAMETER C_HALF_BURST = 1, DT = INTEGER, RANGE = (1)
PARAMETER C_SUPPORT_SHARED = 0, DT = INTEGER, RANGE = (0:1)

## Ports
PORT PLB_Clk = "", DIR = I, SIGIS = Clk, BUS = SPLB
PORT PLB_Rst = PLB_Rst, DIR = I, SIGIS = Rst, BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_PLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MErr = Sl_MErr, DIR = O, VEC = [0:(C_PLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_PLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:(C_PLB_AWIDTH-1)], BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_PLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_compress = PLB_compress, DIR = I, BUS = SPLB
PORT PLB_guarded = PLB_guarded, DIR = I, BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_PLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_ordered = PLB_ordered, DIR = I, BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_pendPri = PLB_pendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_pendReq = PLB_pendReq, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_PLB_DWIDTH-1)], BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB

# Memory interface
PORT Mem_Cmd_Address = Mem_Cmd_Address, DIR = O, BUS = MEM_CMD,  VEC = [31:0]
PORT Mem_Cmd_RNW     = Mem_Cmd_RNW,     DIR = O, BUS = MEM_CMD   
PORT Mem_Cmd_Valid   = Mem_Cmd_Valid,   DIR = O, BUS = MEM_CMD   
PORT Mem_Cmd_Tag     = Mem_Cmd_Tag,     DIR = O, BUS = MEM_CMD,  VEC = [31:0]
PORT Mem_Cmd_Ack     = Mem_Cmd_Ack,     DIR = I, BUS = MEM_CMD
PORT Mem_Rd_Dout     = Mem_Rd_Dout,     DIR = I, BUS = MEM_CMD,  VEC = [(144*(C_WIDE_DATA+1))-1:0]
PORT Mem_Rd_Tag      = Mem_Rd_Tag,      DIR = I, BUS = MEM_CMD,  VEC = [31:0]
PORT Mem_Rd_Ack      = Mem_Rd_Ack,      DIR = O, BUS = MEM_CMD   
PORT Mem_Rd_Valid    = Mem_Rd_Valid,    DIR = I, BUS = MEM_CMD   
PORT Mem_Wr_Din      = Mem_Wr_Din,      DIR = O, BUS = MEM_CMD,  VEC = [(144*(C_WIDE_DATA+1))-1:0]
PORT Mem_Wr_BE       = Mem_Wr_BE,       DIR = O, BUS = MEM_CMD,  VEC = [(18*(C_WIDE_DATA+1))-1:0]

END
